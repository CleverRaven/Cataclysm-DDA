# this file is HEAVILY influenced by https://github.com/boostorg/hana/blob/master/.travis.yml

dist: xenial
language: c++

cache: ccache

notifications:
  email: false

git:
  depth: 5

addons:
  # these apt sources will be referenced later (by using *name)
  apt:
    sources: &apt_sources
      - ubuntu-toolchain-r-test
    config:
      retries: true

compiler: gcc
os: linux

# We have branch builds disabled globally to prevent double-builds of PRs.
# This re-enables just the master branch.
branches:
  only:
  - dev

jobs:
  include:
    # Initial test stage, if this fails everything else is cancelled.
    - stage: test
      # GCC 5 is the pre-installed compiler on Xenial
      env: COMPILER=g++ MODS=--mods=RL_Classes

    # Then build different configurations and targets in parallel.
    - stage: variants
    # Linux Tiles
      env: COMPILER=g++-8 CXXFLAGS='-Wno-implicit-fallthrough' TILES=1 SOUND=1 SANITIZE=address
      compiler: gcc
      addons: &gcc8
        apt:
          packages: ["g++-8",   "g++-8-multilib",   "libc6-dbg", "libc6-dbg:i386", "libsdl2-dev", "libsdl2-ttf-dev", "libsdl2-image-dev", "libsdl2-mixer-dev"]
          sources: *apt_sources

      # MXE variants using alternate repository http://mirror.mxe.cc/repos/apt
      # GCC MinGW
    - env: COMPILER='g++' LDFLAGS='-static-libgcc -static-libstdc++' MXE_TARGET='i686-w64-mingw32.static' WINE='wine'
      addons: &gcc
        apt:
          packages: ["wine"]

    # Windows Tiles x32 with deployment no lua no astyle
    - env: COMPILER='g++' LDFLAGS='-static-libgcc -static-libstdc++' MXE_TARGET='i686-w64-mingw32.static' NATIVE="win32" WINE='wine' TILES=1 SOUND=1 LOCALIZE=1 LANGUAGES=all DEPLOY=1 BUILD_TYPE="win-tiles32"
      compiler: gcc
      addons: &gcc
        apt:
          packages: ["wine"]     

    # Windows Tiles x64 with deployment no lua no astyle
    - env: COMPILER='g++' LDFLAGS='-static-libgcc -static-libstdc++' MXE_TARGET='i686-w64-mingw32.static' NATIVE="win64" WINE='wine' TILES=1 SOUND=1 LOCALIZE=1 LANGUAGES=all DEPLOY=1 BUILD_TYPE="win-tiles64"
      compiler: gcc
      addons: &gcc
        apt:
          packages: ["wine"]    

    # Windows Tiles x32 with deployment no lua
    - env: COMPILER='g++' LDFLAGS='-static-libgcc -static-libstdc++' MXE_TARGET='i686-w64-mingw32.static' NATIVE="win32" WINE='wine' TILES=1 SOUND=1 LOCALIZE=1 LANGUAGES=all DEPLOY=1 BUILD_TYPE="win-tiles32"
      compiler: gcc
      addons: &gcc
        apt:
          packages: ["wine", "astyle"]     

    # Windows Tiles x64 with deployment no lua
    - env: COMPILER='g++' LDFLAGS='-static-libgcc -static-libstdc++' MXE_TARGET='i686-w64-mingw32.static' NATIVE="win64" WINE='wine' TILES=1 SOUND=1 LOCALIZE=1 LANGUAGES=all DEPLOY=1 BUILD_TYPE="win-tiles64"
      compiler: gcc
      addons: &gcc
        apt:
          packages: ["wine", "astyle"]               

    # Windows Tiles x32 with deployment
    - env: COMPILER='g++' LDFLAGS='-static-libgcc -static-libstdc++' MXE_TARGET='i686-w64-mingw32.static' NATIVE="win32" WINE='wine' TILES=1 SOUND=1 LUA=1 LOCALIZE=1 LANGUAGES=all DEPLOY=1 BUILD_TYPE="win-tiles32"
      compiler: gcc
      addons: &gcc
        apt:
          packages: ["wine", "lua5.2", "liblua5.2-dev", "astyle"]     

    # Windows Tiles x64 with deployment
    - env: COMPILER='g++' LDFLAGS='-static-libgcc -static-libstdc++' MXE_TARGET='i686-w64-mingw32.static' NATIVE="win64" WINE='wine' TILES=1 SOUND=1 LUA=1 LOCALIZE=1 LANGUAGES=all DEPLOY=1 BUILD_TYPE="win-tiles64"
      compiler: gcc
      addons: &gcc
        apt:
          packages: ["wine", "lua5.2", "liblua5.2-dev", "astyle"]     

    # CMake Clang 6.0 Tiles
    - env: CLANG=clang++-6.0 TILES=1 SOUND=1 CXXFLAGS=-Wno-error=unused-command-line-argument CMAKE=1
      dist: trusty
      compiler: clang
      addons: &clang60
        apt:
          packages: ["clang-6.0", "g++-multilib", "libc6-dbg", "libc6-dbg:i386", "g++-6", "libsdl2-dev", "libsdl2-ttf-dev", "libsdl2-image-dev", "libsdl2-mixer-dev"]
          sources: [*apt_sources, llvm-toolchain-trusty-6.0]

    # macOS Tiles
    - env: CLANG=clang++ NATIVE=osx OSX_MIN=10.13 TILES=1 SOUND=1 LUA=1
      os: osx
      osx_image: xcode10.1
      compiler: clang

    # Finally check the compiler variants
    - stage: compilers
      env: COMPILER=g++-4.8
      compiler: gcc
      addons: &gcc48
        apt:
          packages: ["g++-4.8", "g++-4.8-multilib", "libc6-dbg", "libc6-dbg:i386"]
          sources: *apt_sources

    # GCC 4.9
    - env: COMPILER=g++-4.9
      if: type != pull_request
      compiler: gcc
      addons: &gcc49
        apt:
          packages: ["g++-4.9", "g++-4.9-multilib", "libc6-dbg", "libc6-dbg:i386"]
          sources: *apt_sources

    # GCC 6
    - env: COMPILER=g++-6
      if: type != pull_request
      compiler: gcc
      addons: &gcc6
        apt:
          packages: ["g++-6",   "g++-6-multilib",   "libc6-dbg", "libc6-dbg:i386"]
          sources: *apt_sources

    # GCC 7
    - env: COMPILER=g++-7 CXXFLAGS='-Wno-implicit-fallthrough' CODE_COVERAGE=true
      if: type != pull_request
      compiler: gcc
      dist: trusty
      addons: &gcc7
        apt:
          packages: ["g++-7",   "g++-7-multilib",   "libc6-dbg", "libc6-dbg:i386", "lcov"]
          sources: *apt_sources

    # GCC 8
    - env: COMPILER=g++-8 CXXFLAGS='-Wno-implicit-fallthrough'
      compiler: gcc
      addons: &gcc8
        apt:
          packages: ["g++-8",   "g++-8-multilib",   "libc6-dbg", "libc6-dbg:i386"]
          sources: *apt_sources

    # Clang 3.8
    - env: CLANG=clang++-3.8 CXXFLAGS='-Wno-error=unused-command-line-argument -D__extern_always_inline="extern __always_inline"'
      compiler: clang
      addons: &clang38
        apt:
          packages: ["clang-3.8", "g++-multilib", "libc6-dbg", "libc6-dbg:i386", "g++-6"]
          sources: *apt_sources

    # Clang 3.9
    - env: CLANG=clang++-3.9 CXXFLAGS='-Wno-error=unused-command-line-argument -D__extern_always_inline="extern __always_inline"'
      if: type != pull_request
      compiler: clang
      addons: &clang39
        apt:
          packages: ["clang-3.9", "g++-multilib", "libc6-dbg", "libc6-dbg:i386", "g++-6"]
          sources: *apt_sources

    # Clang 4.0
    - env: CLANG=clang++-4.0 CXXFLAGS=-Wno-error=unused-command-line-argument
      if: type != pull_request
      compiler: clang
      addons: &clang40
        apt:
          packages: ["clang-4.0", "g++-multilib", "libc6-dbg", "libc6-dbg:i386", "g++-6"]
          sources: [*apt_sources, llvm-toolchain-trusty-4.0]

    # Clang 5.0
    - env: CLANG=clang++-5.0 CXXFLAGS=-Wno-error=unused-command-line-argument
      if: type != pull_request
      dist: trusty
      compiler: clang
      addons: &clang50
        apt:
          packages: ["clang-5.0", "g++-multilib", "libc6-dbg", "libc6-dbg:i386", "g++-6"]
          sources: [*apt_sources, llvm-toolchain-trusty-5.0]

    # Clang 6.0
    - env: CLANG=clang++-6.0 CXXFLAGS=-Wno-error=unused-command-line-argument SANITIZE=address EXTRA_TEST_OPTS="~[.] ~vehicle_efficiency ~vehicle_drag ~starting_items"
      dist: trusty
      compiler: clang
      addons: &clang60
        apt:
          packages: ["clang-6.0", "g++-multilib", "libc6-dbg", "libc6-dbg:i386", "g++-6"]
          sources: [*apt_sources, llvm-toolchain-trusty-6.0]

before_script:
  - if [ -n "${CLANG}" ]; then COMPILER="$CLANG"; fi
  - ${COMPILER} --version
  - CXX="$COMPILER"
  - export VER="cth-${BUILD_TYPE}-${TRAVIS_BUILD_NUMBER}"
  - source build-scripts/requirements.sh

script:
  - build-scripts/build.sh

after_success:
  - if [ -n "${CODE_COVERAGE}" ]; then coveralls -b . -i src -e tests --gcov /usr/bin/gcov-4.8; fi
  - if [ -n "${CODE_COVERAGE}" ]; then bash <(curl -s https://codecov.io/bash); fi

before_deploy:
  - make CCACHE=1 RELEASE=1 CROSS="$CROSS_COMPILATION" VERSION="${VER}" $BUILD_EXTRA bindist && export RELEASE_PKG_FILES=$(ls *.zip *.tar.gz)

deploy:
  provider: releases
  api_key:
    secure: EfssdhGJxeYf8vkx1aJf4YPGdznXc4erPwQnQTqplsjpRDLclScgFAxQ+eF37feUeHTHlXYZ5h41VdmIA8eKCaoxCHVAYSGHk1au8m8KUf4zEZTEmwkWf/NXwrkjnmEr1zphf1KADkEnLmCe6emWDzT/THGAPgulB3R9mz/dgysP1IikTLghPCGc+QO3smieBqu7cecXPBW9UsdEQRtXtWOu8dakLw2XbsfaqfX18Pb5clfYYGe7XwjURbfKDkSAWqm2LD4NPASSOFKUGLf71SCUVVeIuzlbpB85+k29M883M36c0RjNE+JRfVhJcBdsXvuHbNzSrM6yg3/HQq+GegG/4ZjA1VmLH6QqGGvfml6mZMxL8dUKnOWauodUyW8BCcto1k9LLLzOchj8ZZA5V3z2wE3N5vErSHlOvpo2K2LKW+2qovA/eUANt91R/0LUjoymEvudC7Y4PwvrGNXrC/eRRwEJJN3rLVam6KbQ5XUj7ieG7FWpmnWPujiUo+nbr7FoI66c8Z4qkwKvCXPoABP/tG90KEZMTh2blNfwvM/lBsDCMER4dtxGto4nHBaR8CYGK9k2nRKR9Blsr7QtTjvjU6IcQzD7vm0IjAnqKvQoab1dgGf10Nt+lsN3hKARsa2ZySxbS1sEsJ1+v0SW+MjMfvYZjhRdPB2JlxbL7l8=
  file: "${RELEASE_PKG_FILES}"
  on:
    repo: TGITS-Solutions/Cataclysm-DDA
    branch: dev
