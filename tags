!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACTION_BIONICS	action.h	/^ACTION_BIONICS,$/;"	e	enum:action_id
ACTION_BUTCHER	action.h	/^ACTION_BUTCHER,$/;"	e	enum:action_id
ACTION_CENTER	action.h	/^ACTION_CENTER,$/;"	e	enum:action_id
ACTION_CHAT	action.h	/^ACTION_CHAT,$/;"	e	enum:action_id
ACTION_CLOSE	action.h	/^ACTION_CLOSE,$/;"	e	enum:action_id
ACTION_COMPARE	action.h	/^ACTION_COMPARE,$/;"	e	enum:action_id
ACTION_CONSTRUCT	action.h	/^ACTION_CONSTRUCT,$/;"	e	enum:action_id
ACTION_CRAFT	action.h	/^ACTION_CRAFT,$/;"	e	enum:action_id
ACTION_DEBUG	action.h	/^ACTION_DEBUG,$/;"	e	enum:action_id
ACTION_DIR_DROP	action.h	/^ACTION_DIR_DROP,$/;"	e	enum:action_id
ACTION_DISASSEMBLE	action.h	/^ACTION_DISASSEMBLE,$/;"	e	enum:action_id
ACTION_DISPLAY_SCENT	action.h	/^ACTION_DISPLAY_SCENT,$/;"	e	enum:action_id
ACTION_DROP	action.h	/^ACTION_DROP,$/;"	e	enum:action_id
ACTION_EAT	action.h	/^ACTION_EAT,$/;"	e	enum:action_id
ACTION_EXAMINE	action.h	/^ACTION_EXAMINE,$/;"	e	enum:action_id
ACTION_FACTIONS	action.h	/^ACTION_FACTIONS,$/;"	e	enum:action_id
ACTION_FIRE	action.h	/^ACTION_FIRE,$/;"	e	enum:action_id
ACTION_FIRE_BURST	action.h	/^ACTION_FIRE_BURST,$/;"	e	enum:action_id
ACTION_HELP	action.h	/^ACTION_HELP,$/;"	e	enum:action_id
ACTION_IGNORE_ENEMY	action.h	/^ACTION_IGNORE_ENEMY,$/;"	e	enum:action_id
ACTION_INVENTORY	action.h	/^ACTION_INVENTORY,$/;"	e	enum:action_id
ACTION_KILLS	action.h	/^ACTION_KILLS,$/;"	e	enum:action_id
ACTION_LIST_ITEMS	action.h	/^ACTION_LIST_ITEMS,$/;"	e	enum:action_id
ACTION_LONGCRAFT	action.h	/^ACTION_LONGCRAFT,$/;"	e	enum:action_id
ACTION_LOOK	action.h	/^ACTION_LOOK,$/;"	e	enum:action_id
ACTION_MAP	action.h	/^ACTION_MAP,$/;"	e	enum:action_id
ACTION_MESSAGES	action.h	/^ACTION_MESSAGES,$/;"	e	enum:action_id
ACTION_MISSIONS	action.h	/^ACTION_MISSIONS,$/;"	e	enum:action_id
ACTION_MORALE	action.h	/^ACTION_MORALE,$/;"	e	enum:action_id
ACTION_MOVE_DOWN	action.h	/^ACTION_MOVE_DOWN,$/;"	e	enum:action_id
ACTION_MOVE_E	action.h	/^ACTION_MOVE_E,$/;"	e	enum:action_id
ACTION_MOVE_N	action.h	/^ACTION_MOVE_N,$/;"	e	enum:action_id
ACTION_MOVE_NE	action.h	/^ACTION_MOVE_NE,$/;"	e	enum:action_id
ACTION_MOVE_NW	action.h	/^ACTION_MOVE_NW,$/;"	e	enum:action_id
ACTION_MOVE_S	action.h	/^ACTION_MOVE_S,$/;"	e	enum:action_id
ACTION_MOVE_SE	action.h	/^ACTION_MOVE_SE,$/;"	e	enum:action_id
ACTION_MOVE_SW	action.h	/^ACTION_MOVE_SW,$/;"	e	enum:action_id
ACTION_MOVE_UP	action.h	/^ACTION_MOVE_UP,$/;"	e	enum:action_id
ACTION_MOVE_W	action.h	/^ACTION_MOVE_W,$/;"	e	enum:action_id
ACTION_NULL	action.h	/^ACTION_NULL = 0,$/;"	e	enum:action_id
ACTION_OPEN	action.h	/^ACTION_OPEN,$/;"	e	enum:action_id
ACTION_ORGANIZE	action.h	/^ACTION_ORGANIZE,$/;"	e	enum:action_id
ACTION_PAUSE	action.h	/^ACTION_PAUSE,$/;"	e	enum:action_id
ACTION_PEEK	action.h	/^ACTION_PEEK,$/;"	e	enum:action_id
ACTION_PICKUP	action.h	/^ACTION_PICKUP,$/;"	e	enum:action_id
ACTION_PICK_STYLE	action.h	/^ACTION_PICK_STYLE,$/;"	e	enum:action_id
ACTION_PL_INFO	action.h	/^ACTION_PL_INFO,$/;"	e	enum:action_id
ACTION_QUIT	action.h	/^ACTION_QUIT,$/;"	e	enum:action_id
ACTION_READ	action.h	/^ACTION_READ,$/;"	e	enum:action_id
ACTION_RECRAFT	action.h	/^ACTION_RECRAFT,$/;"	e	enum:action_id
ACTION_RELOAD	action.h	/^ACTION_RELOAD,$/;"	e	enum:action_id
ACTION_SAVE	action.h	/^ACTION_SAVE,$/;"	e	enum:action_id
ACTION_SELECT_FIRE_MODE	action.h	/^ACTION_SELECT_FIRE_MODE,$/;"	e	enum:action_id
ACTION_SHIFT_E	action.h	/^ACTION_SHIFT_E,$/;"	e	enum:action_id
ACTION_SHIFT_N	action.h	/^ACTION_SHIFT_N,$/;"	e	enum:action_id
ACTION_SHIFT_NE	action.h	/^ACTION_SHIFT_NE,$/;"	e	enum:action_id
ACTION_SHIFT_NW	action.h	/^ACTION_SHIFT_NW,$/;"	e	enum:action_id
ACTION_SHIFT_S	action.h	/^ACTION_SHIFT_S,$/;"	e	enum:action_id
ACTION_SHIFT_SE	action.h	/^ACTION_SHIFT_SE,$/;"	e	enum:action_id
ACTION_SHIFT_SW	action.h	/^ACTION_SHIFT_SW,$/;"	e	enum:action_id
ACTION_SHIFT_W	action.h	/^ACTION_SHIFT_W,$/;"	e	enum:action_id
ACTION_SLEEP	action.h	/^ACTION_SLEEP,$/;"	e	enum:action_id
ACTION_SMASH	action.h	/^ACTION_SMASH,$/;"	e	enum:action_id
ACTION_TAKE_OFF	action.h	/^ACTION_TAKE_OFF,$/;"	e	enum:action_id
ACTION_THROW	action.h	/^ACTION_THROW,$/;"	e	enum:action_id
ACTION_TOGGLE_AUTOSAFE	action.h	/^ACTION_TOGGLE_AUTOSAFE,$/;"	e	enum:action_id
ACTION_TOGGLE_DEBUGMON	action.h	/^ACTION_TOGGLE_DEBUGMON,$/;"	e	enum:action_id
ACTION_TOGGLE_SAFEMODE	action.h	/^ACTION_TOGGLE_SAFEMODE,$/;"	e	enum:action_id
ACTION_UNLOAD	action.h	/^ACTION_UNLOAD,$/;"	e	enum:action_id
ACTION_USE	action.h	/^ACTION_USE,$/;"	e	enum:action_id
ACTION_USE_WIELDED	action.h	/^ACTION_USE_WIELDED,$/;"	e	enum:action_id
ACTION_WAIT	action.h	/^ACTION_WAIT,$/;"	e	enum:action_id
ACTION_WEAR	action.h	/^ACTION_WEAR,$/;"	e	enum:action_id
ACTION_WIELD	action.h	/^ACTION_WIELD,$/;"	e	enum:action_id
ACT_BUILD	pldata.h	/^ ACT_DISASSEMBLE, ACT_BUTCHER, ACT_FORAGE, ACT_BUILD, ACT_VEHICLE, ACT_REFILL_VEHICLE,$/;"	e	enum:activity_type
ACT_BUTCHER	pldata.h	/^ ACT_DISASSEMBLE, ACT_BUTCHER, ACT_FORAGE, ACT_BUILD, ACT_VEHICLE, ACT_REFILL_VEHICLE,$/;"	e	enum:activity_type
ACT_CRAFT	pldata.h	/^ ACT_RELOAD, ACT_READ, ACT_WAIT, ACT_CRAFT, ACT_LONGCRAFT,$/;"	e	enum:activity_type
ACT_DISASSEMBLE	pldata.h	/^ ACT_DISASSEMBLE, ACT_BUTCHER, ACT_FORAGE, ACT_BUILD, ACT_VEHICLE, ACT_REFILL_VEHICLE,$/;"	e	enum:activity_type
ACT_FORAGE	pldata.h	/^ ACT_DISASSEMBLE, ACT_BUTCHER, ACT_FORAGE, ACT_BUILD, ACT_VEHICLE, ACT_REFILL_VEHICLE,$/;"	e	enum:activity_type
ACT_LONGCRAFT	pldata.h	/^ ACT_RELOAD, ACT_READ, ACT_WAIT, ACT_CRAFT, ACT_LONGCRAFT,$/;"	e	enum:activity_type
ACT_NULL	pldata.h	/^ ACT_NULL = 0,$/;"	e	enum:activity_type
ACT_READ	pldata.h	/^ ACT_RELOAD, ACT_READ, ACT_WAIT, ACT_CRAFT, ACT_LONGCRAFT,$/;"	e	enum:activity_type
ACT_REFILL_VEHICLE	pldata.h	/^ ACT_DISASSEMBLE, ACT_BUTCHER, ACT_FORAGE, ACT_BUILD, ACT_VEHICLE, ACT_REFILL_VEHICLE,$/;"	e	enum:activity_type
ACT_RELOAD	pldata.h	/^ ACT_RELOAD, ACT_READ, ACT_WAIT, ACT_CRAFT, ACT_LONGCRAFT,$/;"	e	enum:activity_type
ACT_TRAIN	pldata.h	/^ ACT_TRAIN,$/;"	e	enum:activity_type
ACT_VEHICLE	pldata.h	/^ ACT_DISASSEMBLE, ACT_BUTCHER, ACT_FORAGE, ACT_BUILD, ACT_VEHICLE, ACT_REFILL_VEHICLE,$/;"	e	enum:activity_type
ACT_WAIT	pldata.h	/^ ACT_RELOAD, ACT_READ, ACT_WAIT, ACT_CRAFT, ACT_LONGCRAFT,$/;"	e	enum:activity_type
ADD_ALCOHOL	pldata.h	/^ ADD_CAFFEINE, ADD_ALCOHOL, ADD_SLEEP, ADD_PKILLER, ADD_SPEED, ADD_CIG,$/;"	e	enum:add_type
ADD_CAFFEINE	pldata.h	/^ ADD_CAFFEINE, ADD_ALCOHOL, ADD_SLEEP, ADD_PKILLER, ADD_SPEED, ADD_CIG,$/;"	e	enum:add_type
ADD_CIG	pldata.h	/^ ADD_CAFFEINE, ADD_ALCOHOL, ADD_SLEEP, ADD_PKILLER, ADD_SPEED, ADD_CIG,$/;"	e	enum:add_type
ADD_COKE	pldata.h	/^ ADD_COKE, ADD_CRACK,$/;"	e	enum:add_type
ADD_CRACK	pldata.h	/^ ADD_COKE, ADD_CRACK,$/;"	e	enum:add_type
ADD_NULL	pldata.h	/^ ADD_NULL,$/;"	e	enum:add_type
ADD_PKILLER	pldata.h	/^ ADD_CAFFEINE, ADD_ALCOHOL, ADD_SLEEP, ADD_PKILLER, ADD_SPEED, ADD_CIG,$/;"	e	enum:add_type
ADD_SLEEP	pldata.h	/^ ADD_CAFFEINE, ADD_ALCOHOL, ADD_SLEEP, ADD_PKILLER, ADD_SPEED, ADD_CIG,$/;"	e	enum:add_type
ADD_SPEED	pldata.h	/^ ADD_CAFFEINE, ADD_ALCOHOL, ADD_SLEEP, ADD_PKILLER, ADD_SPEED, ADD_CIG,$/;"	e	enum:add_type
AEA_ACIDBALL	artifact.h	/^ AEA_ACIDBALL, \/\/ Targeted acid$/;"	e	enum:art_effect_active
AEA_ADRENALINE	artifact.h	/^ AEA_ADRENALINE, \/\/ Adrenaline rush$/;"	e	enum:art_effect_active
AEA_ATTENTION	artifact.h	/^ AEA_ATTENTION, \/\/ Attention from sub-prime denizens$/;"	e	enum:art_effect_active
AEA_BLOOD	artifact.h	/^ AEA_BLOOD, \/\/ Shoots blood all over$/;"	e	enum:art_effect_active
AEA_BUGS	artifact.h	/^ AEA_BUGS, \/\/ Chance to summon friendly insects$/;"	e	enum:art_effect_active
AEA_CONFUSED	artifact.h	/^ AEA_CONFUSED, \/\/ Confuses all monsters in view$/;"	e	enum:art_effect_active
AEA_DIM	artifact.h	/^ AEA_DIM, \/\/ Darkens the sky slowly$/;"	e	enum:art_effect_active
AEA_ENTRANCE	artifact.h	/^ AEA_ENTRANCE, \/\/ Chance to make nearby monsters friendly$/;"	e	enum:art_effect_active
AEA_FATIGUE	artifact.h	/^ AEA_FATIGUE, \/\/ Creates interdimensional fatigue$/;"	e	enum:art_effect_active
AEA_FIREBALL	artifact.h	/^ AEA_FIREBALL, \/\/ Targeted$/;"	e	enum:art_effect_active
AEA_FIRESTORM	artifact.h	/^ AEA_FIRESTORM, \/\/ Spreads minor fire all around you$/;"	e	enum:art_effect_active
AEA_FLASH	artifact.h	/^ AEA_FLASH, \/\/ Flashbang$/;"	e	enum:art_effect_active
AEA_GROWTH	artifact.h	/^ AEA_GROWTH, \/\/ Grow plants, a la triffid queen$/;"	e	enum:art_effect_active
AEA_HEAL	artifact.h	/^ AEA_HEAL, \/\/ Heals minor damage$/;"	e	enum:art_effect_active
AEA_HURTALL	artifact.h	/^ AEA_HURTALL, \/\/ Hurts all monsters!$/;"	e	enum:art_effect_active
AEA_LIGHT	artifact.h	/^ AEA_LIGHT, \/\/ Temporary light source$/;"	e	enum:art_effect_active
AEA_MAP	artifact.h	/^ AEA_MAP, \/\/ Maps the area around you$/;"	e	enum:art_effect_active
AEA_MUTATE	artifact.h	/^ AEA_MUTATE, \/\/ Chance of mutation$/;"	e	enum:art_effect_active
AEA_NOISE	artifact.h	/^ AEA_NOISE, \/\/ Loud noise$/;"	e	enum:art_effect_active
AEA_NULL	artifact.h	/^ AEA_NULL = 0,$/;"	e	enum:art_effect_active
AEA_PAIN	artifact.h	/^ AEA_PAIN, \/\/ Increases player pain$/;"	e	enum:art_effect_active
AEA_PARALYZE	artifact.h	/^ AEA_PARALYZE, \/\/ You lose several turns$/;"	e	enum:art_effect_active
AEA_PULSE	artifact.h	/^ AEA_PULSE, \/\/ Destroys adjacent terrain$/;"	e	enum:art_effect_active
AEA_RADIATION	artifact.h	/^ AEA_RADIATION, \/\/ Spew radioactive gas$/;"	e	enum:art_effect_active
AEA_SCREAM	artifact.h	/^ AEA_SCREAM, \/\/ Noise & morale penalty$/;"	e	enum:art_effect_active
AEA_SHADOWS	artifact.h	/^ AEA_SHADOWS, \/\/ Summon shadow creatures$/;"	e	enum:art_effect_active
AEA_SPLIT	artifact.h	/^ AEA_SPLIT, \/\/ Split between good and bad$/;"	e	enum:art_effect_active
AEA_STORM	artifact.h	/^ AEA_STORM, \/\/ Emits shock fields$/;"	e	enum:art_effect_active
AEA_TELEGLOW	artifact.h	/^ AEA_TELEGLOW, \/\/ Teleglow disease$/;"	e	enum:art_effect_active
AEA_TELEPORT	artifact.h	/^ AEA_TELEPORT, \/\/ Teleports you$/;"	e	enum:art_effect_active
AEA_VOMIT	artifact.h	/^ AEA_VOMIT, \/\/ User vomits$/;"	e	enum:art_effect_active
AEP_ALL_DOWN	artifact.h	/^ AEP_ALL_DOWN, \/\/ All stats - 2$/;"	e	enum:art_effect_passive
AEP_ALL_UP	artifact.h	/^ AEP_ALL_UP, \/\/ All stats + 2$/;"	e	enum:art_effect_passive
AEP_ATTENTION	artifact.h	/^ AEP_ATTENTION, \/\/ Draws netherworld attention slowly$/;"	e	enum:art_effect_passive
AEP_BAD_WEATHER	artifact.h	/^ AEP_BAD_WEATHER, \/\/ More likely to experience bad weather$/;"	e	enum:art_effect_passive
AEP_CARRY_MORE	artifact.h	/^ AEP_CARRY_MORE, \/\/ Increases carrying capacity by 200$/;"	e	enum:art_effect_passive
AEP_CLAIRVOYANCE	artifact.h	/^ AEP_CLAIRVOYANCE, \/\/ See through walls$/;"	e	enum:art_effect_passive
AEP_DEX_DOWN	artifact.h	/^ AEP_DEX_DOWN, \/\/ Dex - 3$/;"	e	enum:art_effect_passive
AEP_DEX_UP	artifact.h	/^ AEP_DEX_UP, \/\/ Dexterity + 4$/;"	e	enum:art_effect_passive
AEP_EVIL	artifact.h	/^ AEP_EVIL, \/\/ Addiction to the power$/;"	e	enum:art_effect_passive
AEP_EXTINGUISH	artifact.h	/^ AEP_EXTINGUISH, \/\/ May extinguish nearby flames$/;"	e	enum:art_effect_passive
AEP_FORCE_TELEPORT	artifact.h	/^ AEP_FORCE_TELEPORT, \/\/ Occasionally force a teleport$/;"	e	enum:art_effect_passive
AEP_GLOW	artifact.h	/^ AEP_GLOW, \/\/ Four-tile light source$/;"	e	enum:art_effect_passive
AEP_HUNGER	artifact.h	/^ AEP_HUNGER, \/\/ Increases hunger$/;"	e	enum:art_effect_passive
AEP_INT_DOWN	artifact.h	/^ AEP_INT_DOWN, \/\/ Int - 3$/;"	e	enum:art_effect_passive
AEP_INT_UP	artifact.h	/^ AEP_INT_UP, \/\/ Intelligence + 4$/;"	e	enum:art_effect_passive
AEP_INVISIBLE	artifact.h	/^ AEP_INVISIBLE, \/\/ Makes you invisible$/;"	e	enum:art_effect_passive
AEP_IODINE	artifact.h	/^ AEP_IODINE, \/\/ Reduces radiation$/;"	e	enum:art_effect_passive
AEP_MOVEMENT_NOISE	artifact.h	/^ AEP_MOVEMENT_NOISE, \/\/ Makes noise when you move$/;"	e	enum:art_effect_passive
AEP_MUTAGENIC	artifact.h	/^ AEP_MUTAGENIC, \/\/ Mutates you slowly$/;"	e	enum:art_effect_passive
AEP_NULL	artifact.h	/^ AEP_NULL = 0,$/;"	e	enum:art_effect_passive
AEP_PER_DOWN	artifact.h	/^ AEP_PER_DOWN, \/\/ Per - 3$/;"	e	enum:art_effect_passive
AEP_PER_UP	artifact.h	/^ AEP_PER_UP, \/\/ Perception + 4$/;"	e	enum:art_effect_passive
AEP_PSYSHIELD	artifact.h	/^ AEP_PSYSHIELD, \/\/ Protection from stare attacks$/;"	e	enum:art_effect_passive
AEP_RADIOACTIVE	artifact.h	/^ AEP_RADIOACTIVE, \/\/ Increases your radiation$/;"	e	enum:art_effect_passive
AEP_RESIST_ELECTRICITY	artifact.h	/^ AEP_RESIST_ELECTRICITY, \/\/ Protection from electricity$/;"	e	enum:art_effect_passive
AEP_SAP_LIFE	artifact.h	/^ AEP_SAP_LIFE, \/\/ Killing non-zombie monsters may heal you$/;"	e	enum:art_effect_passive
AEP_SCHIZO	artifact.h	/^ AEP_SCHIZO, \/\/ Mimicks schizophrenia$/;"	e	enum:art_effect_passive
AEP_SICK	artifact.h	/^ AEP_SICK, \/\/ Decreases health$/;"	e	enum:art_effect_passive
AEP_SMOKE	artifact.h	/^ AEP_SMOKE, \/\/ Emits smoke occasionally$/;"	e	enum:art_effect_passive
AEP_SNAKES	artifact.h	/^ AEP_SNAKES, \/\/ Summons friendly snakes when you're hit$/;"	e	enum:art_effect_passive
AEP_SPEED_DOWN	artifact.h	/^ AEP_SPEED_DOWN, \/\/ -20 speed$/;"	e	enum:art_effect_passive
AEP_SPEED_UP	artifact.h	/^ AEP_SPEED_UP, \/\/ +20 speed$/;"	e	enum:art_effect_passive
AEP_SPLIT	artifact.h	/^ AEP_SPLIT,$/;"	e	enum:art_effect_passive
AEP_STEALTH	artifact.h	/^ AEP_STEALTH, \/\/ Your steps are quieted$/;"	e	enum:art_effect_passive
AEP_STR_DOWN	artifact.h	/^ AEP_STR_DOWN, \/\/ Strength - 3$/;"	e	enum:art_effect_passive
AEP_STR_UP	artifact.h	/^ AEP_STR_UP, \/\/ Strength + 4$/;"	e	enum:art_effect_passive
AEP_THIRST	artifact.h	/^ AEP_THIRST, \/\/ Increases thirst$/;"	e	enum:art_effect_passive
ALT_ATTACK_ITEMS	npcmove.cpp	/^itype_id ALT_ATTACK_ITEMS[NUM_ALT_ATTACK_ITEMS] = {$/;"	v
AMMO	itypedef.cpp	2073;"	d	file:
AMMO_EXPLOSIVE	itype.h	/^AMMO_EXPLOSIVE,		\/\/ Small explosion$/;"	e	enum:ammo_effect
AMMO_EXPLOSIVE_BIG	itype.h	/^AMMO_EXPLOSIVE_BIG,	\/\/ Big explosion!$/;"	e	enum:ammo_effect
AMMO_FLAME	itype.h	/^AMMO_FLAME,		\/\/ Sets fire to terrain and monsters$/;"	e	enum:ammo_effect
AMMO_FLASHBANG	itype.h	/^AMMO_FLASHBANG,		\/\/ Disorients and blinds$/;"	e	enum:ammo_effect
AMMO_FRAG	itype.h	/^AMMO_FRAG,		\/\/ Frag explosion$/;"	e	enum:ammo_effect
AMMO_INCENDIARY	itype.h	/^AMMO_INCENDIARY,	\/\/ Sparks explosive terrain$/;"	e	enum:ammo_effect
AMMO_NAPALM	itype.h	/^AMMO_NAPALM,		\/\/ Firey explosion$/;"	e	enum:ammo_effect
AMMO_SMOKE	itype.h	/^AMMO_SMOKE,  		\/\/ Smoke burst$/;"	e	enum:ammo_effect
AMMO_STREAM	itype.h	/^AMMO_STREAM,		\/\/ Doesn't stop once it hits a monster$/;"	e	enum:ammo_effect
AMMO_TEARGAS	itype.h	/^AMMO_TEARGAS,		\/\/ Teargas burst$/;"	e	enum:ammo_effect
AMMO_TRAIL	itype.h	/^AMMO_TRAIL,		\/\/ Leaves a trail of smoke$/;"	e	enum:ammo_effect
ANGER	mtypedef.cpp	34;"	d	file:
ARMOR	itypedef.cpp	1362;"	d	file:
ARMORMOD_BULKY	artifactdata.h	/^ ARMORMOD_BULKY,$/;"	e	enum:artifact_armor_mod
ARMORMOD_FURRED	artifactdata.h	/^ ARMORMOD_FURRED,$/;"	e	enum:artifact_armor_mod
ARMORMOD_LIGHT	artifactdata.h	/^ ARMORMOD_LIGHT,$/;"	e	enum:artifact_armor_mod
ARMORMOD_NULL	artifactdata.h	/^ ARMORMOD_NULL,$/;"	e	enum:artifact_armor_mod
ARMORMOD_PADDED	artifactdata.h	/^ ARMORMOD_PADDED,$/;"	e	enum:artifact_armor_mod
ARMORMOD_PLATED	artifactdata.h	/^ ARMORMOD_PLATED,$/;"	e	enum:artifact_armor_mod
ARMORMOD_POCKETED	artifactdata.h	/^ ARMORMOD_POCKETED,$/;"	e	enum:artifact_armor_mod
ARTARMFORM_BOOTS	artifactdata.h	/^ ARTARMFORM_BOOTS,$/;"	e	enum:artifact_armor_form
ARTARMFORM_COAT	artifactdata.h	/^ ARTARMFORM_COAT,$/;"	e	enum:artifact_armor_form
ARTARMFORM_GLOVES	artifactdata.h	/^ ARTARMFORM_GLOVES,$/;"	e	enum:artifact_armor_form
ARTARMFORM_HELM	artifactdata.h	/^ ARTARMFORM_HELM,$/;"	e	enum:artifact_armor_form
ARTARMFORM_MASK	artifactdata.h	/^ ARTARMFORM_MASK,$/;"	e	enum:artifact_armor_form
ARTARMFORM_NULL	artifactdata.h	/^ ARTARMFORM_NULL,$/;"	e	enum:artifact_armor_form
ARTARMFORM_RING	artifactdata.h	/^ ARTARMFORM_RING,$/;"	e	enum:artifact_armor_form
ARTARMFORM_ROBE	artifactdata.h	/^ ARTARMFORM_ROBE,$/;"	e	enum:artifact_armor_form
ARTC_HP	artifact.h	/^ ARTC_HP,    \/\/ Drains HP to recharge$/;"	e	enum:art_charge
ARTC_NULL	artifact.h	/^ ARTC_NULL,  \/\/ Never recharges!$/;"	e	enum:art_charge
ARTC_PAIN	artifact.h	/^ ARTC_PAIN,  \/\/ Creates pain to recharge$/;"	e	enum:art_charge
ARTC_SOLAR	artifact.h	/^ ARTC_SOLAR, \/\/ Recharges in sunlight$/;"	e	enum:art_charge
ARTC_TIME	artifact.h	/^ ARTC_TIME,  \/\/ Very slowly recharges with time$/;"	e	enum:art_charge
ARTPROP_BREATHING	artifact.h	/^ ARTPROP_BREATHING, \/\/$/;"	e	enum:artifact_natural_property
ARTPROP_CRACKLING	artifact.h	/^ ARTPROP_CRACKLING, \/\/$/;"	e	enum:artifact_natural_property
ARTPROP_DEAD	artifact.h	/^ ARTPROP_DEAD, \/\/$/;"	e	enum:artifact_natural_property
ARTPROP_ELECTRIC	artifact.h	/^ ARTPROP_ELECTRIC, \/\/$/;"	e	enum:artifact_natural_property
ARTPROP_ENGRAVED	artifact.h	/^ ARTPROP_ENGRAVED, \/\/$/;"	e	enum:artifact_natural_property
ARTPROP_FRACTAL	artifact.h	/^ ARTPROP_FRACTAL,$/;"	e	enum:artifact_natural_property
ARTPROP_GLITTERING	artifact.h	/^ ARTPROP_GLITTERING, \/\/$/;"	e	enum:artifact_natural_property
ARTPROP_GLOWING	artifact.h	/^ ARTPROP_GLOWING, \/\/$/;"	e	enum:artifact_natural_property
ARTPROP_HUMMING	artifact.h	/^ ARTPROP_HUMMING, \/\/$/;"	e	enum:artifact_natural_property
ARTPROP_ITCHY	artifact.h	/^ ARTPROP_ITCHY, \/\/$/;"	e	enum:artifact_natural_property
ARTPROP_MAX	artifact.h	/^ ARTPROP_MAX$/;"	e	enum:artifact_natural_property
ARTPROP_MOVING	artifact.h	/^ ARTPROP_MOVING, \/\/$/;"	e	enum:artifact_natural_property
ARTPROP_NULL	artifact.h	/^ ARTPROP_NULL,$/;"	e	enum:artifact_natural_property
ARTPROP_RATTLING	artifact.h	/^ ARTPROP_RATTLING, \/\/$/;"	e	enum:artifact_natural_property
ARTPROP_SCALED	artifact.h	/^ ARTPROP_SCALED,$/;"	e	enum:artifact_natural_property
ARTPROP_SLIMY	artifact.h	/^ ARTPROP_SLIMY, \/\/$/;"	e	enum:artifact_natural_property
ARTPROP_WARM	artifact.h	/^ ARTPROP_WARM, \/\/$/;"	e	enum:artifact_natural_property
ARTPROP_WHISPERING	artifact.h	/^ ARTPROP_WHISPERING, \/\/$/;"	e	enum:artifact_natural_property
ARTPROP_WRIGGLING	artifact.h	/^ ARTPROP_WRIGGLING, \/\/$/;"	e	enum:artifact_natural_property
ARTSHAPE_BEADS	artifact.h	/^ ARTSHAPE_BEADS,$/;"	e	enum:artifact_natural_shape
ARTSHAPE_CRESCENT	artifact.h	/^ ARTSHAPE_CRESCENT,$/;"	e	enum:artifact_natural_shape
ARTSHAPE_CRYSTAL	artifact.h	/^ ARTSHAPE_CRYSTAL,$/;"	e	enum:artifact_natural_shape
ARTSHAPE_DISC	artifact.h	/^ ARTSHAPE_DISC,$/;"	e	enum:artifact_natural_shape
ARTSHAPE_JELLY	artifact.h	/^ ARTSHAPE_JELLY,$/;"	e	enum:artifact_natural_shape
ARTSHAPE_KNOT	artifact.h	/^ ARTSHAPE_KNOT,$/;"	e	enum:artifact_natural_shape
ARTSHAPE_LAMP	artifact.h	/^ ARTSHAPE_LAMP,$/;"	e	enum:artifact_natural_shape
ARTSHAPE_MAX	artifact.h	/^ ARTSHAPE_MAX$/;"	e	enum:artifact_natural_shape
ARTSHAPE_NAPKIN	artifact.h	/^ ARTSHAPE_NAPKIN,$/;"	e	enum:artifact_natural_shape
ARTSHAPE_NULL	artifact.h	/^ ARTSHAPE_NULL,$/;"	e	enum:artifact_natural_shape
ARTSHAPE_PIN	artifact.h	/^ ARTSHAPE_PIN,$/;"	e	enum:artifact_natural_shape
ARTSHAPE_PYRAMID	artifact.h	/^ ARTSHAPE_PYRAMID,$/;"	e	enum:artifact_natural_shape
ARTSHAPE_ROD	artifact.h	/^ ARTSHAPE_ROD,$/;"	e	enum:artifact_natural_shape
ARTSHAPE_SNAKE	artifact.h	/^ ARTSHAPE_SNAKE,$/;"	e	enum:artifact_natural_shape
ARTSHAPE_SPHERE	artifact.h	/^ ARTSHAPE_SPHERE,$/;"	e	enum:artifact_natural_shape
ARTSHAPE_SPIRAL	artifact.h	/^ ARTSHAPE_SPIRAL,$/;"	e	enum:artifact_natural_shape
ARTSHAPE_TEARDROP	artifact.h	/^ ARTSHAPE_TEARDROP,$/;"	e	enum:artifact_natural_shape
ARTSHAPE_TUBE	artifact.h	/^ ARTSHAPE_TUBE,$/;"	e	enum:artifact_natural_shape
ARTSHAPE_URCHIN	artifact.h	/^ ARTSHAPE_URCHIN,$/;"	e	enum:artifact_natural_shape
ARTTOOLFORM_CUBE	artifactdata.h	/^ ARTTOOLFORM_CUBE,$/;"	e	enum:artifact_tool_form
ARTTOOLFORM_HARP	artifactdata.h	/^ ARTTOOLFORM_HARP,$/;"	e	enum:artifact_tool_form
ARTTOOLFORM_KNIFE	artifactdata.h	/^ ARTTOOLFORM_KNIFE,$/;"	e	enum:artifact_tool_form
ARTTOOLFORM_NULL	artifactdata.h	/^ ARTTOOLFORM_NULL,$/;"	e	enum:artifact_tool_form
ARTTOOLFORM_STAFF	artifactdata.h	/^ ARTTOOLFORM_STAFF,$/;"	e	enum:artifact_tool_form
ARTTOOLFORM_SWORD	artifactdata.h	/^ ARTTOOLFORM_SWORD,$/;"	e	enum:artifact_tool_form
ARTWEAP_BULK	artifactdata.h	/^ ARTWEAP_BULK,  \/\/ A bulky item that works okay for bashing$/;"	e	enum:artifact_weapon_type
ARTWEAP_CLUB	artifactdata.h	/^ ARTWEAP_CLUB,  \/\/ An item designed to bash$/;"	e	enum:artifact_weapon_type
ARTWEAP_KNIFE	artifactdata.h	/^ ARTWEAP_KNIFE, \/\/ Short, slash and stab$/;"	e	enum:artifact_weapon_type
ARTWEAP_NULL	artifactdata.h	/^ ARTWEAP_NULL,$/;"	e	enum:artifact_weapon_type
ARTWEAP_SPEAR	artifactdata.h	/^ ARTWEAP_SPEAR, \/\/ A stab-only weapon$/;"	e	enum:artifact_weapon_type
ARTWEAP_SWORD	artifactdata.h	/^ ARTWEAP_SWORD, \/\/ A long slasher$/;"	e	enum:artifact_weapon_type
ASL_CLOSED	map.cpp	/^ ASL_CLOSED$/;"	e	enum:astar_list	file:
ASL_NONE	map.cpp	/^ ASL_NONE,$/;"	e	enum:astar_list	file:
ASL_OPEN	map.cpp	/^ ASL_OPEN,$/;"	e	enum:astar_list	file:
AT_12MM	itype.h	/^AT_12MM,$/;"	e	enum:ammotype
AT_22	itype.h	/^AT_22, AT_9MM, AT_762x25, AT_38, AT_40, AT_44, AT_45,$/;"	e	enum:ammotype
AT_223	itype.h	/^AT_762, AT_223, AT_3006, AT_308,$/;"	e	enum:ammotype
AT_3006	itype.h	/^AT_762, AT_223, AT_3006, AT_308,$/;"	e	enum:ammotype
AT_308	itype.h	/^AT_762, AT_223, AT_3006, AT_308,$/;"	e	enum:ammotype
AT_38	itype.h	/^AT_22, AT_9MM, AT_762x25, AT_38, AT_40, AT_44, AT_45,$/;"	e	enum:ammotype
AT_40	itype.h	/^AT_22, AT_9MM, AT_762x25, AT_38, AT_40, AT_44, AT_45,$/;"	e	enum:ammotype
AT_40MM	itype.h	/^AT_40MM,$/;"	e	enum:ammotype
AT_44	itype.h	/^AT_22, AT_9MM, AT_762x25, AT_38, AT_40, AT_44, AT_45,$/;"	e	enum:ammotype
AT_45	itype.h	/^AT_22, AT_9MM, AT_762x25, AT_38, AT_40, AT_44, AT_45,$/;"	e	enum:ammotype
AT_46	itype.h	/^AT_57, AT_46,$/;"	e	enum:ammotype
AT_57	itype.h	/^AT_57, AT_46,$/;"	e	enum:ammotype
AT_762	itype.h	/^AT_762, AT_223, AT_3006, AT_308,$/;"	e	enum:ammotype
AT_762x25	itype.h	/^AT_22, AT_9MM, AT_762x25, AT_38, AT_40, AT_44, AT_45,$/;"	e	enum:ammotype
AT_9MM	itype.h	/^AT_22, AT_9MM, AT_762x25, AT_38, AT_40, AT_44, AT_45,$/;"	e	enum:ammotype
AT_ARROW	itype.h	/^AT_NAIL, AT_BB, AT_BOLT, AT_ARROW,$/;"	e	enum:ammotype
AT_BATT	itype.h	/^AT_BATT, AT_PLUT,$/;"	e	enum:ammotype
AT_BB	itype.h	/^AT_NAIL, AT_BB, AT_BOLT, AT_ARROW,$/;"	e	enum:ammotype
AT_BOLT	itype.h	/^AT_NAIL, AT_BB, AT_BOLT, AT_ARROW,$/;"	e	enum:ammotype
AT_FUSION	itype.h	/^AT_FUSION,$/;"	e	enum:ammotype
AT_GAS	itype.h	/^AT_GAS,$/;"	e	enum:ammotype
AT_MUSCLE	itype.h	/^AT_MUSCLE,$/;"	e	enum:ammotype
AT_NAIL	itype.h	/^AT_NAIL, AT_BB, AT_BOLT, AT_ARROW,$/;"	e	enum:ammotype
AT_NULL	itype.h	/^AT_NULL, AT_THREAD,$/;"	e	enum:ammotype
AT_PLASMA	itype.h	/^AT_PLASMA,$/;"	e	enum:ammotype
AT_PLUT	itype.h	/^AT_BATT, AT_PLUT,$/;"	e	enum:ammotype
AT_SHOT	itype.h	/^AT_SHOT,$/;"	e	enum:ammotype
AT_THREAD	itype.h	/^AT_NULL, AT_THREAD,$/;"	e	enum:ammotype
AT_WATER	itype.h	/^AT_WATER,$/;"	e	enum:ammotype
AUTUMN	weather.h	/^ AUTUMN = 2,$/;"	e	enum:season_type
A_ALTCHARSET	catacurse.h	75;"	d
A_ATTRIBUTES	catacurse.h	76;"	d
A_BLANK	catacurse.h	73;"	d
A_BLINK	catacurse.h	70;"	d
A_BOLD	catacurse.h	72;"	d
A_CHARTEXT	catacurse.h	77;"	d
A_COLOR	catacurse.h	78;"	d
A_DIM	catacurse.h	71;"	d
A_NORMAL	catacurse.h	66;"	d
A_PROTECT	catacurse.h	74;"	d
A_REVERSE	catacurse.h	69;"	d
A_STANDOUT	catacurse.h	67;"	d
A_UNDERLINE	catacurse.h	68;"	d
BATTERY_AMOUNT	bionics.cpp	10;"	d	file:
BG	catacurse.h	/^    int BG;\/\/foreground index in colors[]$/;"	m	struct:__anon1
BG	catacurse.h	/^  int BG;\/\/current background color from attron$/;"	m	struct:__anon3
BG	catacurse.h	/^char *BG;$/;"	m	struct:__anon2
BGR	catacurse.cpp	/^inline RGBQUAD BGR(int b, int g, int r)$/;"	f
BIGNESS_ENGINE_DISPLACEMENT	itype.h	/^BIGNESS_ENGINE_DISPLACEMENT, \/\/ combustion engine CC displacement$/;"	e	enum:bigness_property_aspect
BIGNESS_ENGINE_NULL	itype.h	/^BIGNESS_ENGINE_NULL,         \/\/ like a cookie-cutter-cut cookie, this type has no bigness aspect.$/;"	e	enum:bigness_property_aspect
BIGNESS_KILOWATTS	itype.h	/^BIGNESS_KILOWATTS,           \/\/ electric motor power$/;"	e	enum:bigness_property_aspect
BIGNESS_WHEEL_DIAMETER	itype.h	/^BIGNESS_WHEEL_DIAMETER,      \/\/ wheel size in inches, including tire$/;"	e	enum:bigness_property_aspect
BILLION	posix_time.h	/^enum { BILLION = 1000 * 1000 * 1000 };$/;"	e	enum:__anon8
BINDIST	Makefile	/^  BINDIST = $(W32BINDIST)$/;"	m
BINDIST	Makefile	/^BINDIST    = cataclysmdda-$(VERSION).tar.gz$/;"	m
BINDIST_CMD	Makefile	/^  BINDIST_CMD = $(W32BINDIST_CMD)$/;"	m
BINDIST_CMD	Makefile	/^BINDIST_CMD    = tar -czvf $(BINDIST) $(BINDIST_DIR)$/;"	m
BINDIST_DIR	Makefile	/^BINDIST_DIR = bindist$/;"	m
BINDIST_EXTRAS	Makefile	/^BINDIST_EXTRAS = README data cataclysm-launcher$/;"	m
BIO	itypedef.cpp	4365;"	d	file:
BIO_SINGLE	itypedef.cpp	4369;"	d	file:
BLINK_SPEED	game.h	45;"	d
BODYTEMP_COLD	weather.h	6;"	d
BODYTEMP_FREEZING	weather.h	4;"	d
BODYTEMP_HOT	weather.h	8;"	d
BODYTEMP_NORM	weather.h	7;"	d
BODYTEMP_SCORCHING	weather.h	10;"	d
BODYTEMP_VERY_COLD	weather.h	5;"	d
BODYTEMP_VERY_HOT	weather.h	9;"	d
BOOK	itypedef.cpp	2622;"	d	file:
BULLET_SPEED	game.h	46;"	d
CAMPCHECK	map.h	24;"	d
CAMPSIZE	map.h	23;"	d
CANCELS	mutation_data.cpp	9;"	d	file:
CARAVAN_CART	gamemode.h	/^CARAVAN_CART = 0,$/;"	e	enum:caravan_category
CARAVAN_CLOTHES	gamemode.h	/^CARAVAN_CLOTHES,$/;"	e	enum:caravan_category
CARAVAN_COMPONENTS	gamemode.h	/^CARAVAN_COMPONENTS,$/;"	e	enum:caravan_category
CARAVAN_FOOD	gamemode.h	/^CARAVAN_FOOD,$/;"	e	enum:caravan_category
CARAVAN_GUNS	gamemode.h	/^CARAVAN_GUNS,$/;"	e	enum:caravan_category
CARAVAN_MELEE	gamemode.h	/^CARAVAN_MELEE,$/;"	e	enum:caravan_category
CARAVAN_TOOLS	gamemode.h	/^CARAVAN_TOOLS,$/;"	e	enum:caravan_category
CATEGORIES	inventory_ui.cpp	/^std::string CATEGORIES[iCategorieNum] =$/;"	v
CATEGORIES	mtypedef.cpp	33;"	d	file:
CC_AMMO	crafting.h	/^CC_AMMO,$/;"	e	enum:craft_cat
CC_ARMOR	crafting.h	/^CC_ARMOR,$/;"	e	enum:craft_cat
CC_CHEM	crafting.h	/^CC_CHEM,$/;"	e	enum:craft_cat
CC_DRINK	crafting.h	/^CC_DRINK,$/;"	e	enum:craft_cat
CC_ELECTRONIC	crafting.h	/^CC_ELECTRONIC,$/;"	e	enum:craft_cat
CC_FOOD	crafting.h	/^CC_FOOD,$/;"	e	enum:craft_cat
CC_MISC	crafting.h	/^CC_MISC,$/;"	e	enum:craft_cat
CC_NONCRAFT	crafting.h	/^CC_NONCRAFT,$/;"	e	enum:craft_cat
CC_NULL	crafting.h	/^CC_NULL = 0,$/;"	e	enum:craft_cat
CC_WEAPON	crafting.h	/^CC_WEAPON,$/;"	e	enum:craft_cat
CHANGES_TO	mutation_data.cpp	12;"	d	file:
COLOR_BLACK	catacurse.h	80;"	d
COLOR_BLUE	catacurse.h	84;"	d
COLOR_CYAN	catacurse.h	86;"	d
COLOR_GREEN	catacurse.h	82;"	d
COLOR_MAGENTA	catacurse.h	85;"	d
COLOR_PAIR	catacurse.h	89;"	d
COLOR_RED	catacurse.h	81;"	d
COLOR_WHITE	catacurse.h	87;"	d
COLOR_YELLOW	catacurse.h	83;"	d
COL_SKILL_USED	newcharacter.cpp	32;"	d	file:
COL_STAT_ACT	newcharacter.cpp	25;"	d	file:
COL_TR_BAD	newcharacter.cpp	29;"	d	file:
COL_TR_BAD_OFF	newcharacter.cpp	30;"	d	file:
COL_TR_BAD_ON	newcharacter.cpp	31;"	d	file:
COL_TR_GOOD	newcharacter.cpp	26;"	d	file:
COL_TR_GOOD_OFF	newcharacter.cpp	27;"	d	file:
COL_TR_GOOD_ON	newcharacter.cpp	28;"	d	file:
COMP	construction.cpp	29;"	d	file:
COMP	crafting.cpp	24;"	d	file:
COMPACT_AMIGARA_LOG	computer.h	/^ COMPACT_AMIGARA_LOG,$/;"	e	enum:computer_action
COMPACT_AMIGARA_START	computer.h	/^ COMPACT_AMIGARA_START,$/;"	e	enum:computer_action
COMPACT_BLOOD_ANAL	computer.h	/^ COMPACT_BLOOD_ANAL,$/;"	e	enum:computer_action
COMPACT_CASCADE	computer.h	/^ COMPACT_CASCADE,$/;"	e	enum:computer_action
COMPACT_DOWNLOAD_SOFTWARE	computer.h	/^ COMPACT_DOWNLOAD_SOFTWARE,$/;"	e	enum:computer_action
COMPACT_ELEVATOR_ON	computer.h	/^ COMPACT_ELEVATOR_ON,$/;"	e	enum:computer_action
COMPACT_EMERG_MESS	computer.h	/^ COMPACT_EMERG_MESS,$/;"	e	enum:computer_action
COMPACT_LIST_BIONICS	computer.h	/^ COMPACT_LIST_BIONICS,$/;"	e	enum:computer_action
COMPACT_MAPS	computer.h	/^ COMPACT_MAPS,$/;"	e	enum:computer_action
COMPACT_MAP_SEWER	computer.h	/^ COMPACT_MAP_SEWER,$/;"	e	enum:computer_action
COMPACT_MISS_DISARM	computer.h	/^ COMPACT_MISS_DISARM,$/;"	e	enum:computer_action
COMPACT_MISS_LAUNCH	computer.h	/^ COMPACT_MISS_LAUNCH,$/;"	e	enum:computer_action
COMPACT_NULL	computer.h	/^ COMPACT_NULL = 0,$/;"	e	enum:computer_action
COMPACT_OPEN	computer.h	/^ COMPACT_OPEN,$/;"	e	enum:computer_action
COMPACT_PORTAL	computer.h	/^ COMPACT_PORTAL,$/;"	e	enum:computer_action
COMPACT_RELEASE	computer.h	/^ COMPACT_RELEASE,$/;"	e	enum:computer_action
COMPACT_RESEARCH	computer.h	/^ COMPACT_RESEARCH,$/;"	e	enum:computer_action
COMPACT_SAMPLE	computer.h	/^ COMPACT_SAMPLE,$/;"	e	enum:computer_action
COMPACT_STEMCELL_TREATMENT	computer.h	/^ COMPACT_STEMCELL_TREATMENT,$/;"	e	enum:computer_action
COMPACT_TERMINATE	computer.h	/^ COMPACT_TERMINATE,$/;"	e	enum:computer_action
COMPCONT	construction.cpp	30;"	d	file:
COMPCONT	crafting.cpp	25;"	d	file:
COMPFAIL_ALARM	computer.h	/^ COMPFAIL_ALARM,$/;"	e	enum:computer_failure
COMPFAIL_AMIGARA	computer.h	/^ COMPFAIL_AMIGARA,$/;"	e	enum:computer_failure
COMPFAIL_DAMAGE	computer.h	/^ COMPFAIL_DAMAGE,$/;"	e	enum:computer_failure
COMPFAIL_DESTROY_BLOOD	computer.h	/^ COMPFAIL_DESTROY_BLOOD,$/;"	e	enum:computer_failure
COMPFAIL_MANHACKS	computer.h	/^ COMPFAIL_MANHACKS,$/;"	e	enum:computer_failure
COMPFAIL_NULL	computer.h	/^ COMPFAIL_NULL = 0,$/;"	e	enum:computer_failure
COMPFAIL_PUMP_EXPLODE	computer.h	/^ COMPFAIL_PUMP_EXPLODE,$/;"	e	enum:computer_failure
COMPFAIL_PUMP_LEAK	computer.h	/^ COMPFAIL_PUMP_LEAK,$/;"	e	enum:computer_failure
COMPFAIL_SECUBOTS	computer.h	/^ COMPFAIL_SECUBOTS,$/;"	e	enum:computer_failure
COMPFAIL_SHUTDOWN	computer.h	/^ COMPFAIL_SHUTDOWN,$/;"	e	enum:computer_failure
CONSTRUCT	construction.cpp	20;"	d	file:
CONT	itypedef.cpp	2639;"	d	file:
COTTON	enums.h	/^COTTON, WOOL, LEATHER, KEVLAR, FUR,$/;"	e	enum:material
CTRL	keypress.h	17;"	d
CXX	Makefile	/^CXX = $(CROSS)g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = $(WARNINGS) $(DEBUG) $(PROFILE) $(OTHERS) -MMD$/;"	m
C_ARMS	itypedef.cpp	11;"	d	file:
C_BODY	itypedef.cpp	9;"	d	file:
C_DECOR	itypedef.cpp	17;"	d	file:
C_EYES	itypedef.cpp	14;"	d	file:
C_GLOVES	itypedef.cpp	12;"	d	file:
C_HAT	itypedef.cpp	15;"	d	file:
C_MOUTH	itypedef.cpp	13;"	d	file:
C_PANTS	itypedef.cpp	8;"	d	file:
C_SHOES	itypedef.cpp	7;"	d	file:
C_STORE	itypedef.cpp	16;"	d	file:
C_TORSO	itypedef.cpp	10;"	d	file:
Cancel	input.h	/^	Cancel,$/;"	e	enum:InputEvent
CheckMessages	catacurse.cpp	/^void CheckMessages()$/;"	f
Close	input.h	/^	Close,$/;"	e	enum:InputEvent
Confirm	input.h	/^	Confirm,$/;"	e	enum:InputEvent
DAYLIGHT_LEVEL	calendar.h	29;"	d
DAYS	calendar.h	12;"	d
DAYS_IN_SEASON	calendar.h	7;"	d
DC_ALL	debug.h	/^ DC_ALL    = (1<<6)-1$/;"	e	enum:DebugClass
DDIR	Makefile	/^DDIR = .deps$/;"	m
DEADLINE	missiondef.cpp	16;"	d	file:
DEBUG	Makefile	/^  DEBUG =$/;"	m
DEBUG	Makefile	/^DEBUG = -g$/;"	m
DEBUG_H_1YCYLZSS	debug.h	2;"	d
DEFAULT_COMPUTER_NAME	computer.h	9;"	d
DEFENSE_CUSTOM	gamemode.h	/^DEFENSE_CUSTOM = 0,$/;"	e	enum:defense_style
DEFENSE_DAWN	gamemode.h	/^DEFENSE_DAWN,$/;"	e	enum:defense_style
DEFENSE_EASY	gamemode.h	/^DEFENSE_EASY,$/;"	e	enum:defense_style
DEFENSE_HARD	gamemode.h	/^DEFENSE_HARD,$/;"	e	enum:defense_style
DEFENSE_LOVECRAFT	gamemode.h	/^DEFENSE_LOVECRAFT,$/;"	e	enum:defense_style
DEFENSE_MEDIUM	gamemode.h	/^DEFENSE_MEDIUM,$/;"	e	enum:defense_style
DEFENSE_SHAUN	gamemode.h	/^DEFENSE_SHAUN,$/;"	e	enum:defense_style
DEFENSE_SKYNET	gamemode.h	/^DEFENSE_SKYNET,$/;"	e	enum:defense_style
DEFENSE_SPIDERS	gamemode.h	/^DEFENSE_SPIDERS,$/;"	e	enum:defense_style
DEFENSE_TRIFFIDS	gamemode.h	/^DEFENSE_TRIFFIDS,$/;"	e	enum:defense_style
DEFLOC_BAR	gamemode.h	/^DEFLOC_BAR,$/;"	e	enum:defense_location
DEFLOC_HOSPITAL	gamemode.h	/^DEFLOC_HOSPITAL,$/;"	e	enum:defense_location
DEFLOC_MALL	gamemode.h	/^DEFLOC_MALL,$/;"	e	enum:defense_location
DEFLOC_MANSION	gamemode.h	/^DEFLOC_MANSION,$/;"	e	enum:defense_location
DEFLOC_NULL	gamemode.h	/^DEFLOC_NULL = 0,$/;"	e	enum:defense_location
DEINIT	picojson.h	154;"	d
DEINIT	picojson.h	158;"	d
DI_ADRENALINE	pldata.h	/^  DI_TOOK_FLUMED, DI_ADRENALINE, DI_ASTHMA, DI_GRACK, DI_METH,$/;"	e	enum:dis_type
DI_AMIGARA	pldata.h	/^ DI_AMIGARA, DI_STEMCELL_TREATMENT, DI_TELEGLOW, DI_ATTENTION, DI_EVIL, DI_INFECTED,$/;"	e	enum:dis_type
DI_ARMOR_BOOST	pldata.h	/^ DI_ATTACK_BOOST, DI_DAMAGE_BOOST, DI_DODGE_BOOST, DI_ARMOR_BOOST,$/;"	e	enum:dis_type
DI_ASKED_FOR_ITEM	pldata.h	/^ DI_ASKED_TO_FOLLOW, DI_ASKED_TO_LEAD, DI_ASKED_FOR_ITEM,$/;"	e	enum:dis_type
DI_ASKED_TO_FOLLOW	pldata.h	/^ DI_ASKED_TO_FOLLOW, DI_ASKED_TO_LEAD, DI_ASKED_FOR_ITEM,$/;"	e	enum:dis_type
DI_ASKED_TO_LEAD	pldata.h	/^ DI_ASKED_TO_FOLLOW, DI_ASKED_TO_LEAD, DI_ASKED_FOR_ITEM,$/;"	e	enum:dis_type
DI_ASTHMA	pldata.h	/^  DI_TOOK_FLUMED, DI_ADRENALINE, DI_ASTHMA, DI_GRACK, DI_METH,$/;"	e	enum:dis_type
DI_ATTACK_BOOST	pldata.h	/^ DI_ATTACK_BOOST, DI_DAMAGE_BOOST, DI_DODGE_BOOST, DI_ARMOR_BOOST,$/;"	e	enum:dis_type
DI_ATTENTION	pldata.h	/^ DI_AMIGARA, DI_STEMCELL_TREATMENT, DI_TELEGLOW, DI_ATTENTION, DI_EVIL, DI_INFECTED,$/;"	e	enum:dis_type
DI_BADPOISON	pldata.h	/^ DI_POISON, DI_BLEED, DI_BADPOISON, DI_FOODPOISON, DI_SHAKES,$/;"	e	enum:dis_type
DI_BEARTRAP	pldata.h	/^ DI_BEARTRAP, DI_LIGHTSNARE, DI_HEAVYSNARE, DI_IN_PIT, DI_STUNNED, DI_DOWNED,$/;"	e	enum:dis_type
DI_BITE	pldata.h	/^ DI_RAT, DI_BITE,$/;"	e	enum:dis_type
DI_BLEED	pldata.h	/^ DI_POISON, DI_BLEED, DI_BADPOISON, DI_FOODPOISON, DI_SHAKES,$/;"	e	enum:dis_type
DI_BLIND	pldata.h	/^ DI_DEAF, DI_BLIND,$/;"	e	enum:dis_type
DI_BLISTERS	pldata.h	/^ DI_BLISTERS,$/;"	e	enum:dis_type
DI_BLISTERS_ARMS	pldata.h	/^ DI_BLISTERS_ARMS, DI_BLISTERS_HANDS, DI_BLISTERS_LEGS, DI_BLISTERS_FEET,$/;"	e	enum:dis_type
DI_BLISTERS_EYES	pldata.h	/^ DI_BLISTERS_TORSO, DI_BLISTERS_HEAD, DI_BLISTERS_EYES, DI_BLISTERS_MOUTH,$/;"	e	enum:dis_type
DI_BLISTERS_FEET	pldata.h	/^ DI_BLISTERS_ARMS, DI_BLISTERS_HANDS, DI_BLISTERS_LEGS, DI_BLISTERS_FEET,$/;"	e	enum:dis_type
DI_BLISTERS_HANDS	pldata.h	/^ DI_BLISTERS_ARMS, DI_BLISTERS_HANDS, DI_BLISTERS_LEGS, DI_BLISTERS_FEET,$/;"	e	enum:dis_type
DI_BLISTERS_HEAD	pldata.h	/^ DI_BLISTERS_TORSO, DI_BLISTERS_HEAD, DI_BLISTERS_EYES, DI_BLISTERS_MOUTH,$/;"	e	enum:dis_type
DI_BLISTERS_LEGS	pldata.h	/^ DI_BLISTERS_ARMS, DI_BLISTERS_HANDS, DI_BLISTERS_LEGS, DI_BLISTERS_FEET,$/;"	e	enum:dis_type
DI_BLISTERS_MOUTH	pldata.h	/^ DI_BLISTERS_TORSO, DI_BLISTERS_HEAD, DI_BLISTERS_EYES, DI_BLISTERS_MOUTH,$/;"	e	enum:dis_type
DI_BLISTERS_TORSO	pldata.h	/^ DI_BLISTERS_TORSO, DI_BLISTERS_HEAD, DI_BLISTERS_EYES, DI_BLISTERS_MOUTH,$/;"	e	enum:dis_type
DI_BOOMERED	pldata.h	/^ DI_BOOMERED, DI_SAP, DI_SPORES, DI_FUNGUS, DI_SLIMED,$/;"	e	enum:dis_type
DI_CATCH_UP	pldata.h	/^ DI_CATCH_UP$/;"	e	enum:dis_type
DI_CIG	pldata.h	/^ DI_PKILL1, DI_PKILL2, DI_PKILL3, DI_PKILL_L, DI_DRUNK, DI_CIG, DI_HIGH,$/;"	e	enum:dis_type
DI_COLD	pldata.h	/^ DI_COLD,$/;"	e	enum:dis_type
DI_COLD_ARMS	pldata.h	/^ DI_COLD_ARMS, DI_COLD_HANDS, DI_COLD_LEGS, DI_COLD_FEET,$/;"	e	enum:dis_type
DI_COLD_EYES	pldata.h	/^ DI_COLD_TORSO, DI_COLD_HEAD, DI_COLD_EYES, DI_COLD_MOUTH,$/;"	e	enum:dis_type
DI_COLD_FEET	pldata.h	/^ DI_COLD_ARMS, DI_COLD_HANDS, DI_COLD_LEGS, DI_COLD_FEET,$/;"	e	enum:dis_type
DI_COLD_HANDS	pldata.h	/^ DI_COLD_ARMS, DI_COLD_HANDS, DI_COLD_LEGS, DI_COLD_FEET,$/;"	e	enum:dis_type
DI_COLD_HEAD	pldata.h	/^ DI_COLD_TORSO, DI_COLD_HEAD, DI_COLD_EYES, DI_COLD_MOUTH,$/;"	e	enum:dis_type
DI_COLD_LEGS	pldata.h	/^ DI_COLD_ARMS, DI_COLD_HANDS, DI_COLD_LEGS, DI_COLD_FEET,$/;"	e	enum:dis_type
DI_COLD_MOUTH	pldata.h	/^ DI_COLD_TORSO, DI_COLD_HEAD, DI_COLD_EYES, DI_COLD_MOUTH,$/;"	e	enum:dis_type
DI_COLD_TORSO	pldata.h	/^ DI_COLD_TORSO, DI_COLD_HEAD, DI_COLD_EYES, DI_COLD_MOUTH,$/;"	e	enum:dis_type
DI_COMMON_COLD	pldata.h	/^ DI_COMMON_COLD, DI_FLU, DI_RECOVER,$/;"	e	enum:dis_type
DI_DAMAGE_BOOST	pldata.h	/^ DI_ATTACK_BOOST, DI_DAMAGE_BOOST, DI_DODGE_BOOST, DI_ARMOR_BOOST,$/;"	e	enum:dis_type
DI_DEAF	pldata.h	/^ DI_DEAF, DI_BLIND,$/;"	e	enum:dis_type
DI_DERMATIK	pldata.h	/^ DI_DERMATIK, DI_FORMICATION,$/;"	e	enum:dis_type
DI_DODGE_BOOST	pldata.h	/^ DI_ATTACK_BOOST, DI_DAMAGE_BOOST, DI_DODGE_BOOST, DI_ARMOR_BOOST,$/;"	e	enum:dis_type
DI_DOWNED	pldata.h	/^ DI_BEARTRAP, DI_LIGHTSNARE, DI_HEAVYSNARE, DI_IN_PIT, DI_STUNNED, DI_DOWNED,$/;"	e	enum:dis_type
DI_DRUNK	pldata.h	/^ DI_PKILL1, DI_PKILL2, DI_PKILL3, DI_PKILL_L, DI_DRUNK, DI_CIG, DI_HIGH,$/;"	e	enum:dis_type
DI_EVIL	pldata.h	/^ DI_AMIGARA, DI_STEMCELL_TREATMENT, DI_TELEGLOW, DI_ATTENTION, DI_EVIL, DI_INFECTED,$/;"	e	enum:dis_type
DI_FLU	pldata.h	/^ DI_COMMON_COLD, DI_FLU, DI_RECOVER,$/;"	e	enum:dis_type
DI_FOODPOISON	pldata.h	/^ DI_POISON, DI_BLEED, DI_BADPOISON, DI_FOODPOISON, DI_SHAKES,$/;"	e	enum:dis_type
DI_FORMICATION	pldata.h	/^ DI_DERMATIK, DI_FORMICATION,$/;"	e	enum:dis_type
DI_FROSTBITE	pldata.h	/^ DI_FROSTBITE,$/;"	e	enum:dis_type
DI_FROSTBITE_ARMS	pldata.h	/^ DI_FROSTBITE_ARMS, DI_FROSTBITE_HANDS, DI_FROSTBITE_LEGS, DI_FROSTBITE_FEET,$/;"	e	enum:dis_type
DI_FROSTBITE_EYES	pldata.h	/^ DI_FROSTBITE_TORSO, DI_FROSTBITE_HEAD, DI_FROSTBITE_EYES, DI_FROSTBITE_MOUTH,$/;"	e	enum:dis_type
DI_FROSTBITE_FEET	pldata.h	/^ DI_FROSTBITE_ARMS, DI_FROSTBITE_HANDS, DI_FROSTBITE_LEGS, DI_FROSTBITE_FEET,$/;"	e	enum:dis_type
DI_FROSTBITE_HANDS	pldata.h	/^ DI_FROSTBITE_ARMS, DI_FROSTBITE_HANDS, DI_FROSTBITE_LEGS, DI_FROSTBITE_FEET,$/;"	e	enum:dis_type
DI_FROSTBITE_HEAD	pldata.h	/^ DI_FROSTBITE_TORSO, DI_FROSTBITE_HEAD, DI_FROSTBITE_EYES, DI_FROSTBITE_MOUTH,$/;"	e	enum:dis_type
DI_FROSTBITE_LEGS	pldata.h	/^ DI_FROSTBITE_ARMS, DI_FROSTBITE_HANDS, DI_FROSTBITE_LEGS, DI_FROSTBITE_FEET,$/;"	e	enum:dis_type
DI_FROSTBITE_MOUTH	pldata.h	/^ DI_FROSTBITE_TORSO, DI_FROSTBITE_HEAD, DI_FROSTBITE_EYES, DI_FROSTBITE_MOUTH,$/;"	e	enum:dis_type
DI_FROSTBITE_TORSO	pldata.h	/^ DI_FROSTBITE_TORSO, DI_FROSTBITE_HEAD, DI_FROSTBITE_EYES, DI_FROSTBITE_MOUTH,$/;"	e	enum:dis_type
DI_FUNGUS	pldata.h	/^ DI_BOOMERED, DI_SAP, DI_SPORES, DI_FUNGUS, DI_SLIMED,$/;"	e	enum:dis_type
DI_GLARE	pldata.h	/^ DI_GLARE, DI_WET,$/;"	e	enum:dis_type
DI_GRACK	pldata.h	/^  DI_TOOK_FLUMED, DI_ADRENALINE, DI_ASTHMA, DI_GRACK, DI_METH,$/;"	e	enum:dis_type
DI_HALLU	pldata.h	/^  DI_HALLU, DI_VISUALS, DI_IODINE, DI_TOOK_XANAX, DI_TOOK_PROZAC,$/;"	e	enum:dis_type
DI_HEAVYSNARE	pldata.h	/^ DI_BEARTRAP, DI_LIGHTSNARE, DI_HEAVYSNARE, DI_IN_PIT, DI_STUNNED, DI_DOWNED,$/;"	e	enum:dis_type
DI_HIGH	pldata.h	/^ DI_PKILL1, DI_PKILL2, DI_PKILL3, DI_PKILL_L, DI_DRUNK, DI_CIG, DI_HIGH,$/;"	e	enum:dis_type
DI_HOT	pldata.h	/^ DI_HOT,$/;"	e	enum:dis_type
DI_HOT_ARMS	pldata.h	/^ DI_HOT_ARMS, DI_HOT_HANDS, DI_HOT_LEGS, DI_HOT_FEET,$/;"	e	enum:dis_type
DI_HOT_EYES	pldata.h	/^ DI_HOT_TORSO, DI_HOT_HEAD, DI_HOT_EYES, DI_HOT_MOUTH,$/;"	e	enum:dis_type
DI_HOT_FEET	pldata.h	/^ DI_HOT_ARMS, DI_HOT_HANDS, DI_HOT_LEGS, DI_HOT_FEET,$/;"	e	enum:dis_type
DI_HOT_HANDS	pldata.h	/^ DI_HOT_ARMS, DI_HOT_HANDS, DI_HOT_LEGS, DI_HOT_FEET,$/;"	e	enum:dis_type
DI_HOT_HEAD	pldata.h	/^ DI_HOT_TORSO, DI_HOT_HEAD, DI_HOT_EYES, DI_HOT_MOUTH,$/;"	e	enum:dis_type
DI_HOT_LEGS	pldata.h	/^ DI_HOT_ARMS, DI_HOT_HANDS, DI_HOT_LEGS, DI_HOT_FEET,$/;"	e	enum:dis_type
DI_HOT_MOUTH	pldata.h	/^ DI_HOT_TORSO, DI_HOT_HEAD, DI_HOT_EYES, DI_HOT_MOUTH,$/;"	e	enum:dis_type
DI_HOT_TORSO	pldata.h	/^ DI_HOT_TORSO, DI_HOT_HEAD, DI_HOT_EYES, DI_HOT_MOUTH,$/;"	e	enum:dis_type
DI_INFECTED	pldata.h	/^ DI_AMIGARA, DI_STEMCELL_TREATMENT, DI_TELEGLOW, DI_ATTENTION, DI_EVIL, DI_INFECTED,$/;"	e	enum:dis_type
DI_INFECTION	pldata.h	/^ DI_INFECTION,$/;"	e	enum:dis_type
DI_IN_PIT	pldata.h	/^ DI_BEARTRAP, DI_LIGHTSNARE, DI_HEAVYSNARE, DI_IN_PIT, DI_STUNNED, DI_DOWNED,$/;"	e	enum:dis_type
DI_IODINE	pldata.h	/^  DI_HALLU, DI_VISUALS, DI_IODINE, DI_TOOK_XANAX, DI_TOOK_PROZAC,$/;"	e	enum:dis_type
DI_LIGHTSNARE	pldata.h	/^ DI_BEARTRAP, DI_LIGHTSNARE, DI_HEAVYSNARE, DI_IN_PIT, DI_STUNNED, DI_DOWNED,$/;"	e	enum:dis_type
DI_LYING_DOWN	pldata.h	/^ DI_LYING_DOWN, DI_SLEEP,$/;"	e	enum:dis_type
DI_METH	pldata.h	/^  DI_TOOK_FLUMED, DI_ADRENALINE, DI_ASTHMA, DI_GRACK, DI_METH,$/;"	e	enum:dis_type
DI_NULL	pldata.h	/^ DI_NULL,$/;"	e	enum:dis_type
DI_ONFIRE	pldata.h	/^ DI_SMOKE, DI_ONFIRE, DI_TEARGAS,$/;"	e	enum:dis_type
DI_PKILL1	pldata.h	/^ DI_PKILL1, DI_PKILL2, DI_PKILL3, DI_PKILL_L, DI_DRUNK, DI_CIG, DI_HIGH,$/;"	e	enum:dis_type
DI_PKILL2	pldata.h	/^ DI_PKILL1, DI_PKILL2, DI_PKILL3, DI_PKILL_L, DI_DRUNK, DI_CIG, DI_HIGH,$/;"	e	enum:dis_type
DI_PKILL3	pldata.h	/^ DI_PKILL1, DI_PKILL2, DI_PKILL3, DI_PKILL_L, DI_DRUNK, DI_CIG, DI_HIGH,$/;"	e	enum:dis_type
DI_PKILL_L	pldata.h	/^ DI_PKILL1, DI_PKILL2, DI_PKILL3, DI_PKILL_L, DI_DRUNK, DI_CIG, DI_HIGH,$/;"	e	enum:dis_type
DI_POISON	pldata.h	/^ DI_POISON, DI_BLEED, DI_BADPOISON, DI_FOODPOISON, DI_SHAKES,$/;"	e	enum:dis_type
DI_RAT	pldata.h	/^ DI_RAT, DI_BITE,$/;"	e	enum:dis_type
DI_RECOVER	pldata.h	/^ DI_COMMON_COLD, DI_FLU, DI_RECOVER,$/;"	e	enum:dis_type
DI_SAP	pldata.h	/^ DI_BOOMERED, DI_SAP, DI_SPORES, DI_FUNGUS, DI_SLIMED,$/;"	e	enum:dis_type
DI_SHAKES	pldata.h	/^ DI_POISON, DI_BLEED, DI_BADPOISON, DI_FOODPOISON, DI_SHAKES,$/;"	e	enum:dis_type
DI_SLEEP	pldata.h	/^ DI_LYING_DOWN, DI_SLEEP,$/;"	e	enum:dis_type
DI_SLIMED	pldata.h	/^ DI_BOOMERED, DI_SAP, DI_SPORES, DI_FUNGUS, DI_SLIMED,$/;"	e	enum:dis_type
DI_SMOKE	pldata.h	/^ DI_SMOKE, DI_ONFIRE, DI_TEARGAS,$/;"	e	enum:dis_type
DI_SPEED_BOOST	pldata.h	/^  DI_SPEED_BOOST, DI_VIPER_COMBO,$/;"	e	enum:dis_type
DI_SPORES	pldata.h	/^ DI_BOOMERED, DI_SAP, DI_SPORES, DI_FUNGUS, DI_SLIMED,$/;"	e	enum:dis_type
DI_STEMCELL_TREATMENT	pldata.h	/^ DI_AMIGARA, DI_STEMCELL_TREATMENT, DI_TELEGLOW, DI_ATTENTION, DI_EVIL, DI_INFECTED,$/;"	e	enum:dis_type
DI_STUNNED	pldata.h	/^ DI_BEARTRAP, DI_LIGHTSNARE, DI_HEAVYSNARE, DI_IN_PIT, DI_STUNNED, DI_DOWNED,$/;"	e	enum:dis_type
DI_TEARGAS	pldata.h	/^ DI_SMOKE, DI_ONFIRE, DI_TEARGAS,$/;"	e	enum:dis_type
DI_TELEGLOW	pldata.h	/^ DI_AMIGARA, DI_STEMCELL_TREATMENT, DI_TELEGLOW, DI_ATTENTION, DI_EVIL, DI_INFECTED,$/;"	e	enum:dis_type
DI_TOOK_FLUMED	pldata.h	/^  DI_TOOK_FLUMED, DI_ADRENALINE, DI_ASTHMA, DI_GRACK, DI_METH,$/;"	e	enum:dis_type
DI_TOOK_PROZAC	pldata.h	/^  DI_HALLU, DI_VISUALS, DI_IODINE, DI_TOOK_XANAX, DI_TOOK_PROZAC,$/;"	e	enum:dis_type
DI_TOOK_XANAX	pldata.h	/^  DI_HALLU, DI_VISUALS, DI_IODINE, DI_TOOK_XANAX, DI_TOOK_PROZAC,$/;"	e	enum:dis_type
DI_VIPER_COMBO	pldata.h	/^  DI_SPEED_BOOST, DI_VIPER_COMBO,$/;"	e	enum:dis_type
DI_VISUALS	pldata.h	/^  DI_HALLU, DI_VISUALS, DI_IODINE, DI_TOOK_XANAX, DI_TOOK_PROZAC,$/;"	e	enum:dis_type
DI_WEBBED	pldata.h	/^ DI_WEBBED,$/;"	e	enum:dis_type
DI_WET	pldata.h	/^ DI_GLARE, DI_WET,$/;"	e	enum:dis_type
DL_ALL	debug.h	/^ DL_ALL = (1<<5)-1$/;"	e	enum:DebugLevel
DRINK	itypedef.cpp	65;"	d	file:
D_ERROR	debug.h	/^ D_ERROR         = 1<<3,$/;"	e	enum:DebugLevel
D_GAME	debug.h	/^ D_GAME    = 1<<4,$/;"	e	enum:DebugClass
D_INFO	debug.h	/^ D_INFO          = 1,$/;"	e	enum:DebugLevel
D_MAIN	debug.h	/^ D_MAIN    = 1,$/;"	e	enum:DebugClass
D_MAP	debug.h	/^ D_MAP     = 1<<2,$/;"	e	enum:DebugClass
D_MAP_GEN	debug.h	/^ D_MAP_GEN = 1<<3,$/;"	e	enum:DebugClass
D_NPC	debug.h	/^ D_NPC     = 1<<5,$/;"	e	enum:DebugClass
D_PEDANTIC_INFO	debug.h	/^ D_PEDANTIC_INFO = 1<<4,$/;"	e	enum:DebugLevel
D_WARNING	debug.h	/^ D_WARNING       = 1<<2,$/;"	e	enum:DebugLevel
DebugClass	debug.h	/^enum DebugClass$/;"	g
DebugFile	debug.cpp	/^DebugFile::DebugFile()$/;"	f	class:DebugFile
DebugFile	debug.cpp	/^struct DebugFile$/;"	s	file:
DebugLevel	debug.h	/^enum DebugLevel$/;"	g
DebugLog	debug.h	/^	DebugLog() {$/;"	f	struct:DebugLog
DebugLog	debug.h	/^struct DebugLog$/;"	s
DebugVoid	debug.h	/^struct DebugVoid {};$/;"	s
DirectionDown	input.h	/^	DirectionDown, \/* Think stairs *\/$/;"	e	enum:InputEvent
DirectionE	input.h	/^	DirectionE,$/;"	e	enum:InputEvent
DirectionN	input.h	/^	DirectionN,$/;"	e	enum:InputEvent
DirectionNE	input.h	/^	DirectionNE,$/;"	e	enum:InputEvent
DirectionNW	input.h	/^	DirectionNW,$/;"	e	enum:InputEvent
DirectionNone	input.h	/^	DirectionNone,$/;"	e	enum:InputEvent
DirectionS	input.h	/^	DirectionS,$/;"	e	enum:InputEvent
DirectionSE	input.h	/^	DirectionSE,$/;"	e	enum:InputEvent
DirectionSW	input.h	/^	DirectionSW,$/;"	e	enum:InputEvent
DirectionUp	input.h	/^	DirectionUp,$/;"	e	enum:InputEvent
DirectionW	input.h	/^	DirectionW,$/;"	e	enum:InputEvent
DrawWindow	catacurse.cpp	/^void DrawWindow(WINDOW *win)$/;"	f
EAST	line.h	/^EAST,$/;"	e	enum:direction
EMPbomb	iuse.cpp	/^void iuse::EMPbomb(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
EMPbomb_act	iuse.cpp	/^void iuse::EMPbomb_act(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
ENGAGE_ALL	npc.h	/^ ENGAGE_ALL$/;"	e	enum:combat_engagement
ENGAGE_CLOSE	npc.h	/^ ENGAGE_CLOSE,$/;"	e	enum:combat_engagement
ENGAGE_HIT	npc.h	/^ ENGAGE_HIT,$/;"	e	enum:combat_engagement
ENGAGE_NONE	npc.h	/^ ENGAGE_NONE = 0,$/;"	e	enum:combat_engagement
ENGAGE_WEAK	npc.h	/^ ENGAGE_WEAK,$/;"	e	enum:combat_engagement
ERR	catacurse.h	109;"	d
ESCAPE_ITEMS	npcmove.cpp	/^itype_id ESCAPE_ITEMS[NUM_ESCAPE_ITEMS] = {$/;"	v
EVENT_AMIGARA	event.h	/^ EVENT_AMIGARA,$/;"	e	enum:event_type
EVENT_ARTIFACT_LIGHT	event.h	/^ EVENT_ARTIFACT_LIGHT,$/;"	e	enum:event_type
EVENT_DIM	event.h	/^ EVENT_DIM,$/;"	e	enum:event_type
EVENT_HELP	event.h	/^ EVENT_HELP,$/;"	e	enum:event_type
EVENT_NULL	event.h	/^ EVENT_NULL,$/;"	e	enum:event_type
EVENT_ROBOT_ATTACK	event.h	/^ EVENT_ROBOT_ATTACK,$/;"	e	enum:event_type
EVENT_ROOTS_DIE	event.h	/^ EVENT_ROOTS_DIE,$/;"	e	enum:event_type
EVENT_SPAWN_WYRMS	event.h	/^ EVENT_SPAWN_WYRMS,$/;"	e	enum:event_type
EVENT_TEMPLE_FLOOD	event.h	/^ EVENT_TEMPLE_FLOOD,$/;"	e	enum:event_type
EVENT_TEMPLE_OPEN	event.h	/^ EVENT_TEMPLE_OPEN,$/;"	e	enum:event_type
EVENT_TEMPLE_SPAWN	event.h	/^ EVENT_TEMPLE_SPAWN,$/;"	e	enum:event_type
EVENT_WANTED	event.h	/^ EVENT_WANTED,$/;"	e	enum:event_type
EXPLOSION_SPEED	game.h	47;"	d
FACGOAL_ANARCHY	faction.h	/^ FACGOAL_ANARCHY,$/;"	e	enum:faction_goal
FACGOAL_APOCALYPSE	faction.h	/^ FACGOAL_APOCALYPSE,$/;"	e	enum:faction_goal
FACGOAL_CIVILIZATION	faction.h	/^ FACGOAL_CIVILIZATION,$/;"	e	enum:faction_goal
FACGOAL_CLEANSE	faction.h	/^ FACGOAL_CLEANSE,$/;"	e	enum:faction_goal
FACGOAL_DOMINANCE	faction.h	/^ FACGOAL_DOMINANCE,$/;"	e	enum:faction_goal
FACGOAL_FUNGUS	faction.h	/^ FACGOAL_FUNGUS,$/;"	e	enum:faction_goal
FACGOAL_KNOWLEDGE	faction.h	/^ FACGOAL_KNOWLEDGE,$/;"	e	enum:faction_goal
FACGOAL_NATURE	faction.h	/^ FACGOAL_NATURE,$/;"	e	enum:faction_goal
FACGOAL_NONE	faction.h	/^ FACGOAL_NONE,$/;"	e	enum:faction_goal
FACGOAL_NULL	faction.h	/^ FACGOAL_NULL = 0,$/;"	e	enum:faction_goal
FACGOAL_SHADOW	faction.h	/^ FACGOAL_SHADOW,$/;"	e	enum:faction_goal
FACGOAL_WEALTH	faction.h	/^ FACGOAL_WEALTH,$/;"	e	enum:faction_goal
FACJOB_ASSASSINS	faction.h	/^ FACJOB_ASSASSINS,	\/\/ Targeted discreet killing$/;"	e	enum:faction_job
FACJOB_CARAVANS	faction.h	/^ FACJOB_CARAVANS,	\/\/ Transportation of goods$/;"	e	enum:faction_job
FACJOB_DOCTORS	faction.h	/^ FACJOB_DOCTORS,	\/\/ Doctors for hire$/;"	e	enum:faction_job
FACJOB_DRUGS	faction.h	/^ FACJOB_DRUGS,		\/\/ Drug dealing$/;"	e	enum:faction_job
FACJOB_EXTORTION	faction.h	/^ FACJOB_EXTORTION,	\/\/ Protection rackets, etc$/;"	e	enum:faction_job
FACJOB_FARMERS	faction.h	/^ FACJOB_FARMERS,	\/\/ Farming & sale of food$/;"	e	enum:faction_job
FACJOB_GAMBLING	faction.h	/^ FACJOB_GAMBLING,	\/\/ Maitenance of gambling parlors$/;"	e	enum:faction_job
FACJOB_INFORMATION	faction.h	/^ FACJOB_INFORMATION,	\/\/ Gathering & sale of information$/;"	e	enum:faction_job
FACJOB_MANUFACTURE	faction.h	/^ FACJOB_MANUFACTURE,	\/\/ Manufacturing & selling goods$/;"	e	enum:faction_job
FACJOB_MERCENARIES	faction.h	/^ FACJOB_MERCENARIES,	\/\/ General fighters-for-hire$/;"	e	enum:faction_job
FACJOB_NULL	faction.h	/^ FACJOB_NULL = 0,$/;"	e	enum:faction_job
FACJOB_RAIDERS	faction.h	/^ FACJOB_RAIDERS,	\/\/ Raiding settlements, trade routes, &c$/;"	e	enum:faction_job
FACJOB_SCAVENGE	faction.h	/^ FACJOB_SCAVENGE,	\/\/ Scavenging & sale of general supplies$/;"	e	enum:faction_job
FACJOB_THIEVES	faction.h	/^ FACJOB_THIEVES,	\/\/ Less violent; theft of property without killing$/;"	e	enum:faction_job
FACJOB_TRADE	faction.h	/^ FACJOB_TRADE,		\/\/ Bazaars, etc.$/;"	e	enum:faction_job
FACVAL_ARTIFACTS	faction.h	/^ FACVAL_ARTIFACTS,	\/\/ Seek out unique items$/;"	e	enum:faction_value
FACVAL_BIONICS	faction.h	/^ FACVAL_BIONICS,	\/\/ Collection & installation of bionic parts$/;"	e	enum:faction_value
FACVAL_BOOKS	faction.h	/^ FACVAL_BOOKS,		\/\/ Collection of books$/;"	e	enum:faction_value
FACVAL_CHARITABLE	faction.h	/^ FACVAL_CHARITABLE,	\/\/ Give their job for free (often)$/;"	e	enum:faction_value
FACVAL_CRUELTY	faction.h	/^ FACVAL_CRUELTY,	\/\/ Torture, murder, etc.$/;"	e	enum:faction_value
FACVAL_EXPLORATION	faction.h	/^ FACVAL_EXPLORATION,	\/\/ Like to explore new territory$/;"	e	enum:faction_value
FACVAL_LAWFUL	faction.h	/^ FACVAL_LAWFUL,		\/\/ Abide by the old laws$/;"	e	enum:faction_value
FACVAL_LONERS	faction.h	/^ FACVAL_LONERS,		\/\/ Avoid associating with outsiders$/;"	e	enum:faction_value
FACVAL_NULL	faction.h	/^ FACVAL_NULL = 0,$/;"	e	enum:faction_value
FACVAL_ROBOTS	faction.h	/^ FACVAL_ROBOTS,		\/\/ Creation \/ use of robots$/;"	e	enum:faction_value
FACVAL_STRAIGHTEDGE	faction.h	/^ FACVAL_STRAIGHTEDGE,	\/\/ No drugs, alcohol, etc.$/;"	e	enum:faction_value
FACVAL_TRAINING	faction.h	/^ FACVAL_TRAINING,	\/\/ Training among themselves and others$/;"	e	enum:faction_value
FACVAL_TREACHERY	faction.h	/^ FACVAL_TREACHERY,	\/\/ Untrustworthy$/;"	e	enum:faction_value
FAILURE	npctalk.cpp	33;"	d	file:
FAILURE_ACTION	npctalk.cpp	41;"	d	file:
FAILURE_OPINION	npctalk.cpp	37;"	d	file:
FALL	weather.h	28;"	d
FAVOR_CASH	npc.h	/^ FAVOR_CASH,	\/\/ We owe cash (or goods of equivalent value)$/;"	e	enum:npc_favor_type
FAVOR_GENERAL	npc.h	/^ FAVOR_GENERAL,	\/\/ We owe you... a favor?$/;"	e	enum:npc_favor_type
FAVOR_ITEM	npc.h	/^ FAVOR_ITEM,	\/\/ We owe a specific item$/;"	e	enum:npc_favor_type
FAVOR_NULL	npc.h	/^ FAVOR_NULL,$/;"	e	enum:npc_favor_type
FAVOR_TRAINING	npc.h	/^ FAVOR_TRAINING,\/\/ We owe skill or style training$/;"	e	enum:npc_favor_type
FEARS	mtypedef.cpp	35;"	d	file:
FG	catacurse.h	/^    int FG;\/\/foreground index in colors[]$/;"	m	struct:__anon1
FG	catacurse.h	/^  int FG;\/\/current foreground color from attron$/;"	m	struct:__anon3
FG	catacurse.h	/^char *FG;$/;"	m	struct:__anon2
FLAGS	mtypedef.cpp	32;"	d	file:
FLESH	enums.h	/^LIQUID, VEGGY, FLESH, POWDER, HFLESH, \/\/Human Flesh.$/;"	e	enum:material
FOOD	itypedef.cpp	204;"	d	file:
FUEL	itypedef.cpp	2571;"	d	file:
FUR	enums.h	/^COTTON, WOOL, LEATHER, KEVLAR, FUR,$/;"	e	enum:material
FillRectDIB	catacurse.cpp	/^inline void FillRectDIB(int x, int y, int width, int height, unsigned char color)$/;"	f
Filter	input.h	/^    Filter,$/;"	e	enum:InputEvent
FreqDef	mongroup.h	/^typedef std::map<mon_id, int> FreqDef;$/;"	t
FreqDef_iter	mongroup.h	/^typedef FreqDef::iterator FreqDef_iter;$/;"	t
GET	picojson.h	197;"	d
GET	picojson.h	213;"	d
GLASS	enums.h	/^STONE, PAPER, WOOD, PLASTIC, GLASS, IRON, STEEL, SILVER$/;"	e	enum:material
GUN	itypedef.cpp	2590;"	d	file:
GUNMOD	itypedef.cpp	2602;"	d	file:
GetInt	mongroupdef.cpp	/^int GetInt(std::string key, picojson::object *obj)$/;"	f
GetMGroupFromJSON	mongroupdef.cpp	/^MonsterGroup GetMGroupFromJSON(picojson::object *jsonobj)$/;"	f
GetMonsterFromGroup	mongroupdef.cpp	/^mon_id MonsterGroupManager::GetMonsterFromGroup(std::string group, std::vector <mtype*> *mtypes, int turn)$/;"	f	class:MonsterGroupManager
GetMonsterGroup	mongroupdef.cpp	/^MonsterGroup MonsterGroupManager::GetMonsterGroup(std::string group)$/;"	f	class:MonsterGroupManager
GetMonstersFromGroup	mongroupdef.cpp	/^std::vector<mon_id> MonsterGroupManager::GetMonstersFromGroup(std::string group)$/;"	f	class:MonsterGroupManager
GetString	mongroupdef.cpp	/^std::string GetString(std::string key, picojson::object *obj)$/;"	f
HEADERS	Makefile	/^HEADERS = $(wildcard *.h)$/;"	m
HFLESH	enums.h	/^LIQUID, VEGGY, FLESH, POWDER, HFLESH, \/\/Human Flesh.$/;"	e	enum:material
HI	color.h	/^HI = 1,$/;"	e	enum:col_attribute
HIGH_STAT	newcharacter.cpp	34;"	d	file:
HILIGHT	color.cpp	3;"	d	file:
HINT_CANT	item.h	/^ HINT_CANT = 0, \/\/meant to display as gray$/;"	e	enum:hint_rating
HINT_GOOD	item.h	/^ HINT_GOOD = -999 \/\/ meant to display as green$/;"	e	enum:hint_rating
HINT_IFFY	item.h	/^ HINT_IFFY = 1, \/\/meant to display as red$/;"	e	enum:hint_rating
HIVECHANCE	overmap.cpp	32;"	d	file:
HOURS	calendar.h	11;"	d
HP_HEIGHT	game.h	31;"	d
HP_WIDTH	game.h	32;"	d
Help	input.h	/^	Help,$/;"	e	enum:InputEvent
HorzLineDIB	catacurse.cpp	/^inline void HorzLineDIB(int x, int y, int x2,int thickness, unsigned char color)$/;"	f
IC_AMMO	itype.h	/^  IC_AMMO,$/;"	e	enum:item_cat
IC_ARMOR	itype.h	/^  IC_ARMOR,$/;"	e	enum:item_cat
IC_BOOK	itype.h	/^  IC_BOOK,$/;"	e	enum:item_cat
IC_COMESTIBLE	itype.h	/^  IC_COMESTIBLE,$/;"	e	enum:item_cat
IC_CONTAINER	itype.h	/^  IC_CONTAINER$/;"	e	enum:item_cat
IC_GUN	itype.h	/^  IC_GUN,$/;"	e	enum:item_cat
IC_NULL	itype.h	/^  IC_NULL = 0,$/;"	e	enum:item_cat
IC_TOOL	itype.h	/^  IC_TOOL,$/;"	e	enum:item_cat
IF_CHARGE	itype.h	/^IF_CHARGE,	\/\/ For guns; charges up slowly$/;"	e	enum:item_flag
IF_EATEN_HOT	itype.h	/^IF_EATEN_HOT,	\/\/ food meant to be eaten hot$/;"	e	enum:item_flag
IF_FIRE	itype.h	/^IF_FIRE,        \/\/ Chance to set fire to tiles\/enemies$/;"	e	enum:item_flag
IF_FIRE_100	itype.h	/^IF_FIRE_100,	\/\/ Fires 100 rounds at once! (e.g. flamethrower)$/;"	e	enum:item_flag
IF_GRENADE	itype.h	/^IF_GRENADE,	\/\/ NPCs treat this as a grenade$/;"	e	enum:item_flag
IF_HOT	itype.h	/^IF_HOT,				\/\/ hot food$/;"	e	enum:item_flag
IF_LIGHT_4	itype.h	/^IF_LIGHT_4,	\/\/ Provides 4 tiles of light$/;"	e	enum:item_flag
IF_LIGHT_8	itype.h	/^IF_LIGHT_8,	\/\/ Provides 8 tiles of light$/;"	e	enum:item_flag
IF_MESSY	itype.h	/^IF_MESSY,	\/\/ Splatters blood, etc.$/;"	e	enum:item_flag
IF_MODE_AUX	itype.h	/^IF_MODE_AUX, \/\/ A gunmod with a firing mode$/;"	e	enum:item_flag
IF_MODE_BURST	itype.h	/^IF_MODE_BURST, \/\/ A burst of attacks$/;"	e	enum:item_flag
IF_NO_UNWIELD	itype.h	/^IF_NO_UNWIELD, \/\/ Impossible to unwield, e.g. bionic claws$/;"	e	enum:item_flag
IF_NULL	itype.h	/^IF_NULL,$/;"	e	enum:item_flag
IF_RELOAD_AND_SHOOT	itype.h	/^IF_RELOAD_AND_SHOOT, \/\/ Reloading and shooting is one action$/;"	e	enum:item_flag
IF_RELOAD_ONE	itype.h	/^IF_RELOAD_ONE,	\/\/ Reload cartridge by cartridge (e.g. most shotguns)$/;"	e	enum:item_flag
IF_ROTTEN	itype.h	/^IF_ROTTEN, 		\/\/ rotten foox$/;"	e	enum:item_flag
IF_SHOCK	itype.h	/^IF_SHOCK,   \/\/ Stuns and damages enemies, powers up shockers.$/;"	e	enum:item_flag
IF_SPEAR	itype.h	/^IF_SPEAR,	\/\/ Cutting damage is actually a piercing attack$/;"	e	enum:item_flag
IF_STAB	itype.h	/^IF_STAB,	\/\/ This weapon *can* pierce, but also has normal cutting$/;"	e	enum:item_flag
IF_STR10_DRAW	itype.h	/^IF_STR10_DRAW,  \/\/ Requires strength 10 to draw$/;"	e	enum:item_flag
IF_STR8_DRAW	itype.h	/^IF_STR8_DRAW,   \/\/ Requires strength 8 to draw$/;"	e	enum:item_flag
IF_STR_RELOAD	itype.h	/^IF_STR_RELOAD,  \/\/ Reloading time is reduced by Strength * 20$/;"	e	enum:item_flag
IF_UNARMED_WEAPON	itype.h	/^IF_UNARMED_WEAPON, \/\/ Counts as an unarmed weapon$/;"	e	enum:item_flag
IF_USE_UPS	itype.h	/^IF_USE_UPS,	\/\/ Draws power from a UPS$/;"	e	enum:item_flag
IF_WRAP	itype.h	/^IF_WRAP,	\/\/ Can wrap around your target, costing you and them movement$/;"	e	enum:item_flag
INBOUNDS	field.cpp	5;"	d	file:
INBOUNDS	lightmap.cpp	6;"	d	file:
INBOUNDS	map.cpp	15;"	d	file:
INIT	picojson.h	113;"	d
INIT	picojson.h	119;"	d
INIT	picojson.h	165;"	d
INIT	picojson.h	171;"	d
INV	color.h	/^INV = 2$/;"	e	enum:col_attribute
IRON	enums.h	/^STONE, PAPER, WOOD, PLASTIC, GLASS, IRON, STEEL, SILVER$/;"	e	enum:material
IR_BAD	game.h	/^ IR_BAD,$/;"	e	enum:input_ret
IR_GOOD	game.h	/^ IR_GOOD,$/;"	e	enum:input_ret
IR_TIMEOUT	game.h	/^ IR_TIMEOUT$/;"	e	enum:input_ret
IS	picojson.h	184;"	d
IS	picojson.h	195;"	d
IS	picojson.h	569;"	d
IS	picojson.h	578;"	d
ITEM	missiondef.cpp	12;"	d	file:
InputEvent	input.h	/^enum InputEvent {$/;"	g
IsMonsterInGroup	mongroupdef.cpp	/^bool MonsterGroupManager::IsMonsterInGroup(std::string group, mon_id monster)$/;"	f	class:MonsterGroupManager
Item_manager	item_manager.cpp	/^Item_manager::Item_manager(){$/;"	f	class:Item_manager
Item_manager	item_manager.h	/^class Item_manager$/;"	c
KEVLAR	enums.h	/^COTTON, WOOL, LEATHER, KEVLAR, FUR,$/;"	e	enum:material
KEY_BACKSPACE	catacurse.h	99;"	d
KEY_BREAK	catacurse.h	93;"	d
KEY_DOWN	catacurse.h	94;"	d
KEY_ESCAPE	keypress.h	18;"	d
KEY_HOME	catacurse.h	98;"	d
KEY_LEFT	catacurse.h	96;"	d
KEY_MIN	catacurse.h	92;"	d
KEY_RIGHT	catacurse.h	97;"	d
KEY_UP	catacurse.h	95;"	d
LDFLAGS	Makefile	/^  LDFLAGS = -lncurses$/;"	m
LEADS_TO	mutation_data.cpp	15;"	d	file:
LEATHER	enums.h	/^COTTON, WOOL, LEATHER, KEVLAR, FUR,$/;"	e	enum:material
LESS	wish.cpp	7;"	d	file:
LESSON_ACT_BUBBLEWRAP	gamemode.h	/^LESSON_ACT_GRENADE, LESSON_ACT_BUBBLEWRAP,$/;"	e	enum:tut_lesson
LESSON_ACT_GRENADE	gamemode.h	/^LESSON_ACT_GRENADE, LESSON_ACT_BUBBLEWRAP,$/;"	e	enum:tut_lesson
LESSON_AUTOWIELD	gamemode.h	/^LESSON_FULL_INV, LESSON_WIELD_NO_SPACE, LESSON_AUTOWIELD, LESSON_ITEM_INTO_INV,$/;"	e	enum:tut_lesson
LESSON_BUTCHER	gamemode.h	/^LESSON_WEAPON_INFO, LESSON_HIT_MONSTER, LESSON_PAIN, LESSON_BUTCHER,$/;"	e	enum:tut_lesson
LESSON_CLOSE	gamemode.h	/^LESSON_MOVE, LESSON_LOOK, LESSON_OPEN, LESSON_CLOSE, LESSON_SMASH,$/;"	e	enum:tut_lesson
LESSON_DARK	gamemode.h	/^LESSON_STAIRS, LESSON_DARK_NO_FLASH, LESSON_DARK, LESSON_PICKUP_WATER,$/;"	e	enum:tut_lesson
LESSON_DARK_NO_FLASH	gamemode.h	/^LESSON_STAIRS, LESSON_DARK_NO_FLASH, LESSON_DARK, LESSON_PICKUP_WATER,$/;"	e	enum:tut_lesson
LESSON_DRANK_WATER	gamemode.h	/^LESSON_TOOK_PAINKILLER, LESSON_TOOK_CIG, LESSON_DRANK_WATER,$/;"	e	enum:tut_lesson
LESSON_EXAMINE	gamemode.h	/^ LESSON_WINDOW, LESSON_PICKUP, LESSON_EXAMINE, LESSON_INTERACT,$/;"	e	enum:tut_lesson
LESSON_FULL_INV	gamemode.h	/^LESSON_FULL_INV, LESSON_WIELD_NO_SPACE, LESSON_AUTOWIELD, LESSON_ITEM_INTO_INV,$/;"	e	enum:tut_lesson
LESSON_GOT_AMMO	gamemode.h	/^ LESSON_GOT_GUN, LESSON_GOT_AMMO, LESSON_WORE_ARMOR, LESSON_WORE_STORAGE,$/;"	e	enum:tut_lesson
LESSON_GOT_ARMOR	gamemode.h	/^ LESSON_GOT_ARMOR, LESSON_GOT_WEAPON, LESSON_GOT_FOOD, LESSON_GOT_TOOL,$/;"	e	enum:tut_lesson
LESSON_GOT_FOOD	gamemode.h	/^ LESSON_GOT_ARMOR, LESSON_GOT_WEAPON, LESSON_GOT_FOOD, LESSON_GOT_TOOL,$/;"	e	enum:tut_lesson
LESSON_GOT_GUN	gamemode.h	/^ LESSON_GOT_GUN, LESSON_GOT_AMMO, LESSON_WORE_ARMOR, LESSON_WORE_STORAGE,$/;"	e	enum:tut_lesson
LESSON_GOT_TOOL	gamemode.h	/^ LESSON_GOT_ARMOR, LESSON_GOT_WEAPON, LESSON_GOT_FOOD, LESSON_GOT_TOOL,$/;"	e	enum:tut_lesson
LESSON_GOT_WEAPON	gamemode.h	/^ LESSON_GOT_ARMOR, LESSON_GOT_WEAPON, LESSON_GOT_FOOD, LESSON_GOT_TOOL,$/;"	e	enum:tut_lesson
LESSON_GUN_FIRE	gamemode.h	/^LESSON_GUN_LOAD, LESSON_GUN_FIRE, LESSON_RECOIL,$/;"	e	enum:tut_lesson
LESSON_GUN_LOAD	gamemode.h	/^LESSON_GUN_LOAD, LESSON_GUN_FIRE, LESSON_RECOIL,$/;"	e	enum:tut_lesson
LESSON_HIT_MONSTER	gamemode.h	/^LESSON_WEAPON_INFO, LESSON_HIT_MONSTER, LESSON_PAIN, LESSON_BUTCHER,$/;"	e	enum:tut_lesson
LESSON_INTERACT	gamemode.h	/^ LESSON_WINDOW, LESSON_PICKUP, LESSON_EXAMINE, LESSON_INTERACT,$/;"	e	enum:tut_lesson
LESSON_INTRO	gamemode.h	/^LESSON_INTRO,$/;"	e	enum:tut_lesson
LESSON_ITEM_INTO_INV	gamemode.h	/^LESSON_FULL_INV, LESSON_WIELD_NO_SPACE, LESSON_AUTOWIELD, LESSON_ITEM_INTO_INV,$/;"	e	enum:tut_lesson
LESSON_LOOK	gamemode.h	/^LESSON_MOVE, LESSON_LOOK, LESSON_OPEN, LESSON_CLOSE, LESSON_SMASH,$/;"	e	enum:tut_lesson
LESSON_MOVE	gamemode.h	/^LESSON_MOVE, LESSON_LOOK, LESSON_OPEN, LESSON_CLOSE, LESSON_SMASH,$/;"	e	enum:tut_lesson
LESSON_OPEN	gamemode.h	/^LESSON_MOVE, LESSON_LOOK, LESSON_OPEN, LESSON_CLOSE, LESSON_SMASH,$/;"	e	enum:tut_lesson
LESSON_OVERLOADED	gamemode.h	/^LESSON_OVERLOADED,$/;"	e	enum:tut_lesson
LESSON_PAIN	gamemode.h	/^LESSON_WEAPON_INFO, LESSON_HIT_MONSTER, LESSON_PAIN, LESSON_BUTCHER,$/;"	e	enum:tut_lesson
LESSON_PICKUP	gamemode.h	/^ LESSON_WINDOW, LESSON_PICKUP, LESSON_EXAMINE, LESSON_INTERACT,$/;"	e	enum:tut_lesson
LESSON_PICKUP_WATER	gamemode.h	/^LESSON_STAIRS, LESSON_DARK_NO_FLASH, LESSON_DARK, LESSON_PICKUP_WATER,$/;"	e	enum:tut_lesson
LESSON_RECOIL	gamemode.h	/^LESSON_GUN_LOAD, LESSON_GUN_FIRE, LESSON_RECOIL,$/;"	e	enum:tut_lesson
LESSON_SMASH	gamemode.h	/^LESSON_MOVE, LESSON_LOOK, LESSON_OPEN, LESSON_CLOSE, LESSON_SMASH,$/;"	e	enum:tut_lesson
LESSON_STAIRS	gamemode.h	/^LESSON_STAIRS, LESSON_DARK_NO_FLASH, LESSON_DARK, LESSON_PICKUP_WATER,$/;"	e	enum:tut_lesson
LESSON_TOOK_CIG	gamemode.h	/^LESSON_TOOK_PAINKILLER, LESSON_TOOK_CIG, LESSON_DRANK_WATER,$/;"	e	enum:tut_lesson
LESSON_TOOK_PAINKILLER	gamemode.h	/^LESSON_TOOK_PAINKILLER, LESSON_TOOK_CIG, LESSON_DRANK_WATER,$/;"	e	enum:tut_lesson
LESSON_WEAPON_INFO	gamemode.h	/^LESSON_WEAPON_INFO, LESSON_HIT_MONSTER, LESSON_PAIN, LESSON_BUTCHER,$/;"	e	enum:tut_lesson
LESSON_WIELD_NO_SPACE	gamemode.h	/^LESSON_FULL_INV, LESSON_WIELD_NO_SPACE, LESSON_AUTOWIELD, LESSON_ITEM_INTO_INV,$/;"	e	enum:tut_lesson
LESSON_WINDOW	gamemode.h	/^ LESSON_WINDOW, LESSON_PICKUP, LESSON_EXAMINE, LESSON_INTERACT,$/;"	e	enum:tut_lesson
LESSON_WORE_ARMOR	gamemode.h	/^ LESSON_GOT_GUN, LESSON_GOT_AMMO, LESSON_WORE_ARMOR, LESSON_WORE_STORAGE,$/;"	e	enum:tut_lesson
LESSON_WORE_MASK	gamemode.h	/^ LESSON_WORE_MASK,$/;"	e	enum:tut_lesson
LESSON_WORE_STORAGE	gamemode.h	/^ LESSON_GOT_GUN, LESSON_GOT_AMMO, LESSON_WORE_ARMOR, LESSON_WORE_STORAGE,$/;"	e	enum:tut_lesson
LIGHTMAP_CACHE_X	lightmap.cpp	8;"	d	file:
LIGHTMAP_CACHE_Y	lightmap.cpp	9;"	d	file:
LIGHTNING_CHANCE	weather.cpp	7;"	d	file:
LIGHT_AMBIENT_LIT	lightmap.h	8;"	d
LIGHT_AMBIENT_LOW	lightmap.h	7;"	d
LIGHT_RANGE	lightmap.h	13;"	d
LIGHT_SOURCE_BRIGHT	lightmap.h	5;"	d
LIGHT_SOURCE_LOCAL	lightmap.h	4;"	d
LIGHT_TRANSPARENCY_CLEAR	lightmap.h	11;"	d
LIGHT_TRANSPARENCY_SOLID	lightmap.h	10;"	d
LINE_OOXX	help.cpp	10;"	d	file:
LINE_OOXX	newcharacter.cpp	16;"	d	file:
LINE_OOXX	output.cpp	21;"	d	file:
LINE_OOXX	output.h	16;"	d
LINE_OXOX	help.cpp	7;"	d	file:
LINE_OXOX	newcharacter.cpp	13;"	d	file:
LINE_OXOX	output.cpp	18;"	d	file:
LINE_OXOX	output.h	13;"	d
LINE_OXXO	help.cpp	9;"	d	file:
LINE_OXXO	newcharacter.cpp	15;"	d	file:
LINE_OXXO	output.cpp	20;"	d	file:
LINE_OXXO	output.h	15;"	d
LINE_OXXX	help.cpp	15;"	d	file:
LINE_OXXX	newcharacter.cpp	21;"	d	file:
LINE_OXXX	output.cpp	26;"	d	file:
LINE_OXXX	output.h	21;"	d
LINE_XOOX	help.cpp	11;"	d	file:
LINE_XOOX	newcharacter.cpp	17;"	d	file:
LINE_XOOX	output.cpp	22;"	d	file:
LINE_XOOX	output.h	17;"	d
LINE_XOXO	help.cpp	6;"	d	file:
LINE_XOXO	newcharacter.cpp	12;"	d	file:
LINE_XOXO	output.cpp	17;"	d	file:
LINE_XOXO	output.h	12;"	d
LINE_XOXX	help.cpp	14;"	d	file:
LINE_XOXX	newcharacter.cpp	20;"	d	file:
LINE_XOXX	output.cpp	25;"	d	file:
LINE_XOXX	output.h	20;"	d
LINE_XXOO	help.cpp	8;"	d	file:
LINE_XXOO	newcharacter.cpp	14;"	d	file:
LINE_XXOO	output.cpp	19;"	d	file:
LINE_XXOO	output.h	14;"	d
LINE_XXOX	help.cpp	13;"	d	file:
LINE_XXOX	newcharacter.cpp	19;"	d	file:
LINE_XXOX	output.cpp	24;"	d	file:
LINE_XXOX	output.h	19;"	d
LINE_XXXO	help.cpp	12;"	d	file:
LINE_XXXO	newcharacter.cpp	18;"	d	file:
LINE_XXXO	output.cpp	23;"	d	file:
LINE_XXXO	output.h	18;"	d
LINE_XXXX	help.cpp	16;"	d	file:
LINE_XXXX	newcharacter.cpp	22;"	d	file:
LINE_XXXX	output.cpp	27;"	d	file:
LINE_XXXX	output.h	22;"	d
LIQUID	enums.h	/^LIQUID, VEGGY, FLESH, POWDER, HFLESH, \/\/Human Flesh.$/;"	e	enum:material
LL_BRIGHT	lightmap.h	/^ LL_BRIGHT  \/\/ Probably only for light sources$/;"	e	enum:lit_level
LL_DARK	lightmap.h	/^ LL_DARK = 0,$/;"	e	enum:lit_level
LL_LIT	lightmap.h	/^ LL_LIT,$/;"	e	enum:lit_level
LL_LOW	lightmap.h	/^ LL_LOW,    \/\/ Hard to see$/;"	e	enum:lit_level
LOCATION_HEIGHT	game.h	39;"	d
LOCATION_WIDTH	game.h	40;"	d
LONG_RANGE	game.h	44;"	d
LoadJSONGroups	mongroupdef.cpp	/^void MonsterGroupManager::LoadJSONGroups()$/;"	f	class:MonsterGroupManager
MACGUFFIN	itypedef.cpp	4386;"	d	file:
MAP	picojson.h	282;"	d
MAP	picojson.h	291;"	d
MAP	picojson.h	485;"	d
MAP	picojson.h	494;"	d
MAPBUFFER	mapbuffer.cpp	/^mapbuffer MAPBUFFER;$/;"	v
MAPSIZE	map.h	22;"	d
MATT_ATTACK	monster.h	/^MATT_ATTACK,$/;"	e	enum:monster_attitude
MATT_FLEE	monster.h	/^MATT_FLEE,$/;"	e	enum:monster_attitude
MATT_FOLLOW	monster.h	/^MATT_FOLLOW,$/;"	e	enum:monster_attitude
MATT_FRIEND	monster.h	/^MATT_FRIEND,$/;"	e	enum:monster_attitude
MATT_IGNORE	monster.h	/^MATT_IGNORE,$/;"	e	enum:monster_attitude
MATT_NULL	monster.h	/^MATT_NULL = 0,$/;"	e	enum:monster_attitude
MAX_ANT_SIZE	overmap.cpp	25;"	d	file:
MAX_DISPLAYED_RECIPES	crafting.h	10;"	d
MAX_FAC_NAME_SIZE	faction.h	8;"	d
MAX_GOO_SIZE	overmap.cpp	27;"	d	file:
MAX_MONSTERS_MOVING	game.cpp	35;"	d	file:
MAX_RIFT_SIZE	overmap.cpp	29;"	d	file:
MAX_TRAIT_POINTS	newcharacter.cpp	35;"	d	file:
MC_CLASSIC	mtype.h	/^MC_CLASSIC, \/\/ Only monsters we expect in a classic zombie movie.$/;"	e	enum:m_category
MC_MAX	mtype.h	/^MC_MAX \/\/ Size of flag array.$/;"	e	enum:m_category
MC_NULL	mtype.h	/^MC_NULL = 0, \/\/ No category.$/;"	e	enum:m_category
MC_WILDLIFE	mtype.h	/^MC_WILDLIFE, \/\/ The natural animals.$/;"	e	enum:m_category
MED	itypedef.cpp	537;"	d	file:
MELEE	itypedef.cpp	687;"	d	file:
MESSAGES_HEIGHT	game.h	37;"	d
MESSAGES_WIDTH	game.h	38;"	d
ME_BEARTRAP	monster.h	/^ME_BEARTRAP,		\/\/ Stuck in beartrap$/;"	e	enum:monster_effect_type
ME_BLIND	monster.h	/^ME_BLIND,		\/\/ Can't use sight$/;"	e	enum:monster_effect_type
ME_DEAF	monster.h	/^ME_DEAF,		\/\/ Can't use hearing$/;"	e	enum:monster_effect_type
ME_DOCILE	monster.h	/^ME_DOCILE,		\/\/ Don't attack other monsters--for tame monster$/;"	e	enum:monster_effect_type
ME_DOWNED	monster.h	/^ME_DOWNED,		\/\/ Knocked down$/;"	e	enum:monster_effect_type
ME_HIT_BY_PLAYER	monster.h	/^ME_HIT_BY_PLAYER,	\/\/ We shot or hit them$/;"	e	enum:monster_effect_type
ME_NULL	monster.h	/^ME_NULL = 0,$/;"	e	enum:monster_effect_type
ME_ONFIRE	monster.h	/^ME_ONFIRE,		\/\/ Lit aflame$/;"	e	enum:monster_effect_type
ME_POISONED	monster.h	/^ME_POISONED,		\/\/ Slowed, takes damage$/;"	e	enum:monster_effect_type
ME_RUN	monster.h	/^ME_RUN,			\/\/ For hit-and-run monsters; we're running for a bit;$/;"	e	enum:monster_effect_type
ME_STUNNED	monster.h	/^ME_STUNNED,		\/\/ Stumbling briefly$/;"	e	enum:monster_effect_type
ME_TARGETED	monster.h	/^ME_TARGETED,		\/\/ Targeting locked on--for robots that shoot guns$/;"	e	enum:monster_effect_type
MF_ACIDPROOF	mtype.h	/^MF_ACIDPROOF,	\/\/ Immune to acid$/;"	e	enum:m_flag
MF_ACIDTRAIL	mtype.h	/^MF_ACIDTRAIL,	\/\/ Leaves a trail of acid$/;"	e	enum:m_flag
MF_ANIMAL	mtype.h	/^MF_ANIMAL,	\/\/ Is an "animal" for purposes of the Animal Empath trait$/;"	e	enum:m_flag
MF_AQUATIC	mtype.h	/^MF_AQUATIC,	\/\/ Confined to water$/;"	e	enum:m_flag
MF_ATTACKMON	mtype.h	/^MF_ATTACKMON,	\/\/ Attacks other monsters$/;"	e	enum:m_flag
MF_BADVENOM	mtype.h	/^MF_BADVENOM,	\/\/ Attack may SEVERELY poison the player$/;"	e	enum:m_flag
MF_BASHES	mtype.h	/^MF_BASHES,	\/\/ Bashes down doors$/;"	e	enum:m_flag
MF_BLEED	mtype.h	/^MF_BLEED,       \/\/ Causes player to bleed$/;"	e	enum:m_flag
MF_BONES	mtype.h	/^MF_BONES, \/\/ May produce bones and sinews when butchered$/;"	e	enum:m_flag
MF_CBM	mtype.h	/^MF_CBM, \/\/ May produce a cbm or two when butchered$/;"	e	enum:m_flag
MF_DESTROYS	mtype.h	/^MF_DESTROYS,	\/\/ Bashes down walls and more$/;"	e	enum:m_flag
MF_DIGS	mtype.h	/^MF_DIGS,	\/\/ Digs through the ground$/;"	e	enum:m_flag
MF_ELECTRIC	mtype.h	/^MF_ELECTRIC,	\/\/ Shocks unarmed attackers$/;"	e	enum:m_flag
MF_ELECTRONIC	mtype.h	/^MF_ELECTRONIC,	\/\/ e.g. a robot; affected by emp blasts, and other stuff$/;"	e	enum:m_flag
MF_FIREY	mtype.h	/^MF_FIREY,	\/\/ Burns stuff and is immune to fire$/;"	e	enum:m_flag
MF_FLIES	mtype.h	/^MF_FLIES,	\/\/ Can fly (over water, etc)$/;"	e	enum:m_flag
MF_FRIENDLY_SPECIAL	mtype.h	/^MF_FRIENDLY_SPECIAL, \/\/ Use our special attack, even if friendly$/;"	e	enum:m_flag
MF_FUR	mtype.h	/^MF_FUR,		\/\/ May produce fur when butchered.$/;"	e	enum:m_flag
MF_GOODHEARING	mtype.h	/^MF_GOODHEARING,	\/\/ Pursues sounds more than most monsters$/;"	e	enum:m_flag
MF_GRABS	mtype.h	/^MF_GRABS,	\/\/ Its attacks may grab us!$/;"	e	enum:m_flag
MF_GUILT	mtype.h	/^MF_GUILT,	\/\/ You feel guilty for killing it$/;"	e	enum:m_flag
MF_HARDTOSHOOT	mtype.h	/^MF_HARDTOSHOOT,	\/\/ Some shots are actually misses$/;"	e	enum:m_flag
MF_HEARS	mtype.h	/^MF_HEARS,	\/\/ It can hear you$/;"	e	enum:m_flag
MF_HIT_AND_RUN	mtype.h	/^MF_HIT_AND_RUN,	\/\/ Flee for several turns after a melee attack$/;"	e	enum:m_flag
MF_HUMAN	mtype.h	/^MF_HUMAN,	\/\/ It's a live human$/;"	e	enum:m_flag
MF_IMMOBILE	mtype.h	/^MF_IMMOBILE,	\/\/ Doesn't move (e.g. turrets)$/;"	e	enum:m_flag
MF_KEENNOSE	mtype.h	/^MF_KEENNOSE, \/\/Keen sense of smell$/;"	e	enum:m_flag
MF_LEATHER	mtype.h	/^MF_LEATHER,	\/\/ May produce leather when butchered$/;"	e	enum:m_flag
MF_MAX	mtype.h	/^MF_MAX		\/\/ Sets the length of the flags - obviously MUST be last$/;"	e	enum:m_flag
MF_NOHEAD	mtype.h	/^MF_NOHEAD,	\/\/ Headshots not allowed!$/;"	e	enum:m_flag
MF_NO_BREATHE	mtype.h	/^MF_NO_BREATHE, \/\/Provides immunity to inhalation effects from gas, smoke, and poison$/;"	e	enum:m_flag
MF_NULL	mtype.h	/^MF_NULL = 0,	\/\/ Helps with setvector$/;"	e	enum:m_flag
MF_PLASTIC	mtype.h	/^MF_PLASTIC,	\/\/ Absorbs physical damage to a great degree$/;"	e	enum:m_flag
MF_POISON	mtype.h	/^MF_POISON,	\/\/ Poisonous to eat$/;"	e	enum:m_flag
MF_QUEEN	mtype.h	/^MF_QUEEN,	\/\/ When it dies, local populations start to die off too$/;"	e	enum:m_flag
MF_SEES	mtype.h	/^MF_SEES,	\/\/ It can see you (and will run\/follow)$/;"	e	enum:m_flag
MF_SMELLS	mtype.h	/^MF_SMELLS,	\/\/ It can smell you$/;"	e	enum:m_flag
MF_STUMBLES	mtype.h	/^MF_STUMBLES,	\/\/ Stumbles in its movement$/;"	e	enum:m_flag
MF_SUNDEATH	mtype.h	/^MF_SUNDEATH,	\/\/ Dies in full sunlight$/;"	e	enum:m_flag
MF_SWIMS	mtype.h	/^MF_SWIMS,	\/\/ Treats water as 50 movement point terrain$/;"	e	enum:m_flag
MF_VENOM	mtype.h	/^MF_VENOM,	\/\/ Attack may poison the player$/;"	e	enum:m_flag
MF_VIS10	mtype.h	/^MF_VIS10, \/\/Vision -50$/;"	e	enum:m_flag
MF_VIS20	mtype.h	/^MF_VIS20, \/\/Vision -40$/;"	e	enum:m_flag
MF_VIS30	mtype.h	/^MF_VIS30, \/\/Vision -30$/;"	e	enum:m_flag
MF_VIS40	mtype.h	/^MF_VIS40, \/\/Vision -20$/;"	e	enum:m_flag
MF_VIS50	mtype.h	/^MF_VIS50, \/\/Vision -10$/;"	e	enum:m_flag
MF_WARM	mtype.h	/^MF_WARM,	\/\/ Warm blooded$/;"	e	enum:m_flag
MF_WEBWALK	mtype.h	/^MF_WEBWALK,	\/\/ Doesn't destroy webs$/;"	e	enum:m_flag
MGOAL_ASSASSINATE	mission.h	/^ MGOAL_ASSASSINATE,	\/\/ Kill a given NPC$/;"	e	enum:mission_goal
MGOAL_FIND_ANY_ITEM	mission.h	/^ MGOAL_FIND_ANY_ITEM,	\/\/ Find an item tagged with this mission$/;"	e	enum:mission_goal
MGOAL_FIND_ITEM	mission.h	/^ MGOAL_FIND_ITEM,	\/\/ Find an item of a given type$/;"	e	enum:mission_goal
MGOAL_FIND_MONSTER	mission.h	/^ MGOAL_FIND_MONSTER,	\/\/ Find and retrieve a friendly monster$/;"	e	enum:mission_goal
MGOAL_FIND_NPC	mission.h	/^ MGOAL_FIND_NPC,	\/\/ Find a given NPC$/;"	e	enum:mission_goal
MGOAL_GO_TO	mission.h	/^ MGOAL_GO_TO,		\/\/ Reach a certain overmap tile$/;"	e	enum:mission_goal
MGOAL_KILL_MONSTER	mission.h	/^ MGOAL_KILL_MONSTER,	\/\/ Kill a particular hostile monster$/;"	e	enum:mission_goal
MGOAL_NULL	mission.h	/^ MGOAL_NULL = 0,$/;"	e	enum:mission_goal
MIN	monmove.cpp	17;"	d	file:
MINIMAP_HEIGHT	game.h	33;"	d
MINIMAP_WIDTH	game.h	34;"	d
MINUTES	calendar.h	10;"	d
MIN_ADDICTION_LEVEL	addiction.h	9;"	d
MIN_ANT_SIZE	overmap.cpp	24;"	d	file:
MIN_DISEASE_AGE	disease.h	9;"	d
MIN_GOO_SIZE	overmap.cpp	26;"	d	file:
MIN_MORALE_CRAFT	morale.h	7;"	d
MIN_MORALE_READ	morale.h	6;"	d
MIN_RIFT_SIZE	overmap.cpp	28;"	d	file:
MISSION	missiondef.cpp	7;"	d	file:
MISSION_GET_ANTIBIOTICS	mission.h	/^ MISSION_GET_ANTIBIOTICS,$/;"	e	enum:mission_id
MISSION_GET_SOFTWARE	mission.h	/^ MISSION_GET_SOFTWARE,$/;"	e	enum:mission_id
MISSION_GET_ZOMBIE_BLOOD_ANAL	mission.h	/^ MISSION_GET_ZOMBIE_BLOOD_ANAL,$/;"	e	enum:mission_id
MISSION_KILL_ZOMBIE_MOM	mission.h	/^ MISSION_KILL_ZOMBIE_MOM,$/;"	e	enum:mission_id
MISSION_NULL	mission.h	/^ MISSION_NULL,$/;"	e	enum:mission_id
MISSION_REACH_SAFETY	mission.h	/^ MISSION_REACH_SAFETY,$/;"	e	enum:mission_id
MISSION_RESCUE_DOG	mission.h	/^ MISSION_RESCUE_DOG,$/;"	e	enum:mission_id
MNULL	enums.h	/^MNULL = 0,$/;"	e	enum:material
MONINFO_HEIGHT	game.h	35;"	d
MONINFO_WIDTH	game.h	36;"	d
MONSTER_FOLLOW_DIST	monmove.cpp	20;"	d	file:
MOONLIGHT_LEVEL	calendar.h	27;"	d
MOON_FULL	calendar.h	/^MOON_FULL$/;"	e	enum:moon_phase
MOON_HALF	calendar.h	/^MOON_HALF,$/;"	e	enum:moon_phase
MOON_NEW	calendar.h	/^MOON_NEW = 0,$/;"	e	enum:moon_phase
MORALE_BOOK	morale.h	/^ MORALE_BOOK,$/;"	e	enum:morale_type
MORALE_CANNIBAL	morale.h	/^ MORALE_CANNIBAL,$/;"	e	enum:morale_type
MORALE_COLD	morale.h	/^ MORALE_COLD,$/;"	e	enum:morale_type
MORALE_CRAVING_ALCOHOL	morale.h	/^ MORALE_CRAVING_ALCOHOL,$/;"	e	enum:morale_type
MORALE_CRAVING_CAFFEINE	morale.h	/^ MORALE_CRAVING_CAFFEINE,$/;"	e	enum:morale_type
MORALE_CRAVING_COCAINE	morale.h	/^ MORALE_CRAVING_COCAINE,$/;"	e	enum:morale_type
MORALE_CRAVING_CRACK	morale.h	/^ MORALE_CRAVING_CRACK,$/;"	e	enum:morale_type
MORALE_CRAVING_NICOTINE	morale.h	/^ MORALE_CRAVING_NICOTINE,$/;"	e	enum:morale_type
MORALE_CRAVING_OPIATE	morale.h	/^ MORALE_CRAVING_OPIATE,$/;"	e	enum:morale_type
MORALE_CRAVING_SPEED	morale.h	/^ MORALE_CRAVING_SPEED,$/;"	e	enum:morale_type
MORALE_FEELING_BAD	morale.h	/^ MORALE_FEELING_BAD,$/;"	e	enum:morale_type
MORALE_FEELING_GOOD	morale.h	/^ MORALE_FEELING_GOOD,$/;"	e	enum:morale_type
MORALE_FOOD_BAD	morale.h	/^ MORALE_FOOD_BAD,$/;"	e	enum:morale_type
MORALE_FOOD_GOOD	morale.h	/^ MORALE_FOOD_GOOD,$/;"	e	enum:morale_type
MORALE_FOOD_HOT	morale.h	/^ MORALE_FOOD_HOT,$/;"	e	enum:morale_type
MORALE_HOT	morale.h	/^ MORALE_HOT,$/;"	e	enum:morale_type
MORALE_KILLED_FRIEND	morale.h	/^ MORALE_KILLED_FRIEND,$/;"	e	enum:morale_type
MORALE_KILLED_INNOCENT	morale.h	/^ MORALE_KILLED_INNOCENT,$/;"	e	enum:morale_type
MORALE_KILLED_MONSTER	morale.h	/^ MORALE_KILLED_MONSTER,$/;"	e	enum:morale_type
MORALE_MARLOSS	morale.h	/^ MORALE_MARLOSS,$/;"	e	enum:morale_type
MORALE_MOODSWING	morale.h	/^ MORALE_MOODSWING,$/;"	e	enum:morale_type
MORALE_MUSIC	morale.h	/^ MORALE_MUSIC,$/;"	e	enum:morale_type
MORALE_NULL	morale.h	/^ MORALE_NULL = 0,$/;"	e	enum:morale_type
MORALE_SCREAM	morale.h	/^ MORALE_SCREAM,$/;"	e	enum:morale_type
MORALE_VEGETARIAN	morale.h	/^ MORALE_VEGETARIAN,$/;"	e	enum:morale_type
MORALE_WET	morale.h	/^ MORALE_WET,$/;"	e	enum:morale_type
MS_HUGE	mtype.h	/^MS_HUGE		\/\/ TAAAANK$/;"	e	enum:m_size
MS_LARGE	mtype.h	/^MS_LARGE,	\/\/ Cow$/;"	e	enum:m_size
MS_MEDIUM	mtype.h	/^MS_MEDIUM,	\/\/ Human$/;"	e	enum:m_size
MS_SMALL	mtype.h	/^MS_SMALL,	\/\/ Half human$/;"	e	enum:m_size
MS_TINY	mtype.h	/^MS_TINY = 0,	\/\/ Rodent$/;"	e	enum:m_size
MTRIG_FIRE	mtype.h	/^MTRIG_FIRE,		\/\/ Fire nearby$/;"	e	enum:monster_trigger
MTRIG_FRIEND_ATTACKED	mtype.h	/^MTRIG_FRIEND_ATTACKED,	\/\/ A monster of the same type attacked$/;"	e	enum:monster_trigger
MTRIG_FRIEND_DIED	mtype.h	/^MTRIG_FRIEND_DIED,	\/\/ A monster of the same type died$/;"	e	enum:monster_trigger
MTRIG_HURT	mtype.h	/^MTRIG_HURT,		\/\/ We are hurt$/;"	e	enum:monster_trigger
MTRIG_MEAT	mtype.h	/^MTRIG_MEAT,		\/\/ Meat or a corpse nearby$/;"	e	enum:monster_trigger
MTRIG_NULL	mtype.h	/^MTRIG_NULL = 0,$/;"	e	enum:monster_trigger
MTRIG_PLAYER_CLOSE	mtype.h	/^MTRIG_PLAYER_CLOSE,	\/\/ The player gets within a few tiles$/;"	e	enum:monster_trigger
MTRIG_PLAYER_WEAK	mtype.h	/^MTRIG_PLAYER_WEAK,	\/\/ The player is hurt$/;"	e	enum:monster_trigger
MTRIG_SOUND	mtype.h	/^MTRIG_SOUND,		\/\/ Heard a sound$/;"	e	enum:monster_trigger
MTRIG_TIME	mtype.h	/^MTRIG_TIME,		\/\/ Random over time.$/;"	e	enum:monster_trigger
MUTATION	mutation_data.cpp	4;"	d	file:
MUTCAT_BEAST	mutation.h	/^ MUTCAT_BEAST,$/;"	e	enum:mutation_category
MUTCAT_BIRD	mutation.h	/^ MUTCAT_BIRD,$/;"	e	enum:mutation_category
MUTCAT_CATTLE	mutation.h	/^ MUTCAT_CATTLE,$/;"	e	enum:mutation_category
MUTCAT_CEPHALOPOD	mutation.h	/^ MUTCAT_CEPHALOPOD,$/;"	e	enum:mutation_category
MUTCAT_FISH	mutation.h	/^ MUTCAT_FISH,$/;"	e	enum:mutation_category
MUTCAT_INSECT	mutation.h	/^ MUTCAT_INSECT,$/;"	e	enum:mutation_category
MUTCAT_LIZARD	mutation.h	/^ MUTCAT_LIZARD,$/;"	e	enum:mutation_category
MUTCAT_NULL	mutation.h	/^ MUTCAT_NULL = 0,$/;"	e	enum:mutation_category
MUTCAT_PLANT	mutation.h	/^ MUTCAT_PLANT,$/;"	e	enum:mutation_category
MUTCAT_RAT	mutation.h	/^ MUTCAT_RAT,$/;"	e	enum:mutation_category
MUTCAT_SLIME	mutation.h	/^ MUTCAT_SLIME,$/;"	e	enum:mutation_category
MUTCAT_SPIDER	mutation.h	/^ MUTCAT_SPIDER,$/;"	e	enum:mutation_category
MUTCAT_TROGLO	mutation.h	/^ MUTCAT_TROGLO,$/;"	e	enum:mutation_category
Monster2Group	mongroupdef.cpp	/^std::string MonsterGroupManager::Monster2Group(mon_id monster)$/;"	f	class:MonsterGroupManager
MonsterGroup	mongroup.h	/^struct MonsterGroup$/;"	s
MonsterGroupManager	mongroup.h	/^class MonsterGroupManager$/;"	c
NC_BOUNTY_HUNTER	npc.h	/^ NC_BOUNTY_HUNTER, \/\/ Resourceful and well-armored$/;"	e	enum:npc_class
NC_COWBOY	npc.h	/^ NC_COWBOY,	\/\/ Gunslinger and survivalist$/;"	e	enum:npc_class
NC_DOCTOR	npc.h	/^ NC_DOCTOR,	\/\/ Found in towns, or roaming.  Stays in the clinic.$/;"	e	enum:npc_class
NC_HACKER	npc.h	/^ NC_HACKER,	\/\/ Weak in combat but has hacking skills and equipment$/;"	e	enum:npc_class
NC_MAX	npc.h	/^ NC_MAX$/;"	e	enum:npc_class
NC_NINJA	npc.h	/^ NC_NINJA,	\/\/ Specializes in unarmed combat, carries few items$/;"	e	enum:npc_class
NC_NONE	npc.h	/^ NC_NONE,$/;"	e	enum:npc_class
NC_SCIENTIST	npc.h	/^ NC_SCIENTIST,	\/\/ Uses intelligence-based skills and high-tech items$/;"	e	enum:npc_class
NC_SHOPKEEP	npc.h	/^ NC_SHOPKEEP,	\/\/ Found in towns.  Stays in his shop mostly.$/;"	e	enum:npc_class
NC_TRADER	npc.h	/^ NC_TRADER,	\/\/ Roaming trader, journeying between towns.$/;"	e	enum:npc_class
NF_BOOKWORM	npc.h	/^ NF_BOOKWORM,$/;"	e	enum:npc_flag
NF_DRUGGIE	npc.h	/^ NF_DRUGGIE,$/;"	e	enum:npc_flag
NF_FOOD_HOARDER	npc.h	/^ NF_FOOD_HOARDER,$/;"	e	enum:npc_flag
NF_MAX	npc.h	/^ NF_MAX$/;"	e	enum:npc_flag
NF_MAX	npc.h	/^ unsigned flags : NF_MAX;$/;"	m	class:npc
NF_NULL	npc.h	/^ NF_NULL,$/;"	e	enum:npc_flag
NF_TECHNOPHILE	npc.h	/^ NF_TECHNOPHILE,$/;"	e	enum:npc_flag
NORTH	line.h	/^NORTH = 0,$/;"	e	enum:direction
NORTHEAST	line.h	/^NORTHEAST,$/;"	e	enum:direction
NORTHWEST	line.h	/^NORTHWEST$/;"	e	enum:direction
NPCATT_DEFEND	npc.h	/^ NPCATT_DEFEND,		\/\/ Kill monsters that threaten the player$/;"	e	enum:npc_attitude
NPCATT_FLEE	npc.h	/^ NPCATT_FLEE,		\/\/ Get away from the player$/;"	e	enum:npc_attitude
NPCATT_FOLLOW	npc.h	/^ NPCATT_FOLLOW,		\/\/ Follow the player$/;"	e	enum:npc_attitude
NPCATT_FOLLOW_RUN	npc.h	/^ NPCATT_FOLLOW_RUN,	\/\/ Follow the player, don't shoot monsters$/;"	e	enum:npc_attitude
NPCATT_HEAL	npc.h	/^ NPCATT_HEAL,		\/\/ Get to the player and heal them$/;"	e	enum:npc_attitude
NPCATT_KIDNAPPED	npc.h	/^ NPCATT_KIDNAPPED,	\/\/ Special; kidnapped NPC as part of mission$/;"	e	enum:npc_attitude
NPCATT_KILL	npc.h	/^ NPCATT_KILL,		\/\/ Kill the player$/;"	e	enum:npc_attitude
NPCATT_LEAD	npc.h	/^ NPCATT_LEAD,		\/\/ Lead the player, wait for them if they're behind$/;"	e	enum:npc_attitude
NPCATT_MAX	npc.h	/^ NPCATT_MAX$/;"	e	enum:npc_attitude
NPCATT_MISSING	npc.h	/^ NPCATT_MISSING,	\/\/ Special; missing NPC as part of mission$/;"	e	enum:npc_attitude
NPCATT_MUG	npc.h	/^ NPCATT_MUG,		\/\/ Mug the player$/;"	e	enum:npc_attitude
NPCATT_NULL	npc.h	/^ NPCATT_NULL = 0,	\/\/ Don't care\/ignoring player$/;"	e	enum:npc_attitude
NPCATT_SLAVE	npc.h	/^ NPCATT_SLAVE,		\/\/ Following the player under duress$/;"	e	enum:npc_attitude
NPCATT_TALK	npc.h	/^ NPCATT_TALK,		\/\/ Move to and talk to player$/;"	e	enum:npc_attitude
NPCATT_TRADE	npc.h	/^ NPCATT_TRADE,		\/\/ Move to and trade with player$/;"	e	enum:npc_attitude
NPCATT_WAIT	npc.h	/^ NPCATT_WAIT,		\/\/ Waiting for the player$/;"	e	enum:npc_attitude
NPCATT_WAIT_FOR_LEAVE	npc.h	/^ NPCATT_WAIT_FOR_LEAVE,	\/\/ Attack the player if our patience runs out$/;"	e	enum:npc_attitude
NPC_DANGER_LEVEL	npc.h	15;"	d
NPC_DANGER_VERY_LOW	npc.h	16;"	d
NPC_HI_VALUE	npc.h	13;"	d
NPC_LOW_VALUE	npc.h	12;"	d
NPC_MISSION_BASE	npc.h	/^ NPC_MISSION_BASE, \/\/ Base Mission: unassigned$/;"	e	enum:npc_mission
NPC_MISSION_KIDNAPPED	npc.h	/^ NPC_MISSION_KIDNAPPED,	\/\/ Special; was kidnapped, to be rescued by player$/;"	e	enum:npc_mission
NPC_MISSION_MISSING	npc.h	/^ NPC_MISSION_MISSING,	\/\/ Special; following player to finish mission$/;"	e	enum:npc_mission
NPC_MISSION_NULL	npc.h	/^ NPC_MISSION_NULL = 0,	\/\/ Nothing in particular$/;"	e	enum:npc_mission
NPC_MISSION_RESCUE_U	npc.h	/^ NPC_MISSION_RESCUE_U,	\/\/ Find the player and aid them$/;"	e	enum:npc_mission
NPC_MISSION_SHELTER	npc.h	/^ NPC_MISSION_SHELTER,	\/\/ Stay in shelter, introduce player to game$/;"	e	enum:npc_mission
NPC_MISSION_SHOPKEEP	npc.h	/^ NPC_MISSION_SHOPKEEP,	\/\/ Stay still unless combat or something and sell stuff$/;"	e	enum:npc_mission
NPC_VERY_HI_VALUE	npc.h	14;"	d
NUMALIGN	defense.cpp	17;"	d	file:
NUM_ACTIONS	action.h	/^NUM_ACTIONS$/;"	e	enum:action_id
NUM_ACTIVITIES	pldata.h	/^ NUM_ACTIVITIES$/;"	e	enum:activity_type
NUM_AEAS	artifact.h	/^ NUM_AEAS$/;"	e	enum:art_effect_active
NUM_AEPS	artifact.h	/^ NUM_AEPS$/;"	e	enum:art_effect_passive
NUM_ALT_ATTACK_ITEMS	npcmove.cpp	23;"	d	file:
NUM_AMMO_EFFECTS	itype.h	/^NUM_AMMO_EFFECTS$/;"	e	enum:ammo_effect
NUM_AMMO_TYPES	itype.h	/^NUM_AMMO_TYPES$/;"	e	enum:ammotype
NUM_ARMORMODS	artifactdata.h	/^ NUM_ARMORMODS$/;"	e	enum:artifact_armor_mod
NUM_ARTARMFORMS	artifactdata.h	/^ NUM_ARTARMFORMS$/;"	e	enum:artifact_armor_form
NUM_ARTCS	artifact.h	/^ NUM_ARTCS$/;"	e	enum:art_charge
NUM_ARTTOOLFORMS	artifactdata.h	/^ NUM_ARTTOOLFORMS$/;"	e	enum:artifact_tool_form
NUM_ARTWEAPS	artifactdata.h	/^ NUM_ARTWEAPS$/;"	e	enum:artifact_weapon_type
NUM_ART_ADJS	artifactdata.h	471;"	d
NUM_ART_NOUNS	artifactdata.h	479;"	d
NUM_BIGNESS_ASPECTS	itype.h	/^NUM_BIGNESS_ASPECTS,$/;"	e	enum:bigness_property_aspect
NUM_CARAVAN_CATEGORIES	gamemode.h	/^NUM_CARAVAN_CATEGORIES$/;"	e	enum:caravan_category
NUM_CC	crafting.h	/^NUM_CC$/;"	e	enum:craft_cat
NUM_COMPUTER_ACTIONS	computer.h	/^ NUM_COMPUTER_ACTIONS$/;"	e	enum:computer_action
NUM_COMPUTER_FAILURES	computer.h	/^ NUM_COMPUTER_FAILURES$/;"	e	enum:computer_failure
NUM_DEFENSE_LOCATIONS	gamemode.h	/^NUM_DEFENSE_LOCATIONS$/;"	e	enum:defense_location
NUM_DEFENSE_STYLES	gamemode.h	/^NUM_DEFENSE_STYLES$/;"	e	enum:defense_style
NUM_ESCAPE_ITEMS	npcmove.cpp	13;"	d	file:
NUM_EVENT_TYPES	event.h	/^ NUM_EVENT_TYPES$/;"	e	enum:event_type
NUM_FACGOALS	faction.h	/^ NUM_FACGOALS$/;"	e	enum:faction_goal
NUM_FACJOBS	faction.h	/^ NUM_FACJOBS$/;"	e	enum:faction_job
NUM_FACVALS	faction.h	/^ NUM_FACVALS$/;"	e	enum:faction_value
NUM_FAVOR_TYPES	npc.h	/^ NUM_FAVOR_TYPES$/;"	e	enum:npc_favor_type
NUM_FOREST	overmap.cpp	22;"	d	file:
NUM_ITEM_FLAGS	item.h	/^ unsigned item_flags : NUM_ITEM_FLAGS;		\/\/ generic item specific flags$/;"	m	class:item
NUM_ITEM_FLAGS	itype.h	/^NUM_ITEM_FLAGS$/;"	e	enum:item_flag
NUM_LESSONS	gamemode.h	/^NUM_LESSONS$/;"	e	enum:tut_lesson
NUM_MGOAL	mission.h	/^ NUM_MGOAL$/;"	e	enum:mission_goal
NUM_MISSION_IDS	mission.h	/^ NUM_MISSION_IDS$/;"	e	enum:mission_id
NUM_MONSTER_ATTITUDES	monster.h	/^NUM_MONSTER_ATTITUDES$/;"	e	enum:monster_attitude
NUM_MONSTER_EFFECTS	monster.h	/^NUM_MONSTER_EFFECTS$/;"	e	enum:monster_effect_type
NUM_MORALE_TYPES	morale.h	/^ NUM_MORALE_TYPES$/;"	e	enum:morale_type
NUM_MUTATION_CATEGORIES	mutation.h	/^ NUM_MUTATION_CATEGORIES$/;"	e	enum:mutation_category
NUM_NPC_MISSIONS	npc.h	/^ NUM_NPC_MISSIONS$/;"	e	enum:npc_mission
NUM_OMSPECS	omdata.h	/^ NUM_OMSPECS$/;"	e	enum:omspec_id
NUM_OMS_FLAGS	omdata.h	/^NUM_OMS_FLAGS$/;"	e	enum:omspec_flag
NUM_OPTION_KEYS	options.h	/^NUM_OPTION_KEYS$/;"	e	enum:option_key
NUM_ORIGIN	mission.h	/^ NUM_ORIGIN$/;"	e	enum:mission_origin
NUM_SOFTWARE_TYPES	itype.h	/^NUM_SOFTWARE_TYPES$/;"	e	enum:software_type
NUM_SPECIAL_GAMES	gamemode.h	/^NUM_SPECIAL_GAMES$/;"	e	enum:special_game_id
NUM_STATIC_TAGS	dialogue.h	387;"	d
NUM_TALK_TOPICS	npc.h	/^ NUM_TALK_TOPICS$/;"	e	enum:talk_topic
NUM_TALK_TRIALS	dialogue.h	/^ NUM_TALK_TRIALS$/;"	e	enum:talk_trial
NUM_TECHNIQUES	itype.h	/^NUM_TECHNIQUES$/;"	e	enum:technique_id
NUM_WEATHER_TYPES	weather.h	/^ NUM_WEATHER_TYPES$/;"	e	enum:weather_type
N_MONSTER_TRIGGERS	mtype.h	/^N_MONSTER_TRIGGERS$/;"	e	enum:monster_trigger
Name	name.cpp	/^Name::Name() {$/;"	f	class:Name
Name	name.cpp	/^Name::Name(std::string name, uint32_t flags) {$/;"	f	class:Name
Name	name.h	/^class Name {$/;"	c
NameGenerator	name.cpp	/^NameGenerator::NameGenerator() {$/;"	f	class:NameGenerator
NameGenerator	name.h	/^class NameGenerator {$/;"	c
Nothing	input.h	/^	Nothing,$/;"	e	enum:InputEvent
NullBuf	debug.cpp	/^ NullBuf() {}$/;"	f	struct:NullBuf
NullBuf	debug.cpp	/^struct NullBuf : public std::streambuf$/;"	s	file:
OBJS	Makefile	/^OBJS = $(patsubst %,$(ODIR)\/%,$(_OBJS))$/;"	m
ODIR	Makefile	/^  ODIR = $(W32ODIR)$/;"	m
ODIR	Makefile	/^ODIR = obj$/;"	m
OK	catacurse.h	110;"	d
OMAPX	omdata.h	13;"	d
OMAPY	omdata.h	14;"	d
OMSPEC_ANTHILL	omdata.h	/^ OMSPEC_ANTHILL,$/;"	e	enum:omspec_id
OMSPEC_BUNKER	omdata.h	/^ OMSPEC_BUNKER,$/;"	e	enum:omspec_id
OMSPEC_CABIN	omdata.h	/^ OMSPEC_CABIN,$/;"	e	enum:omspec_id
OMSPEC_CAVE	omdata.h	/^ OMSPEC_CAVE,$/;"	e	enum:omspec_id
OMSPEC_CRATER	omdata.h	/^ OMSPEC_CRATER,$/;"	e	enum:omspec_id
OMSPEC_FARM	omdata.h	/^ OMSPEC_FARM,$/;"	e	enum:omspec_id
OMSPEC_FEMA	omdata.h	/^ OMSPEC_FEMA,$/;"	e	enum:omspec_id
OMSPEC_FREQ	omdata.h	358;"	d
OMSPEC_FUNGUS	omdata.h	/^ OMSPEC_FUNGUS,$/;"	e	enum:omspec_id
OMSPEC_GAS	omdata.h	/^ OMSPEC_GAS,$/;"	e	enum:omspec_id
OMSPEC_HIVE	omdata.h	/^ OMSPEC_HIVE,$/;"	e	enum:omspec_id
OMSPEC_HOSPITAL	omdata.h	/^ OMSPEC_HOSPITAL,$/;"	e	enum:omspec_id
OMSPEC_HOUSE	omdata.h	/^ OMSPEC_HOUSE,$/;"	e	enum:omspec_id
OMSPEC_LAB	omdata.h	/^ OMSPEC_LAB,$/;"	e	enum:omspec_id
OMSPEC_LAKE	omdata.h	/^ OMSPEC_LAKE,$/;"	e	enum:omspec_id
OMSPEC_LMOE	omdata.h	/^ OMSPEC_LMOE,$/;"	e	enum:omspec_id
OMSPEC_MANSION	omdata.h	/^ OMSPEC_MANSION,$/;"	e	enum:omspec_id
OMSPEC_MANSION_WILD	omdata.h	/^ OMSPEC_MANSION_WILD,$/;"	e	enum:omspec_id
OMSPEC_MEGASTORE	omdata.h	/^ OMSPEC_MEGASTORE,$/;"	e	enum:omspec_id
OMSPEC_MINE	omdata.h	/^ OMSPEC_MINE,$/;"	e	enum:omspec_id
OMSPEC_OUTPOST	omdata.h	/^ OMSPEC_OUTPOST,$/;"	e	enum:omspec_id
OMSPEC_RADIO	omdata.h	/^ OMSPEC_RADIO,$/;"	e	enum:omspec_id
OMSPEC_SEWAGE	omdata.h	/^ OMSPEC_SEWAGE,$/;"	e	enum:omspec_id
OMSPEC_SHELTER	omdata.h	/^ OMSPEC_SHELTER,$/;"	e	enum:omspec_id
OMSPEC_SILO	omdata.h	/^ OMSPEC_SILO,$/;"	e	enum:omspec_id
OMSPEC_SLIME	omdata.h	/^ OMSPEC_SLIME,$/;"	e	enum:omspec_id
OMSPEC_SPIDER	omdata.h	/^ OMSPEC_SPIDER,$/;"	e	enum:omspec_id
OMSPEC_TEMPLE	omdata.h	/^ OMSPEC_TEMPLE,$/;"	e	enum:omspec_id
OMSPEC_TOXIC_DUMP	omdata.h	/^ OMSPEC_TOXIC_DUMP,$/;"	e	enum:omspec_id
OMSPEC_TRIFFID	omdata.h	/^ OMSPEC_TRIFFID,$/;"	e	enum:omspec_id
OMS_FLAG_3X3	omdata.h	/^OMS_FLAG_3X3,		\/\/ 3x3 square, e.g. bee hive$/;"	e	enum:omspec_flag
OMS_FLAG_3X3_SECOND	omdata.h	/^OMS_FLAG_3X3_SECOND,	\/\/ 3x3 square, made of the tile AFTER the main one$/;"	e	enum:omspec_flag
OMS_FLAG_BIG	omdata.h	/^OMS_FLAG_BIG,		\/\/ As big as possible$/;"	e	enum:omspec_flag
OMS_FLAG_BLOB	omdata.h	/^OMS_FLAG_BLOB,		\/\/ Randomly shaped blob$/;"	e	enum:omspec_flag
OMS_FLAG_CLASSIC	omdata.h	/^OMS_FLAG_CLASSIC, \/\/ Allow this location to spawn in classic mode$/;"	e	enum:omspec_flag
OMS_FLAG_DIRT_LOT	omdata.h	/^OMS_FLAG_DIRT_LOT,      \/\/ Dirt lot flag for specials$/;"	e	enum:omspec_flag
OMS_FLAG_NULL	omdata.h	/^OMS_FLAG_NULL = 0,$/;"	e	enum:omspec_flag
OMS_FLAG_PARKING_LOT	omdata.h	/^OMS_FLAG_PARKING_LOT,	\/\/ Add a road_point to the north of here$/;"	e	enum:omspec_flag
OMS_FLAG_ROAD	omdata.h	/^OMS_FLAG_ROAD,		\/\/ Add a road_point here; connect to towns etc.$/;"	e	enum:omspec_flag
OMS_FLAG_ROTATE_RANDOM	omdata.h	/^OMS_FLAG_ROTATE_RANDOM, \/\/ Rotate randomly--assumes 3 following rotations$/;"	e	enum:omspec_flag
OMS_FLAG_ROTATE_ROAD	omdata.h	/^OMS_FLAG_ROTATE_ROAD,	\/\/ Rotate to face road--assumes 3 following rotations$/;"	e	enum:omspec_flag
OMZONE_BOMBED	omdata.h	/^ OMZONE_BOMBED,		\/\/ Terrain is heavily destroyed$/;"	e	enum:overmap_zone
OMZONE_BOTS	omdata.h	/^ OMZONE_BOTS,		\/\/ Home of the bots TODO$/;"	e	enum:overmap_zone
OMZONE_CITY	omdata.h	/^ OMZONE_CITY,		\/\/ Basic city; place corpses$/;"	e	enum:overmap_zone
OMZONE_CORRUPTED	omdata.h	/^ OMZONE_CORRUPTED,	\/\/ Fabric of space is weak TODO$/;"	e	enum:overmap_zone
OMZONE_FLOODED	omdata.h	/^ OMZONE_FLOODED,	\/\/ Flooded out TODO$/;"	e	enum:overmap_zone
OMZONE_FORTIFIED	omdata.h	/^ OMZONE_FORTIFIED,	\/\/ Boarded up windows &c TODO$/;"	e	enum:overmap_zone
OMZONE_FUNGAL	omdata.h	/^ OMZONE_FUNGAL,		\/\/ Overgrown with fungus TODO$/;"	e	enum:overmap_zone
OMZONE_IRRADIATED	omdata.h	/^ OMZONE_IRRADIATED,	\/\/ Lots of radioactivity TODO$/;"	e	enum:overmap_zone
OMZONE_MAX	omdata.h	/^ OMZONE_MAX$/;"	e	enum:overmap_zone
OMZONE_MILITARIZED	omdata.h	/^ OMZONE_MILITARIZED,	\/\/ _Was_ occupied by the military TODO$/;"	e	enum:overmap_zone
OMZONE_MUTATED	omdata.h	/^ OMZONE_MUTATED,	\/\/ Home of mutation experiments - mutagen & monsters TODO$/;"	e	enum:overmap_zone
OMZONE_NULL	omdata.h	/^ OMZONE_NULL = 0,$/;"	e	enum:overmap_zone
OMZONE_OVERGROWN	omdata.h	/^ OMZONE_OVERGROWN,	\/\/ Lots of plants, etc. TODO$/;"	e	enum:overmap_zone
OMZONE_TRAPPED	omdata.h	/^ OMZONE_TRAPPED,	\/\/ Heavily booby-trapped TODO$/;"	e	enum:overmap_zone
OPTIONS	options.cpp	/^option_table OPTIONS;$/;"	v
OPT_24_HOUR	options.h	/^OPT_24_HOUR, \/\/ 24 hour time$/;"	e	enum:option_key
OPT_AUTOSAFEMODE	options.h	/^OPT_AUTOSAFEMODE, \/\/ Autosafemode on by default?$/;"	e	enum:option_key
OPT_AUTOSAFEMODETURNS	options.h	/^OPT_AUTOSAFEMODETURNS, \/\/Number of turns untill safemode kicks back in$/;"	e	enum:option_key
OPT_AUTOSAVE	options.h	/^OPT_AUTOSAVE, \/\/ Automatically save the game on intervals.$/;"	e	enum:option_key
OPT_CLASSIC_ZOMBIES	options.h	/^OPT_CLASSIC_ZOMBIES, \/\/ Only spawn the more classic zombies$/;"	e	enum:option_key
OPT_DELETE_WORLD	options.h	/^OPT_DELETE_WORLD, \/\/ Delete workd every time New Character is created$/;"	e	enum:option_key
OPT_DROP_EMPTY	options.h	/^OPT_DROP_EMPTY, \/\/ auto drop empty containers after use$/;"	e	enum:option_key
OPT_FORCE_YN	options.h	/^OPT_FORCE_YN, \/\/ Y\/N versus y\/n$/;"	e	enum:option_key
OPT_GRADUAL_NIGHT_LIGHT	options.h	/^OPT_GRADUAL_NIGHT_LIGHT, \/\/ be so cool at night :)$/;"	e	enum:option_key
OPT_INITIAL_POINTS	options.h	/^OPT_INITIAL_POINTS, \/\/ Set the number of character points$/;"	e	enum:option_key
OPT_INITIAL_TIME	options.h	/^OPT_INITIAL_TIME, \/\/ Sets the starting hour (0-24)$/;"	e	enum:option_key
OPT_NO_CBLINK	options.h	/^OPT_NO_CBLINK, \/\/ No bright backgrounds$/;"	e	enum:option_key
OPT_NULL	options.h	/^OPT_NULL = 0,$/;"	e	enum:option_key
OPT_QUERY_DISASSEMBLE	options.h	/^OPT_QUERY_DISASSEMBLE, \/\/ Query before disassembling items$/;"	e	enum:option_key
OPT_SAFEMODE	options.h	/^OPT_SAFEMODE, \/\/ Safemode on by default?$/;"	e	enum:option_key
OPT_SAFEMODEPROXIMITY	options.h	/^OPT_SAFEMODEPROXIMITY, \/\/Range after which safemode kicks in$/;"	e	enum:option_key
OPT_SKILL_RUST	options.h	/^OPT_SKILL_RUST, \/\/ level of skill rust$/;"	e	enum:option_key
OPT_SNAP_TO_TARGET	options.h	/^OPT_SNAP_TO_TARGET, \/\/ game::firing snaps to target$/;"	e	enum:option_key
OPT_STATIC_SPAWN	options.h	/^OPT_STATIC_SPAWN, \/\/ Makes zombies spawn using the new static system$/;"	e	enum:option_key
OPT_USE_CELSIUS	options.h	/^OPT_USE_CELSIUS, \/\/ Display temp as C not F$/;"	e	enum:option_key
OPT_USE_METRIC_SYS	options.h	/^OPT_USE_METRIC_SYS, \/\/ Display speed as Km\/h not mph$/;"	e	enum:option_key
OPT_VIEWPORT_X	options.h	/^OPT_VIEWPORT_X, \/\/ Set the width of the terrain window, in characters$/;"	e	enum:option_key
OPT_VIEWPORT_Y	options.h	/^OPT_VIEWPORT_Y, \/\/ Set the height of the terrain window, in characters$/;"	e	enum:option_key
ORIGINS	missiondef.cpp	11;"	d	file:
ORIGIN_ANY_NPC	mission.h	/^ ORIGIN_ANY_NPC,	\/\/ Any NPC$/;"	e	enum:mission_origin
ORIGIN_GAME_START	mission.h	/^ ORIGIN_GAME_START,	\/\/ Given when the game starts$/;"	e	enum:mission_origin
ORIGIN_NULL	mission.h	/^ ORIGIN_NULL = 0,$/;"	e	enum:mission_origin
ORIGIN_OPENER_NPC	mission.h	/^ ORIGIN_OPENER_NPC,	\/\/ NPC comes up to you when the game starts$/;"	e	enum:mission_origin
ORIGIN_SECONDARY	mission.h	/^ ORIGIN_SECONDARY,	\/\/ Given at the end of another mission$/;"	e	enum:mission_origin
OS	Makefile	/^OS  = $(shell uname -o)$/;"	m
OVERMAP_DEPTH	overmap.h	16;"	d
OVERMAP_HEIGHT	overmap.h	17;"	d
OVERMAP_LAYERS	overmap.h	18;"	d
OWED_VAL	npctalk.cpp	15;"	d	file:
PAPER	enums.h	/^STONE, PAPER, WOOD, PLASTIC, GLASS, IRON, STEEL, SILVER$/;"	e	enum:material
PART	veh_typedef.cpp	38;"	d	file:
PF_ADDICTIVE	pldata.h	/^ PF_ADDICTIVE,	\/\/ Better chance of addiction \/ longer addictive effects$/;"	e	enum:pl_flag
PF_ADRENALINE	pldata.h	/^ PF_ADRENALINE,	\/\/ Big bonuses when low on HP$/;"	e	enum:pl_flag
PF_ALBINO	pldata.h	/^ PF_ALBINO,\/\/$/;"	e	enum:pl_flag
PF_ANDROID	pldata.h	/^ PF_ANDROID,	\/\/ Start with two bionics (occasionally one)$/;"	e	enum:pl_flag
PF_ANIMALEMPATH	pldata.h	/^ PF_ANIMALEMPATH,\/\/ Animals attack less$/;"	e	enum:pl_flag
PF_ANTENNAE	pldata.h	/^ PF_ANTENNAE,\/\/$/;"	e	enum:pl_flag
PF_ANTLERS	pldata.h	/^ PF_ANTLERS,\/\/$/;"	e	enum:pl_flag
PF_ARM_TENTACLES	pldata.h	/^ PF_ARM_TENTACLES,$/;"	e	enum:pl_flag
PF_ARM_TENTACLES_4	pldata.h	/^ PF_ARM_TENTACLES_4,$/;"	e	enum:pl_flag
PF_ARM_TENTACLES_8	pldata.h	/^ PF_ARM_TENTACLES_8,$/;"	e	enum:pl_flag
PF_ASTHMA	pldata.h	/^ PF_ASTHMA,	\/\/ Occasionally needs medicine or suffers effects$/;"	e	enum:pl_flag
PF_BADBACK	pldata.h	/^ PF_BADBACK,	\/\/ Carries less$/;"	e	enum:pl_flag
PF_BADHEARING	pldata.h	/^ PF_BADHEARING,	\/\/ Max distance for heard sounds is halved$/;"	e	enum:pl_flag
PF_BARK	pldata.h	/^ PF_BARK,\/\/$/;"	e	enum:pl_flag
PF_BEAK	pldata.h	/^ PF_BEAK,\/\/$/;"	e	enum:pl_flag
PF_CANINE_EARS	pldata.h	/^ PF_CANINE_EARS,$/;"	e	enum:pl_flag
PF_CANNIBAL	pldata.h	/^ PF_CANNIBAL, \/\/ No penalty for eating human meat$/;"	e	enum:pl_flag
PF_CARNIVORE	pldata.h	/^ PF_CARNIVORE,\/\/$/;"	e	enum:pl_flag
PF_CHEMIMBALANCE	pldata.h	/^ PF_CHEMIMBALANCE,\/\/ Random tweaks to some values$/;"	e	enum:pl_flag
PF_CHITIN	pldata.h	/^ PF_CHITIN,\/\/$/;"	e	enum:pl_flag
PF_CHITIN2	pldata.h	/^ PF_CHITIN2,\/\/$/;"	e	enum:pl_flag
PF_CHITIN3	pldata.h	/^ PF_CHITIN3,\/\/$/;"	e	enum:pl_flag
PF_CLAWS	pldata.h	/^ PF_CLAWS,$/;"	e	enum:pl_flag
PF_COLDBLOOD	pldata.h	/^ PF_COLDBLOOD,\/\/$/;"	e	enum:pl_flag
PF_COLDBLOOD2	pldata.h	/^ PF_COLDBLOOD2,\/\/$/;"	e	enum:pl_flag
PF_COLDBLOOD3	pldata.h	/^ PF_COLDBLOOD3,\/\/$/;"	e	enum:pl_flag
PF_COMPOUND_EYES	pldata.h	/^ PF_COMPOUND_EYES,\/\/$/;"	e	enum:pl_flag
PF_DEFORMED	pldata.h	/^ PF_DEFORMED,$/;"	e	enum:pl_flag
PF_DEFORMED2	pldata.h	/^ PF_DEFORMED2,$/;"	e	enum:pl_flag
PF_DEFORMED3	pldata.h	/^ PF_DEFORMED3,$/;"	e	enum:pl_flag
PF_DEFT	pldata.h	/^ PF_DEFT,	\/\/ Less movement penalty for melee miss$/;"	e	enum:pl_flag
PF_DEX_UP	pldata.h	/^ PF_DEX_UP,$/;"	e	enum:pl_flag
PF_DEX_UP_2	pldata.h	/^ PF_DEX_UP_2,$/;"	e	enum:pl_flag
PF_DEX_UP_3	pldata.h	/^ PF_DEX_UP_3,$/;"	e	enum:pl_flag
PF_DEX_UP_4	pldata.h	/^ PF_DEX_UP_4,$/;"	e	enum:pl_flag
PF_DISIMMUNE	pldata.h	/^ PF_DISIMMUNE,$/;"	e	enum:pl_flag
PF_DISRESISTANT	pldata.h	/^ PF_DISRESISTANT,\/\/ Less likely to succumb to low health; TODO: Implement this$/;"	e	enum:pl_flag
PF_DRUNKEN	pldata.h	/^ PF_DRUNKEN,	\/\/ Having a drunk status improves melee combat$/;"	e	enum:pl_flag
PF_EYEBULGE	pldata.h	/^ PF_EYEBULGE,\/\/$/;"	e	enum:pl_flag
PF_FANGS	pldata.h	/^ PF_FANGS,\/\/$/;"	e	enum:pl_flag
PF_FASTHEALER	pldata.h	/^ PF_FASTHEALER,	\/\/ Heals faster$/;"	e	enum:pl_flag
PF_FASTHEALER2	pldata.h	/^ PF_FASTHEALER2,\/\/$/;"	e	enum:pl_flag
PF_FASTLEARNER	pldata.h	/^ PF_FASTLEARNER,\/\/ Better chance of skills leveling up$/;"	e	enum:pl_flag
PF_FASTREADER	pldata.h	/^ PF_FASTREADER,	\/\/ Reads books faster$/;"	e	enum:pl_flag
PF_FEATHERS	pldata.h	/^ PF_FEATHERS,\/\/$/;"	e	enum:pl_flag
PF_FLEET	pldata.h	/^ PF_FLEET,	\/\/ -15% terrain movement cost$/;"	e	enum:pl_flag
PF_FLEET2	pldata.h	/^ PF_FLEET2,\/\/$/;"	e	enum:pl_flag
PF_FORGETFUL	pldata.h	/^ PF_FORGETFUL,	\/\/ Skills decrement faster$/;"	e	enum:pl_flag
PF_FORKED_TONGUE	pldata.h	/^ PF_FORKED_TONGUE,\/\/$/;"	e	enum:pl_flag
PF_FUR	pldata.h	/^ PF_FUR,\/\/ TODO: Warmth effects$/;"	e	enum:pl_flag
PF_GILLS	pldata.h	/^ PF_GILLS,\/\/$/;"	e	enum:pl_flag
PF_GLASSJAW	pldata.h	/^ PF_GLASSJAW,	\/\/ Head HP is 15% lower$/;"	e	enum:pl_flag
PF_GOURMAND	pldata.h	/^ PF_GOURMAND,	\/\/ Faster eating, higher level of max satiated$/;"	e	enum:pl_flag
PF_GROWL	pldata.h	/^ PF_GROWL,\/\/$/;"	e	enum:pl_flag
PF_HEADBUMPS	pldata.h	/^ PF_HEADBUMPS,\/\/$/;"	e	enum:pl_flag
PF_HEAVYSLEEPER	pldata.h	/^ PF_HEAVYSLEEPER, \/\/ Sleeps in, won't wake up to sounds as easily$/;"	e	enum:pl_flag
PF_HERBIVORE	pldata.h	/^ PF_HERBIVORE,\/\/$/;"	e	enum:pl_flag
PF_HOARDER	pldata.h	/^ PF_HOARDER,	\/\/ Morale penalty when volume is less than max$/;"	e	enum:pl_flag
PF_HOLLOW_BONES	pldata.h	/^ PF_HOLLOW_BONES,\/\/$/;"	e	enum:pl_flag
PF_HOOVES	pldata.h	/^ PF_HOOVES,\/\/$/;"	e	enum:pl_flag
PF_HORNS	pldata.h	/^ PF_HORNS,\/\/$/;"	e	enum:pl_flag
PF_HORNS_CURLED	pldata.h	/^ PF_HORNS_CURLED,\/\/$/;"	e	enum:pl_flag
PF_HORNS_POINTED	pldata.h	/^ PF_HORNS_POINTED,\/\/$/;"	e	enum:pl_flag
PF_HUNGER	pldata.h	/^ PF_HUNGER,\/\/$/;"	e	enum:pl_flag
PF_ILLITERATE	pldata.h	/^ PF_ILLITERATE,	\/\/ Can not read books$/;"	e	enum:pl_flag
PF_INCONSPICUOUS	pldata.h	/^ PF_INCONSPICUOUS,\/\/ Less spawns due to timeouts$/;"	e	enum:pl_flag
PF_INFRARED	pldata.h	/^ PF_INFRARED,\/\/$/;"	e	enum:pl_flag
PF_INSOMNIA	pldata.h	/^ PF_INSOMNIA,	\/\/ Sleep may not happen$/;"	e	enum:pl_flag
PF_INT_UP	pldata.h	/^ PF_INT_UP,$/;"	e	enum:pl_flag
PF_INT_UP_2	pldata.h	/^ PF_INT_UP_2,$/;"	e	enum:pl_flag
PF_INT_UP_3	pldata.h	/^ PF_INT_UP_3,$/;"	e	enum:pl_flag
PF_INT_UP_4	pldata.h	/^ PF_INT_UP_4,$/;"	e	enum:pl_flag
PF_JITTERY	pldata.h	/^ PF_JITTERY,	\/\/ Get DI_SHAKES under some circumstances$/;"	e	enum:pl_flag
PF_LEAVES	pldata.h	/^ PF_LEAVES,\/\/$/;"	e	enum:pl_flag
PF_LEG_TENTACLES	pldata.h	/^ PF_LEG_TENTACLES,$/;"	e	enum:pl_flag
PF_LIGHTEATER	pldata.h	/^ PF_LIGHTEATER,	\/\/ Less hungry$/;"	e	enum:pl_flag
PF_LIGHTFUR	pldata.h	/^ PF_LIGHTFUR,\/\/ TODO: Warmth effects$/;"	e	enum:pl_flag
PF_LIGHTSTEP	pldata.h	/^ PF_LIGHTSTEP,	\/\/ Less noise from movement$/;"	e	enum:pl_flag
PF_LIGHTWEIGHT	pldata.h	/^ PF_LIGHTWEIGHT,\/\/ Longer DI_DRUNK and DI_HIGH$/;"	e	enum:pl_flag
PF_LIGHT_BONES	pldata.h	/^ PF_LIGHT_BONES,\/\/$/;"	e	enum:pl_flag
PF_MANDIBLES	pldata.h	/^ PF_MANDIBLES,\/\/$/;"	e	enum:pl_flag
PF_MARLOSS	pldata.h	/^ PF_MARLOSS,\/\/$/;"	e	enum:pl_flag
PF_MARTIAL_ARTS	pldata.h	/^ PF_MARTIAL_ARTS, \/\/ Start with a martial art$/;"	e	enum:pl_flag
PF_MASOCHIST	pldata.h	/^ PF_MASOCHIST,	\/\/ Morale boost from pain$/;"	e	enum:pl_flag
PF_MAX	pldata.h	/^ PF_MAX,$/;"	e	enum:pl_flag
PF_MAX2	pldata.h	/^ PF_MAX2$/;"	e	enum:pl_flag
PF_MEMBRANE	pldata.h	/^ PF_MEMBRANE,\/\/$/;"	e	enum:pl_flag
PF_MOODSWINGS	pldata.h	/^ PF_MOODSWINGS,	\/\/ Big random shifts in morale$/;"	e	enum:pl_flag
PF_MOUTH_FLAPS	pldata.h	/^ PF_MOUTH_FLAPS,\/\/$/;"	e	enum:pl_flag
PF_MOUTH_TENTACLES	pldata.h	/^ PF_MOUTH_TENTACLES,\/\/$/;"	e	enum:pl_flag
PF_MYOPIC	pldata.h	/^ PF_MYOPIC,	\/\/ Smaller sight radius UNLESS wearing glasses$/;"	e	enum:pl_flag
PF_NAILS	pldata.h	/^ PF_NAILS,$/;"	e	enum:pl_flag
PF_NAUSEA	pldata.h	/^ PF_NAUSEA,\/\/$/;"	e	enum:pl_flag
PF_NIGHTVISION	pldata.h	/^ PF_NIGHTVISION,\/\/ Increased sight during the night$/;"	e	enum:pl_flag
PF_NIGHTVISION2	pldata.h	/^ PF_NIGHTVISION2,\/\/$/;"	e	enum:pl_flag
PF_NIGHTVISION3	pldata.h	/^ PF_NIGHTVISION3,\/\/$/;"	e	enum:pl_flag
PF_NULL	pldata.h	/^ PF_NULL = 0,$/;"	e	enum:pl_flag
PF_OPTIMISTIC	pldata.h	/^ PF_OPTIMISTIC,	\/\/ Morale boost$/;"	e	enum:pl_flag
PF_PACKMULE	pldata.h	/^ PF_PACKMULE,	\/\/ Bonus to carried volume$/;"	e	enum:pl_flag
PF_PADDED_FEET	pldata.h	/^ PF_PADDED_FEET,\/\/$/;"	e	enum:pl_flag
PF_PAINREC1	pldata.h	/^ PF_PAINREC1,\/\/$/;"	e	enum:pl_flag
PF_PAINREC2	pldata.h	/^ PF_PAINREC2,\/\/$/;"	e	enum:pl_flag
PF_PAINREC3	pldata.h	/^ PF_PAINREC3,\/\/$/;"	e	enum:pl_flag
PF_PAINRESIST	pldata.h	/^ PF_PAINRESIST,	\/\/ Effects of pain are reduced$/;"	e	enum:pl_flag
PF_PALE	pldata.h	/^ PF_PALE,\/\/$/;"	e	enum:pl_flag
PF_PARKOUR	pldata.h	/^ PF_PARKOUR,	\/\/ Terrain movement cost of 3 or 4 are both 2$/;"	e	enum:pl_flag
PF_PER_UP	pldata.h	/^ PF_PER_UP,$/;"	e	enum:pl_flag
PF_PER_UP_2	pldata.h	/^ PF_PER_UP_2,$/;"	e	enum:pl_flag
PF_PER_UP_3	pldata.h	/^ PF_PER_UP_3,$/;"	e	enum:pl_flag
PF_PER_UP_4	pldata.h	/^ PF_PER_UP_4,$/;"	e	enum:pl_flag
PF_PHEROMONE_INSECT	pldata.h	/^ PF_PHEROMONE_INSECT,\/\/$/;"	e	enum:pl_flag
PF_PHEROMONE_MAMMAL	pldata.h	/^ PF_PHEROMONE_MAMMAL,\/\/$/;"	e	enum:pl_flag
PF_PLANTSKIN	pldata.h	/^ PF_PLANTSKIN,\/\/$/;"	e	enum:pl_flag
PF_POISONOUS	pldata.h	/^ PF_POISONOUS,\/\/$/;"	e	enum:pl_flag
PF_POISRESIST	pldata.h	/^ PF_POISRESIST,	\/\/ Resists poison, etc$/;"	e	enum:pl_flag
PF_PONDEROUS1	pldata.h	/^ PF_PONDEROUS1,	\/\/ 10% movement penalty$/;"	e	enum:pl_flag
PF_PONDEROUS2	pldata.h	/^ PF_PONDEROUS2, \/\/ 20%$/;"	e	enum:pl_flag
PF_PONDEROUS3	pldata.h	/^ PF_PONDEROUS3, \/\/ 30%$/;"	e	enum:pl_flag
PF_QUICK	pldata.h	/^ PF_QUICK,	\/\/ +10% movement points$/;"	e	enum:pl_flag
PF_QUILLS	pldata.h	/^ PF_QUILLS,\/\/$/;"	e	enum:pl_flag
PF_RADIOACTIVE1	pldata.h	/^ PF_RADIOACTIVE1,\/\/$/;"	e	enum:pl_flag
PF_RADIOACTIVE2	pldata.h	/^ PF_RADIOACTIVE2,\/\/$/;"	e	enum:pl_flag
PF_RADIOACTIVE3	pldata.h	/^ PF_RADIOACTIVE3,\/\/$/;"	e	enum:pl_flag
PF_RADIOGENIC	pldata.h	/^ PF_RADIOGENIC,\/\/$/;"	e	enum:pl_flag
PF_REGEN	pldata.h	/^ PF_REGEN,\/\/$/;"	e	enum:pl_flag
PF_ROBUST	pldata.h	/^ PF_ROBUST,	\/\/ Mutations tend to be good (usually they tend to be bad)$/;"	e	enum:pl_flag
PF_ROT1	pldata.h	/^ PF_ROT1,\/\/$/;"	e	enum:pl_flag
PF_ROT2	pldata.h	/^ PF_ROT2,\/\/$/;"	e	enum:pl_flag
PF_ROT3	pldata.h	/^ PF_ROT3,\/\/$/;"	e	enum:pl_flag
PF_RUMINANT	pldata.h	/^ PF_RUMINANT,\/\/$/;"	e	enum:pl_flag
PF_SAPROVORE	pldata.h	/^ PF_SAPROVORE,\/\/$/;"	e	enum:pl_flag
PF_SAVANT	pldata.h	/^ PF_SAVANT,	\/\/ All skills except our best are trained more slowly$/;"	e	enum:pl_flag
PF_SCALES	pldata.h	/^ PF_SCALES,\/\/$/;"	e	enum:pl_flag
PF_SCHIZOPHRENIC	pldata.h	/^ PF_SCHIZOPHRENIC,\/\/ Random bad effects, variety$/;"	e	enum:pl_flag
PF_SELFAWARE	pldata.h	/^ PF_SELFAWARE, \/\/ Let's you see exact HP totals$/;"	e	enum:pl_flag
PF_SHELL	pldata.h	/^ PF_SHELL,$/;"	e	enum:pl_flag
PF_SHOUT1	pldata.h	/^ PF_SHOUT1,\/\/$/;"	e	enum:pl_flag
PF_SHOUT2	pldata.h	/^ PF_SHOUT2,\/\/$/;"	e	enum:pl_flag
PF_SHOUT3	pldata.h	/^ PF_SHOUT3,\/\/$/;"	e	enum:pl_flag
PF_SKIN_ROUGH	pldata.h	/^ PF_SKIN_ROUGH,\/\/$/;"	e	enum:pl_flag
PF_SLEEK_SCALES	pldata.h	/^ PF_SLEEK_SCALES,\/\/$/;"	e	enum:pl_flag
PF_SLIME_HANDS	pldata.h	/^ PF_SLIME_HANDS,$/;"	e	enum:pl_flag
PF_SLIMY	pldata.h	/^ PF_SLIMY,\/\/$/;"	e	enum:pl_flag
PF_SLIT_NOSTRILS	pldata.h	/^ PF_SLIT_NOSTRILS,\/\/$/;"	e	enum:pl_flag
PF_SMELLY	pldata.h	/^ PF_SMELLY,	\/\/ Default scent is higher$/;"	e	enum:pl_flag
PF_SMELLY2	pldata.h	/^ PF_SMELLY2,\/\/TODO: NPC reaction$/;"	e	enum:pl_flag
PF_SNARL	pldata.h	/^ PF_SNARL,\/\/$/;"	e	enum:pl_flag
PF_SORES	pldata.h	/^ PF_SORES,\/\/$/;"	e	enum:pl_flag
PF_SPINES	pldata.h	/^ PF_SPINES,\/\/$/;"	e	enum:pl_flag
PF_SPLIT	pldata.h	/^ PF_SPLIT,	\/\/ Null trait, splits between bad & good$/;"	e	enum:pl_flag
PF_SPOTS	pldata.h	/^ PF_SPOTS,\/\/$/;"	e	enum:pl_flag
PF_STR_UP	pldata.h	/^ PF_STR_UP,$/;"	e	enum:pl_flag
PF_STR_UP_2	pldata.h	/^ PF_STR_UP_2,$/;"	e	enum:pl_flag
PF_STR_UP_3	pldata.h	/^ PF_STR_UP_3,$/;"	e	enum:pl_flag
PF_STR_UP_4	pldata.h	/^ PF_STR_UP_4,$/;"	e	enum:pl_flag
PF_SUNLIGHT_DEPENDENT	pldata.h	/^ PF_SUNLIGHT_DEPENDENT,\/\/$/;"	e	enum:pl_flag
PF_TAIL_CLUB	pldata.h	/^ PF_TAIL_CLUB,\/\/$/;"	e	enum:pl_flag
PF_TAIL_FIN	pldata.h	/^ PF_TAIL_FIN,\/\/$/;"	e	enum:pl_flag
PF_TAIL_FLUFFY	pldata.h	/^ PF_TAIL_FLUFFY,\/\/$/;"	e	enum:pl_flag
PF_TAIL_LONG	pldata.h	/^ PF_TAIL_LONG,\/\/$/;"	e	enum:pl_flag
PF_TAIL_STING	pldata.h	/^ PF_TAIL_STING,\/\/$/;"	e	enum:pl_flag
PF_TAIL_STUB	pldata.h	/^ PF_TAIL_STUB,\/\/$/;"	e	enum:pl_flag
PF_TALONS	pldata.h	/^ PF_TALONS,\/\/$/;"	e	enum:pl_flag
PF_TERRIFYING	pldata.h	/^ PF_TERRIFYING,	\/\/ All creatures run away more$/;"	e	enum:pl_flag
PF_THICKSKIN	pldata.h	/^ PF_THICKSKIN,	\/\/ Built-in armor of 1$/;"	e	enum:pl_flag
PF_THICK_SCALES	pldata.h	/^ PF_THICK_SCALES,\/\/$/;"	e	enum:pl_flag
PF_THIRST	pldata.h	/^ PF_THIRST,\/\/$/;"	e	enum:pl_flag
PF_THORNS	pldata.h	/^ PF_THORNS,$/;"	e	enum:pl_flag
PF_TOUGH	pldata.h	/^ PF_TOUGH,	\/\/ Bonus to HP$/;"	e	enum:pl_flag
PF_TRIGGERHAPPY	pldata.h	/^ PF_TRIGGERHAPPY,\/\/ Possible chance of unintentional burst fire$/;"	e	enum:pl_flag
PF_TROGLO	pldata.h	/^ PF_TROGLO,\/\/$/;"	e	enum:pl_flag
PF_TROGLO2	pldata.h	/^ PF_TROGLO2,\/\/$/;"	e	enum:pl_flag
PF_TROGLO3	pldata.h	/^ PF_TROGLO3,\/\/$/;"	e	enum:pl_flag
PF_TRUTHTELLER	pldata.h	/^ PF_TRUTHTELLER, \/\/ Worse at telling lies$/;"	e	enum:pl_flag
PF_UGLY	pldata.h	/^ PF_UGLY, \/\/ +1 grotesqueness$/;"	e	enum:pl_flag
PF_UNSTABLE	pldata.h	/^ PF_UNSTABLE,\/\/$/;"	e	enum:pl_flag
PF_VEGETARIAN	pldata.h	/^ PF_VEGETARIAN,	\/\/ Morale penalty for eating meat$/;"	e	enum:pl_flag
PF_VOMITOUS	pldata.h	/^ PF_VOMITOUS,\/\/$/;"	e	enum:pl_flag
PF_WEAKSTOMACH	pldata.h	/^ PF_WEAKSTOMACH,\/\/ More likely to throw up in all circumstances$/;"	e	enum:pl_flag
PF_WEBBED	pldata.h	/^ PF_WEBBED,\/\/$/;"	e	enum:pl_flag
PF_WEB_WALKER	pldata.h	/^ PF_WEB_WALKER,$/;"	e	enum:pl_flag
PF_WEB_WEAVER	pldata.h	/^ PF_WEB_WEAVER,$/;"	e	enum:pl_flag
PF_WHISKERS	pldata.h	/^ PF_WHISKERS,$/;"	e	enum:pl_flag
PF_WINGS_BAT	pldata.h	/^ PF_WINGS_BAT,\/\/$/;"	e	enum:pl_flag
PF_WINGS_BIRD	pldata.h	/^ PF_WINGS_BIRD,\/\/$/;"	e	enum:pl_flag
PF_WINGS_INSECT	pldata.h	/^ PF_WINGS_INSECT,\/\/$/;"	e	enum:pl_flag
PF_WINGS_STUB	pldata.h	/^ PF_WINGS_STUB,\/\/$/;"	e	enum:pl_flag
PF_WOOLALLERGY	pldata.h	/^ PF_WOOLALLERGY,\/\/ Can't wear wool$/;"	e	enum:pl_flag
PICKUP_RANGE	game.h	49;"	d
PICOJSON_CMP	picojson.h	743;"	d
PICOJSON_CMP	picojson.h	751;"	d
PLACATE	mtypedef.cpp	36;"	d	file:
PLASTIC	enums.h	/^STONE, PAPER, WOOD, PLASTIC, GLASS, IRON, STEEL, SILVER$/;"	e	enum:material
PLAYER_OUTSIDE	weather.cpp	5;"	d	file:
PLTYPE_CUSTOM	pldata.h	/^ PLTYPE_CUSTOM,$/;"	e	enum:character_type
PLTYPE_MAX	pldata.h	/^ PLTYPE_MAX$/;"	e	enum:character_type
PLTYPE_RANDOM	pldata.h	/^ PLTYPE_RANDOM,$/;"	e	enum:character_type
PLTYPE_TEMPLATE	pldata.h	/^ PLTYPE_TEMPLATE,$/;"	e	enum:character_type
POWDER	enums.h	/^LIQUID, VEGGY, FLESH, POWDER, HFLESH, \/\/Human Flesh.$/;"	e	enum:material
POWER_ARMOR	itypedef.cpp	2046;"	d	file:
PREREQS	mutation_data.cpp	6;"	d	file:
Pickup	input.h	/^	Pickup,$/;"	e	enum:InputEvent
ProcessMessages	catacurse.cpp	/^LRESULT CALLBACK ProcessMessages(HWND__ *hWnd,unsigned int Msg,$/;"	f
QUIT_DELETE_WORLD	game.h	/^ QUIT_DELETE_WORLD  \/\/ Quit and delete world$/;"	e	enum:quit_status
QUIT_DIED	game.h	/^ QUIT_DIED,     \/\/ Actual death$/;"	e	enum:quit_status
QUIT_MENU	game.h	/^ QUIT_MENU,    \/\/ Quit at the menu$/;"	e	enum:quit_status
QUIT_NO	game.h	/^ QUIT_NO = 0,  \/\/ Still playing$/;"	e	enum:quit_status
QUIT_SAVED	game.h	/^ QUIT_SAVED,   \/\/ Saved and quit$/;"	e	enum:quit_status
QUIT_SUICIDE	game.h	/^ QUIT_SUICIDE, \/\/ Quit with 'Q'$/;"	e	enum:quit_status
RADIO_PER_TURN	iuse.cpp	11;"	d	file:
RECIPE	crafting.cpp	18;"	d	file:
RESPONSE	npctalk.cpp	18;"	d	file:
Reset	input.h	/^    Reset,$/;"	e	enum:InputEvent
SCENT_RADIUS	game.cpp	1575;"	d	file:
SEEX	mapdata.h	22;"	d
SEEY	mapdata.h	26;"	d
SELCOL	defense.cpp	14;"	d	file:
SELECT_MISS	npctalk.cpp	21;"	d	file:
SELECT_TEMP	npctalk.cpp	25;"	d	file:
SETTLE_DICE	overmap.cpp	30;"	d	file:
SETTLE_SIDES	overmap.cpp	31;"	d	file:
SGAME_DEFENSE	gamemode.h	/^SGAME_DEFENSE,$/;"	e	enum:special_game_id
SGAME_NULL	gamemode.h	/^SGAME_NULL = 0,$/;"	e	enum:special_game_id
SGAME_TUTORIAL	gamemode.h	/^SGAME_TUTORIAL,$/;"	e	enum:special_game_id
SGN	line.cpp	4;"	d	file:
SGN	map.cpp	14;"	d	file:
SGN	monmove.cpp	13;"	d	file:
SGN	monster.cpp	13;"	d	file:
SILVER	enums.h	/^STONE, PAPER, WOOD, PLASTIC, GLASS, IRON, STEEL, SILVER$/;"	e	enum:material
SLOPE_VERTICAL	line.h	9;"	d
SNPRINTF	picojson.h	45;"	d
SNPRINTF	picojson.h	49;"	d
SOFTWARE	itypedef.cpp	4381;"	d	file:
SOURCES	Makefile	/^SOURCES = $(wildcard *.cpp)$/;"	m
SOUTH	line.h	/^SOUTH,$/;"	e	enum:direction
SOUTHEAST	line.h	/^SOUTHEAST,$/;"	e	enum:direction
SOUTHWEST	line.h	/^SOUTHWEST,$/;"	e	enum:direction
SPECIAL_WAVE_CHANCE	defense.cpp	11;"	d	file:
SPECIAL_WAVE_MIN	defense.cpp	12;"	d	file:
SPRING	weather.h	/^ SPRING = 0,$/;"	e	enum:season_type
SQR	monster.cpp	14;"	d	file:
STAGE	construction.cpp	24;"	d	file:
STARTING_MINUTES	calendar.h	5;"	d
STATUS_HEIGHT	game.h	41;"	d
STATUS_WIDTH	game.h	42;"	d
STEEL	enums.h	/^STONE, PAPER, WOOD, PLASTIC, GLASS, IRON, STEEL, SILVER$/;"	e	enum:material
STONE	enums.h	/^STONE, PAPER, WOOD, PLASTIC, GLASS, IRON, STEEL, SILVER$/;"	e	enum:material
STREETCHANCE	overmap.cpp	21;"	d	file:
STRING	output.h	48;"	d
STRING2	output.h	47;"	d
STYLE	itypedef.cpp	4530;"	d	file:
SUCCESS	npctalk.cpp	32;"	d	file:
SUCCESS_ACTION	npctalk.cpp	40;"	d	file:
SUCCESS_MISSION	npctalk.cpp	43;"	d	file:
SUCCESS_OPINION	npctalk.cpp	35;"	d	file:
SUMMER	weather.h	/^ SUMMER = 1,$/;"	e	enum:season_type
SUNRISE_SOLSTICE	calendar.h	16;"	d
SUNRISE_SUMMER	calendar.h	17;"	d
SUNRISE_WINTER	calendar.h	15;"	d
SUNSET_SOLSTICE	calendar.h	20;"	d
SUNSET_SUMMER	calendar.h	21;"	d
SUNSET_WINTER	calendar.h	19;"	d
SWAMPCHANCE	overmap.cpp	34;"	d	file:
SWAMPINESS	overmap.cpp	33;"	d	file:
SW_DATA	itype.h	/^SW_DATA,$/;"	e	enum:software_type
SW_HACKING	itype.h	/^SW_HACKING,$/;"	e	enum:software_type
SW_MEDICAL	itype.h	/^SW_MEDICAL,$/;"	e	enum:software_type
SW_NULL	itype.h	/^SW_NULL,$/;"	e	enum:software_type
SW_SCIENCE	itype.h	/^SW_SCIENCE,$/;"	e	enum:software_type
SW_USELESS	itype.h	/^SW_USELESS,$/;"	e	enum:software_type
Skill	skill.cpp	/^Skill::Skill() {$/;"	f	class:Skill
Skill	skill.cpp	/^Skill::Skill(size_t id, std::string ident, std::string name, std::string description) {$/;"	f	class:Skill
Skill	skill.h	/^class Skill {$/;"	c
SkillLevel	skill.cpp	/^SkillLevel::SkillLevel(int level, int exercise, bool isTraining) {$/;"	f	class:SkillLevel
SkillLevel	skill.cpp	/^SkillLevel::SkillLevel(int minLevel, int maxLevel, int minExercise, int maxExercise, bool isTraining) {$/;"	f	class:SkillLevel
SkillLevel	skill.h	/^class SkillLevel {$/;"	c
TALK_AGREE_FOLLOW	npc.h	/^ TALK_AGREE_FOLLOW,$/;"	e	enum:talk_topic
TALK_COMBAT_COMMANDS	npc.h	/^ TALK_COMBAT_COMMANDS,$/;"	e	enum:talk_topic
TALK_COMBAT_ENGAGEMENT	npc.h	/^ TALK_COMBAT_ENGAGEMENT,$/;"	e	enum:talk_topic
TALK_DEMAND_LEAVE	npc.h	/^ TALK_DEMAND_LEAVE,$/;"	e	enum:talk_topic
TALK_DENY_EQUIPMENT	npc.h	/^ TALK_DENY_EQUIPMENT,$/;"	e	enum:talk_topic
TALK_DENY_FOLLOW	npc.h	/^ TALK_DENY_FOLLOW,$/;"	e	enum:talk_topic
TALK_DESCRIBE_MISSION	npc.h	/^ TALK_DESCRIBE_MISSION,$/;"	e	enum:talk_topic
TALK_DONE	npc.h	/^ TALK_DONE,	\/\/ Used to end the conversation$/;"	e	enum:talk_topic
TALK_FRIEND	npc.h	/^ TALK_FRIEND,$/;"	e	enum:talk_topic
TALK_GIVE_EQUIPMENT	npc.h	/^ TALK_GIVE_EQUIPMENT,$/;"	e	enum:talk_topic
TALK_HOW_MUCH_FURTHER	npc.h	/^ TALK_HOW_MUCH_FURTHER,$/;"	e	enum:talk_topic
TALK_LEADER	npc.h	/^ TALK_LEADER,$/;"	e	enum:talk_topic
TALK_LEADER_STAYS	npc.h	/^ TALK_LEADER_STAYS,$/;"	e	enum:talk_topic
TALK_LEAVE	npc.h	/^ TALK_LEAVE,$/;"	e	enum:talk_topic
TALK_LOOK_AT	npc.h	/^ TALK_LOOK_AT,$/;"	e	enum:talk_topic
TALK_MISSION_ACCEPTED	npc.h	/^ TALK_MISSION_ACCEPTED,$/;"	e	enum:talk_topic
TALK_MISSION_ADVICE	npc.h	/^ TALK_MISSION_ADVICE,$/;"	e	enum:talk_topic
TALK_MISSION_DESCRIBE	npc.h	/^ TALK_MISSION_DESCRIBE, \/\/ Describe a mission$/;"	e	enum:talk_topic
TALK_MISSION_END	npc.h	/^ TALK_MISSION_END, \/\/ NOT USED: end of mission topics$/;"	e	enum:talk_topic
TALK_MISSION_FAILURE	npc.h	/^ TALK_MISSION_FAILURE,$/;"	e	enum:talk_topic
TALK_MISSION_INQUIRE	npc.h	/^ TALK_MISSION_INQUIRE,$/;"	e	enum:talk_topic
TALK_MISSION_LIST	npc.h	/^ TALK_MISSION_LIST, \/\/ List available missions. Intentionally placed above START$/;"	e	enum:talk_topic
TALK_MISSION_LIST_ASSIGNED	npc.h	/^ TALK_MISSION_LIST_ASSIGNED, \/\/ Same, but for assigned missions.$/;"	e	enum:talk_topic
TALK_MISSION_OFFER	npc.h	/^ TALK_MISSION_OFFER, \/\/ Offer a mission$/;"	e	enum:talk_topic
TALK_MISSION_REJECTED	npc.h	/^ TALK_MISSION_REJECTED,$/;"	e	enum:talk_topic
TALK_MISSION_REWARD	npc.h	/^ TALK_MISSION_REWARD, \/\/ Intentionally placed below END$/;"	e	enum:talk_topic
TALK_MISSION_START	npc.h	/^ TALK_MISSION_START, \/\/ NOT USED; start of mission topics$/;"	e	enum:talk_topic
TALK_MISSION_SUCCESS	npc.h	/^ TALK_MISSION_SUCCESS,$/;"	e	enum:talk_topic
TALK_MISSION_SUCCESS_LIE	npc.h	/^ TALK_MISSION_SUCCESS_LIE, \/\/ Lie caught!$/;"	e	enum:talk_topic
TALK_MUG	npc.h	/^ TALK_MUG,$/;"	e	enum:talk_topic
TALK_NONE	npc.h	/^ TALK_NONE = 0,	\/\/ Used to go back to last subject$/;"	e	enum:talk_topic
TALK_OPINION	npc.h	/^ TALK_OPINION,$/;"	e	enum:talk_topic
TALK_PLAYER_LEADS	npc.h	/^ TALK_PLAYER_LEADS,$/;"	e	enum:talk_topic
TALK_SHARE_EQUIPMENT	npc.h	/^ TALK_SHARE_EQUIPMENT,$/;"	e	enum:talk_topic
TALK_SHELTER	npc.h	/^ TALK_SHELTER,$/;"	e	enum:talk_topic
TALK_SHELTER_PLANS	npc.h	/^ TALK_SHELTER_PLANS,$/;"	e	enum:talk_topic
TALK_SHOPKEEP	npc.h	/^ TALK_SHOPKEEP,$/;"	e	enum:talk_topic
TALK_SIZE_UP	npc.h	/^ TALK_SIZE_UP,$/;"	e	enum:talk_topic
TALK_STRANGER_AGGRESSIVE	npc.h	/^ TALK_STRANGER_AGGRESSIVE,$/;"	e	enum:talk_topic
TALK_STRANGER_FRIENDLY	npc.h	/^ TALK_STRANGER_FRIENDLY,$/;"	e	enum:talk_topic
TALK_STRANGER_NEUTRAL	npc.h	/^ TALK_STRANGER_NEUTRAL,$/;"	e	enum:talk_topic
TALK_STRANGER_SCARED	npc.h	/^ TALK_STRANGER_SCARED,$/;"	e	enum:talk_topic
TALK_STRANGER_WARY	npc.h	/^ TALK_STRANGER_WARY,$/;"	e	enum:talk_topic
TALK_SUGGEST_FOLLOW	npc.h	/^ TALK_SUGGEST_FOLLOW,$/;"	e	enum:talk_topic
TALK_TRAIN	npc.h	/^ TALK_TRAIN,$/;"	e	enum:talk_topic
TALK_TRAIN_FORCE	npc.h	/^ TALK_TRAIN_FORCE,$/;"	e	enum:talk_topic
TALK_TRAIN_START	npc.h	/^ TALK_TRAIN_START,$/;"	e	enum:talk_topic
TALK_TRIAL_INTIMIDATE	dialogue.h	/^ TALK_TRIAL_INTIMIDATE, \/\/ Physical intimidation$/;"	e	enum:talk_trial
TALK_TRIAL_LIE	dialogue.h	/^ TALK_TRIAL_LIE, \/\/ Straight up lying$/;"	e	enum:talk_trial
TALK_TRIAL_NONE	dialogue.h	/^ TALK_TRIAL_NONE, \/\/ No challenge here!$/;"	e	enum:talk_trial
TALK_TRIAL_PERSUADE	dialogue.h	/^ TALK_TRIAL_PERSUADE, \/\/ Convince them$/;"	e	enum:talk_trial
TALK_WEAPON_DROPPED	npc.h	/^ TALK_WEAPON_DROPPED,$/;"	e	enum:talk_topic
TARGET	Makefile	/^  TARGET = $(W32TARGET)$/;"	m
TARGET	Makefile	/^TARGET = cataclysm$/;"	m
TARGET_PLAYER	npcmove.cpp	9;"	d	file:
TECH	itypedef.cpp	20;"	d	file:
TEC_BLOCK	itype.h	/^TEC_BLOCK,	\/\/ Block attacks, reducing them to 25% damage$/;"	e	enum:technique_id
TEC_BLOCK_LEGS	itype.h	/^TEC_BLOCK_LEGS, \/\/ Block attacks, but with your legs$/;"	e	enum:technique_id
TEC_BREAK	itype.h	/^TEC_BREAK,	\/\/ Break from a grab$/;"	e	enum:technique_id
TEC_BRUTAL	itype.h	/^TEC_BRUTAL,	\/\/ Crits knock the target back$/;"	e	enum:technique_id
TEC_COUNTER	itype.h	/^TEC_COUNTER,	\/\/ Counter-attack on a block or dodge$/;"	e	enum:technique_id
TEC_DEF_DISARM	itype.h	/^TEC_DEF_DISARM, \/\/ Disarm an enemy$/;"	e	enum:technique_id
TEC_DEF_THROW	itype.h	/^TEC_DEF_THROW,	\/\/ Throw an enemy that attacks you$/;"	e	enum:technique_id
TEC_DISARM	itype.h	/^TEC_DISARM,	\/\/ Remove an NPC's weapon$/;"	e	enum:technique_id
TEC_FEINT	itype.h	/^TEC_FEINT,	\/\/ Misses take less time$/;"	e	enum:technique_id
TEC_GRAB	itype.h	/^TEC_GRAB,	\/\/ Hit may allow a second unarmed attack attempt$/;"	e	enum:technique_id
TEC_NULL	itype.h	/^TEC_NULL,$/;"	e	enum:technique_id
TEC_PRECISE	itype.h	/^TEC_PRECISE,	\/\/ Crits are painful and stun$/;"	e	enum:technique_id
TEC_RAPID	itype.h	/^TEC_RAPID,	\/\/ Hits faster$/;"	e	enum:technique_id
TEC_SWEEP	itype.h	/^TEC_SWEEP,	\/\/ Crits may make your enemy fall & miss a turn$/;"	e	enum:technique_id
TEC_THROW	itype.h	/^TEC_THROW,	\/\/ Attacks may throw your opponent$/;"	e	enum:technique_id
TEC_WBLOCK_1	itype.h	/^TEC_WBLOCK_1,	\/\/ Weapon block, poor chance -- e.g. pole$/;"	e	enum:technique_id
TEC_WBLOCK_2	itype.h	/^TEC_WBLOCK_2,	\/\/ Weapon block, moderate chance -- weapon made for blocking$/;"	e	enum:technique_id
TEC_WBLOCK_3	itype.h	/^TEC_WBLOCK_3,	\/\/ Weapon block, good chance -- shield$/;"	e	enum:technique_id
TEC_WIDE	itype.h	/^TEC_WIDE,	\/\/ Attacks adjacent oppoents$/;"	e	enum:technique_id
TERMX	output.cpp	/^int TERMX;$/;"	v
TERMY	output.cpp	/^int TERMY;$/;"	v
TERRAIN_WINDOW_HEIGHT	output.cpp	/^int TERRAIN_WINDOW_HEIGHT;$/;"	v
TERRAIN_WINDOW_WIDTH	output.cpp	/^int TERRAIN_WINDOW_WIDTH;$/;"	v
TEST	picojson.h	825;"	d
TEST	picojson.h	851;"	d
TEST	picojson.h	853;"	d
TEST	picojson.h	875;"	d
TEST	picojson.h	877;"	d
TEST	picojson.h	887;"	d
TEST	picojson.h	922;"	d
TEST	picojson.h	932;"	d
TG_KNIVES	crafting.cpp	34;"	d	file:
TG_KNIVES_CONT	crafting.cpp	39;"	d	file:
THUNDER_CHANCE	weather.cpp	6;"	d	file:
TOGCOL	defense.cpp	15;"	d	file:
TOOL	construction.cpp	27;"	d	file:
TOOL	crafting.cpp	22;"	d	file:
TOOL	itypedef.cpp	2660;"	d	file:
TOOLCONT	construction.cpp	28;"	d	file:
TOOLCONT	crafting.cpp	23;"	d	file:
TOP_HIWAY_DIST	overmap.cpp	23;"	d	file:
TRACE_SIZE	debug.cpp	81;"	d	file:
TRIAL	npctalk.cpp	29;"	d	file:
TUT_BASIC	game.h	/^ TUT_BASIC, TUT_COMBAT,$/;"	e	enum:tut_type
TUT_COMBAT	game.h	/^ TUT_BASIC, TUT_COMBAT,$/;"	e	enum:tut_type
TUT_MAX	game.h	/^ TUT_MAX$/;"	e	enum:tut_type
TUT_NULL	game.h	/^ TUT_NULL,$/;"	e	enum:tut_type
TWILIGHT_MINUTES	calendar.h	24;"	d
UPS_off	iuse.cpp	/^void iuse::UPS_off(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
UPS_on	iuse.cpp	/^void iuse::UPS_on(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
Undefined	input.h	/^	Undefined$/;"	e	enum:InputEvent
VAR_VEH_PART	itypedef.cpp	1202;"	d	file:
VEGGY	enums.h	/^LIQUID, VEGGY, FLESH, POWDER, HFLESH, \/\/Human Flesh.$/;"	e	enum:material
VEHICLE	veh_typedef.cpp	37;"	d	file:
VERSION	Makefile	/^VERSION = 0.3$/;"	m
VIEWX	output.cpp	/^int VIEWX;$/;"	v
VIEWY	output.cpp	/^int VIEWY;$/;"	v
VIEW_OFFSET_X	output.cpp	/^int VIEW_OFFSET_X;$/;"	v
VIEW_OFFSET_Y	output.cpp	/^int VIEW_OFFSET_Y;$/;"	v
VehicleList	map.h	/^typedef std::vector<wrapped_vehicle> VehicleList;$/;"	t
VertLineDIB	catacurse.cpp	/^inline void VertLineDIB(int x, int y, int y2,int thickness, unsigned char color)$/;"	f
W32BINDIST	Makefile	/^W32BINDIST = cataclysmdda-$(VERSION).zip$/;"	m
W32BINDIST_CMD	Makefile	/^W32BINDIST_CMD = zip -r $(W32BINDIST) $(BINDIST_DIR)$/;"	m
W32LDFLAGS	Makefile	/^  W32LDFLAGS = -Wl,-stack,12000000,-subsystem,windows$/;"	m
W32ODIR	Makefile	/^W32ODIR = objwin$/;"	m
W32TARGET	Makefile	/^W32TARGET = cataclysm.exe$/;"	m
WARNINGS	Makefile	/^WARNINGS = -w$/;"	m
WA_NULL	color.h	/^WA_NULL = 0,$/;"	e	enum:col_attribute
WEATHER_ACID_DRIZZLE	weather.h	/^ WEATHER_ACID_DRIZZLE,	\/\/ No real effects; warning of acid rain$/;"	e	enum:weather_type
WEATHER_ACID_RAIN	weather.h	/^ WEATHER_ACID_RAIN,	\/\/ Minor acid damage$/;"	e	enum:weather_type
WEATHER_CLEAR	weather.h	/^ WEATHER_CLEAR,		\/\/ No effects$/;"	e	enum:weather_type
WEATHER_CLOUDY	weather.h	/^ WEATHER_CLOUDY,	\/\/ No effects$/;"	e	enum:weather_type
WEATHER_DRIZZLE	weather.h	/^ WEATHER_DRIZZLE,	\/\/ Light rain$/;"	e	enum:weather_type
WEATHER_FLURRIES	weather.h	/^ WEATHER_FLURRIES,	\/\/ Light snow$/;"	e	enum:weather_type
WEATHER_LIGHTNING	weather.h	/^ WEATHER_LIGHTNING,	\/\/ Rare lightning strikes!$/;"	e	enum:weather_type
WEATHER_NULL	weather.h	/^ WEATHER_NULL,		\/\/ For data and stuff$/;"	e	enum:weather_type
WEATHER_RAINY	weather.h	/^ WEATHER_RAINY,		\/\/ Lots of rain, sight penalties$/;"	e	enum:weather_type
WEATHER_SNOW	weather.h	/^ WEATHER_SNOW,		\/\/ Medium snow$/;"	e	enum:weather_type
WEATHER_SNOWSTORM	weather.h	/^ WEATHER_SNOWSTORM,	\/\/ Heavy snow$/;"	e	enum:weather_type
WEATHER_SUNNY	weather.h	/^ WEATHER_SUNNY,		\/\/ Glare if no eye protection$/;"	e	enum:weather_type
WEATHER_THUNDER	weather.h	/^ WEATHER_THUNDER,	\/\/ Warns of lightning to come$/;"	e	enum:weather_type
WEST	line.h	/^WEST,$/;"	e	enum:direction
WIN32_LEAN_AND_MEAN	catacurse.h	4;"	d
WIN32_LEAN_AND_MEAN	posix_time.h	28;"	d
WINDOW	catacurse.h	/^} WINDOW;$/;"	t	typeref:struct:__anon3
WINTER	weather.h	/^ WINTER = 3$/;"	e	enum:season_type
WOOD	enums.h	/^STONE, PAPER, WOOD, PLASTIC, GLASS, IRON, STEEL, SILVER$/;"	e	enum:material
WOOL	enums.h	/^COTTON, WOOL, LEATHER, KEVLAR, FUR,$/;"	e	enum:material
WinCreate	catacurse.cpp	/^bool WinCreate()$/;"	f
WinDestroy	catacurse.cpp	/^void WinDestroy()$/;"	f
WindowDC	catacurse.cpp	/^HDC WindowDC;           \/\/Device Context of the window, used for backbuffer$/;"	v
WindowHandle	catacurse.cpp	/^HWND WindowHandle;      \/\/the handle of the window$/;"	v
WindowHeight	catacurse.cpp	/^int WindowHeight;       \/\/Height of the actual window, not the curses window$/;"	v
WindowINST	catacurse.cpp	/^HINSTANCE WindowINST;   \/\/the instance of the window$/;"	v
WindowWidth	catacurse.cpp	/^int WindowWidth;        \/\/Width of the actual window, not the curses window$/;"	v
WindowX	catacurse.cpp	/^int WindowX;            \/\/X pos of the actual window, not the curses window$/;"	v
WindowY	catacurse.cpp	/^int WindowY;            \/\/Y pos of the actual window, not the curses window$/;"	v
_ACTION_H_	action.h	2;"	d
_ADDICTION_H_	addiction.h	2;"	d
_ARTIFACTDATA_H_	artifactdata.h	2;"	d
_ARTIFACT_H_	artifact.h	2;"	d
_BASECAMP_H_	basecamp.h	2;"	d
_BIONICS_H_	bionics.h	2;"	d
_BODYPART_H_	bodypart.h	2;"	d
_COLOR_H	color.h	2;"	d
_COLOR_LIST_	color.h	5;"	d
_COMPUTER_H_	computer.h	2;"	d
_CRAFTING_H_	crafting.h	2;"	d
_CURSES_DEF_H_	cursesdef.h	2;"	d
_DIALOGUE_H_	dialogue.h	2;"	d
_DISEASE_H_	disease.h	2;"	d
_ENUMS_H_	enums.h	2;"	d
_EVENT_H_	event.h	2;"	d
_FACTION_H_	faction.h	2;"	d
_GAMEMODE_H_	gamemode.h	2;"	d
_GAME_H_	game.h	2;"	d
_GRAFFITI_H_	graffiti.h	2;"	d
_INPUT_H_	input.h	2;"	d
_INVENTORY_H_	inventory.h	2;"	d
_ITEM_H_	item.h	2;"	d
_ITEM_MANAGER_H_	item_manager.h	2;"	d
_ITYPE_H_	itype.h	2;"	d
_IUSE_H_	iuse.h	2;"	d
_KEYPRESS_H_	keypress.h	2;"	d
_LIGHTMAP_H_	lightmap.h	2;"	d
_LINE_H_	line.h	2;"	d
_MAPDATA_H_	mapdata.h	2;"	d
_MAPITEMS_H_	mapitems.h	2;"	d
_MAP_H_	map.h	2;"	d
_MISSION_H_	mission.h	2;"	d
_MONATTACK_H_	monattack.h	2;"	d
_MONDEATH_H_	mondeath.h	2;"	d
_MONGROUP_H_	mongroup.h	2;"	d
_MONSTER_H_	monster.h	2;"	d
_MORALEDATA_H_	moraledata.h	2;"	d
_MORALE_H_	morale.h	2;"	d
_MTYPE_H_	mtype.h	2;"	d
_MUTATION_H_	mutation.h	2;"	d
_NAME_H_	name.h	2;"	d
_NPC_H_	npc.h	2;"	d
_OBJS	Makefile	/^_OBJS = $(SOURCES:.cpp=.o)$/;"	m
_OMDATA_H_	omdata.h	2;"	d
_OPTIONS_H_	options.h	2;"	d
_OUTPUT_H_	output.h	2;"	d
_OVERMAP_H_	overmap.h	2;"	d
_PLAYER_H_	player.h	2;"	d
_PLDATA_H_	pldata.h	2;"	d
_RNG_H_	rng.h	2;"	d
_SETTLEMENT_H_	settlement.h	2;"	d
_SETVECTOR_H_	setvector.h	2;"	d
_SKILL_H_	skill.h	2;"	d
_TEXT_HASH_H_	texthash.h	2;"	d
_TILERAY_H_	tileray.h	2;"	d
_TIME_SPEC_H_	posix_time.h	2;"	d
_TRAP_H_	trap.h	2;"	d
_VEHICLE_H_	vehicle.h	2;"	d
_VEH_INTERACT_H_	veh_interact.h	2;"	d
_VEH_TYPE_H_	veh_type.h	2;"	d
_WEATHER_DATA_H_	weather_data.h	2;"	d
_WEATHER_H_	weather.h	2;"	d
_WIN32_WINNT	catacurse.h	3;"	d
__ALTCHARSET	catacurse.h	23;"	d
__ATTRIBUTES	catacurse.h	25;"	d
__BLANK	catacurse.h	21;"	d
__BLINK	catacurse.h	18;"	d
__BOLD	catacurse.h	20;"	d
__CATACURSE__	catacurse.h	2;"	d
__CHARTEXT	catacurse.h	12;"	d
__COLOR	catacurse.h	24;"	d
__Cataclysmic__iexamine__	iexamine.h	9;"	d
__DIM	catacurse.h	19;"	d
__NORMAL	catacurse.h	13;"	d
__PROTECT	catacurse.h	22;"	d
__REVERSE	catacurse.h	16;"	d
__STANDOUT	catacurse.h	14;"	d
__UNDERSCORE	catacurse.h	15;"	d
_description	skill.h	/^  std::string _description;$/;"	m	class:Skill
_exercise	skill.h	/^  int _exercise;$/;"	m	class:SkillLevel
_flags	name.h	/^  uint32_t _flags;$/;"	m	class:Name
_id	skill.h	/^  size_t _id;$/;"	m	class:Skill
_ident	skill.h	/^  std::string _ident;$/;"	m	class:Skill
_isTraining	skill.h	/^  bool _isTraining;$/;"	m	class:SkillLevel
_level	skill.h	/^  int _level;$/;"	m	class:SkillLevel
_name	skill.h	/^  std::string _name;$/;"	m	class:Skill
_parse	picojson.h	/^  template <typename Context, typename Iter> inline Iter _parse(Context& ctx, const Iter& first, const Iter& last, std::string* err) {$/;"	f	namespace:picojson
_parse	picojson.h	/^  template <typename Context, typename Iter> inline bool _parse(Context& ctx, input<Iter>& in) {$/;"	f	namespace:picojson
_parse_array	picojson.h	/^  template <typename Context, typename Iter> inline bool _parse_array(Context& ctx, input<Iter>& in) {$/;"	f	namespace:picojson
_parse_codepoint	picojson.h	/^  template<typename String, typename Iter> inline bool _parse_codepoint(String& out, input<Iter>& in) {$/;"	f	namespace:picojson
_parse_number	picojson.h	/^  template <typename Iter> inline bool _parse_number(double& out, input<Iter>& in) {$/;"	f	namespace:picojson
_parse_object	picojson.h	/^  template <typename Context, typename Iter> inline bool _parse_object(Context& ctx, input<Iter>& in) {$/;"	f	namespace:picojson
_parse_quadhex	picojson.h	/^  template<typename Iter> inline int _parse_quadhex(input<Iter> &in) {$/;"	f	namespace:picojson
_parse_string	picojson.h	/^  template<typename String, typename Iter> inline bool _parse_string(String& out, input<Iter>& in) {$/;"	f	namespace:picojson
_skills	player.h	/^  std::map<Skill*,SkillLevel> _skills;$/;"	m	class:player
_value	name.h	/^  std::string _value;$/;"	m	class:Name
able	construction.h	/^ bool (construct::*able)  (game *, point);$/;"	m	struct:constructable
able	omdata.h	/^ bool (omspec_place::*able) (overmap *om, tripoint p); \/\/ See above$/;"	m	struct:overmap_special
able_always	construction.h	/^ bool able_always(game *, point) { return true;  }$/;"	f	struct:construct
able_between_walls	construction.cpp	/^bool construct::able_between_walls(game *g, point p)$/;"	f	class:construct
able_broken_window	construction.cpp	/^bool construct::able_broken_window(game *g, point p)$/;"	f	class:construct
able_chainlink	construction.cpp	/^bool construct::able_chainlink(game *g, point p)$/;"	f	class:construct
able_deconstruct	construction.cpp	/^bool construct::able_deconstruct(game *g, point p)$/;"	f	class:construct
able_dig	construction.cpp	/^bool construct::able_dig(game *g, point p)$/;"	f	class:construct
able_door	construction.cpp	/^bool construct::able_door(game *g, point p)$/;"	f	class:construct
able_door_broken	construction.cpp	/^bool construct::able_door_broken(game *g, point p)$/;"	f	class:construct
able_empty	construction.cpp	/^bool construct::able_empty(game *g, point p)$/;"	f	class:construct
able_empty_window	construction.cpp	/^bool construct::able_empty_window(game *g, point p)$/;"	f	class:construct
able_furniture	construction.cpp	/^bool construct::able_furniture(game *g, point p)$/;"	f	class:construct
able_indoors	construction.cpp	/^bool construct::able_indoors(game *g, point p)$/;"	f	class:construct
able_log	construction.cpp	/^bool construct::able_log(game *g, point p)$/;"	f	class:construct
able_never	construction.h	/^ bool able_never (game *, point) { return false; }$/;"	f	struct:construct
able_pit	construction.cpp	/^bool construct::able_pit(game *g, point p)$/;"	f	class:construct
able_tree	construction.cpp	/^bool construct::able_tree(game *g, point p)$/;"	f	class:construct
able_wall	construction.cpp	/^bool construct::able_wall(game *g, point p)$/;"	f	class:construct
able_wall_wood	construction.cpp	/^bool construct::able_wall_wood(game *g, point p)$/;"	f	class:construct
able_window	construction.cpp	/^bool construct::able_window(game *g, point p)$/;"	f	class:construct
able_window_pane	construction.cpp	/^bool construct::able_window_pane(game *g, point p)$/;"	f	class:construct
absorb	player.cpp	/^void player::absorb(game *g, body_part bp, int &dam, int &cut)$/;"	f	class:player
acceleration	vehicle.cpp	/^int vehicle::acceleration (bool fueled)$/;"	f	class:vehicle
acceptible_ammo_types	itype.h	/^ unsigned acceptible_ammo_types : NUM_AMMO_TYPES;$/;"	m	struct:it_gunmod
access_key_list	item_manager.h	/^typedef std::vector<std::string> access_key_list;$/;"	t
accuracy	item.cpp	/^int item::accuracy()$/;"	f	class:item
accuracy	itype.h	/^ signed char accuracy, damage, loudness, clip, recoil, burst;$/;"	m	struct:it_gunmod
accuracy	itype.h	/^ signed char accuracy;	\/\/ Accuracy (low is good)$/;"	m	struct:it_ammo
accuracy	itype.h	/^ signed char accuracy;$/;"	m	struct:it_gun
acid	monattack.cpp	/^void mattack::acid(game *g, monster *z)$/;"	f	class:mattack
acid	mondeath.cpp	/^void mdeath::acid(game *g, monster *z)$/;"	f	class:mdeath
acid	weather.cpp	/^void weather_effect::acid(game *g)$/;"	f	class:weather_effect
acidbomb	iuse.cpp	/^void iuse::acidbomb(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
acidbomb_act	iuse.cpp	/^void iuse::acidbomb_act(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
act	trap.h	/^ void (trapfunc::*act)(game *, int x, int y);$/;"	m	struct:trap
action	computer.h	/^ computer_action action;$/;"	m	struct:computer_option
action_id	action.h	/^enum action_id {$/;"	g
action_ident	action.cpp	/^std::string action_ident(action_id act)$/;"	f
action_name	action.cpp	/^std::string action_name(action_id act)$/;"	f
activate_bionic	bionics.cpp	/^void player::activate_bionic(int b, game *g)$/;"	f	class:player
activate_failure	computer.cpp	/^void computer::activate_failure(game *g, computer_failure fail)$/;"	f	class:computer
activate_function	computer.cpp	/^void computer::activate_function(game *g, computer_action action)$/;"	f	class:computer
activate_item	npcmove.cpp	/^void npc::activate_item(game *g, int index)$/;"	f	class:npc
activate_random_failure	computer.cpp	/^void computer::activate_random_failure(game *g)$/;"	f	class:computer
activated	bionics.h	/^     bool activated;	\/\/ If true, then the below function only happens when$/;"	m	class:bionic_data
active	item.h	/^ bool active;           \/\/ If true, it has active effects to be processed$/;"	m	class:item
active_bad	artifactdata.h	/^ art_effect_active active_bad[4];$/;"	m	struct:artifact_property_datum
active_effect_cost	artifactdata.h	/^int active_effect_cost[NUM_AEAS] = {$/;"	v
active_good	artifactdata.h	/^ art_effect_active active_good[4];$/;"	m	struct:artifact_property_datum
active_gunmod	item.cpp	/^item* item::active_gunmod()$/;"	f	class:item
active_item_charges	player.cpp	/^int player::active_item_charges(itype_id id)$/;"	f	class:player
active_item_count	mapdata.h	/^ int active_item_count;$/;"	m	struct:submap
active_light	player.cpp	/^float player::active_light()$/;"	f	class:player
active_mission	player.h	/^ int active_mission;$/;"	m	class:player
active_missions	game.h	/^  std::vector<mission> active_missions; \/\/ Missions which may be assigned$/;"	m	class:game
active_missions	player.h	/^ std::vector<int> active_missions;$/;"	m	class:player
active_npc	game.h	/^  std::vector<npc> active_npc;$/;"	m	class:game
activity	player.h	/^ player_activity activity;$/;"	m	class:player
activity_is_suspendable	player.cpp	/^bool activity_is_suspendable(activity_type type)$/;"	f
activity_type	pldata.h	/^enum activity_type {$/;"	g
actm	trap.h	/^ void (trapfuncm::*actm)(game *, monster *, int x, int y);$/;"	m	struct:trap
actualize	event.cpp	/^void event::actualize(game *g)$/;"	f	class:event
add	itype.h	/^    add_type add;				\/\/ Effects of addiction$/;"	m	struct:it_comest
add	texthash.cpp	/^bool text_hash::add(std::string key, std::string value)$/;"	f	class:text_hash
add_addiction	player.cpp	/^void player::add_addiction(add_type type, int strength)$/;"	f	class:player
add_artifact_messages	artifact.cpp	/^void game::add_artifact_messages(std::vector<art_effect_passive> effects)$/;"	f	class:game
add_bionic	player.cpp	/^void player::add_bionic(bionic_id b)$/;"	f	class:player
add_building	settlement.cpp	/^void settlement::add_building(oter_id ter)$/;"	f	class:settlement
add_camp	map.cpp	/^void map::add_camp(const std::string& name, const int x, const int y)$/;"	f	class:map
add_computer	mapgen.cpp	/^computer* map::add_computer(int x, int y, std::string name, int security)$/;"	f	class:map
add_corpse	mapgen.cpp	/^void add_corpse(game *g, map *m, int x, int y)$/;"	f
add_disease	player.cpp	/^void player::add_disease(dis_type type, int duration, game *g,$/;"	f	class:player
add_effect	monster.cpp	/^void monster::add_effect(monster_effect_type effect, int duration)$/;"	f	class:monster
add_event	game.cpp	/^void game::add_event(event_type type, int on_turn, int faction_id, int x, int y)$/;"	f	class:game
add_extra	mapgen.cpp	/^void map::add_extra(map_extra type, game *g)$/;"	f	class:map
add_failure	computer.cpp	/^void computer::add_failure(computer_failure failure)$/;"	f	class:computer
add_field	map.cpp	/^bool map::add_field(game *g, const int x, const int y,$/;"	f	class:map
add_footstep	game.cpp	/^void game::add_footstep(int x, int y, int volume, int distance)$/;"	f	class:game
add_graffiti	map.cpp	/^bool map::add_graffiti(game *g, int x, int y, std::string contents)$/;"	f	class:map
add_item	inventory.cpp	/^void inventory::add_item(item newit, bool keep_invlet)$/;"	f	class:inventory
add_item	map.cpp	/^void map::add_item(const int x, const int y, item new_item)$/;"	f	class:map
add_item	monster.cpp	/^void monster::add_item(item it)$/;"	f	class:monster
add_item	vehicle.cpp	/^bool vehicle::add_item (int part, item itm)$/;"	f	class:vehicle
add_item_keep_invlet	inventory.cpp	/^void inventory::add_item_keep_invlet(item newit)$/;"	f	class:inventory
add_message	tutorial.cpp	/^void tutorial_game::add_message(game *g, tut_lesson lesson)$/;"	f	class:tutorial_game
add_morale	player.cpp	/^void player::add_morale(morale_type type, int bonus, int max_bonus,$/;"	f	class:player
add_msg	game.cpp	/^void game::add_msg(const char* msg, ...)$/;"	f	class:game
add_msg_if_player	game.cpp	/^void game::add_msg_if_player(player *p, const char* msg, ...)$/;"	f	class:game
add_note	overmap.cpp	/^void overmap::add_note(int const x, int const y, int const z, std::string const & message)$/;"	f	class:overmap
add_option	computer.cpp	/^void computer::add_option(std::string opt_name, computer_action action,$/;"	f	class:computer
add_or_drop_item	iuse.cpp	/^static void add_or_drop_item(game *g, player *p, item *it)$/;"	f	file:
add_spawn	mapgen.cpp	/^void map::add_spawn(mon_id type, int count, int x, int y, bool friendly,$/;"	f	class:map
add_spawn	mapgen.cpp	/^void map::add_spawn(monster *mon)$/;"	f	class:map
add_stack	inventory.cpp	/^void inventory::add_stack(const std::vector<item> newits)$/;"	f	class:inventory
add_submap	mapbuffer.cpp	/^bool mapbuffer::add_submap(int x, int y, int z, submap *sm)$/;"	f	class:mapbuffer
add_trap	map.cpp	/^void map::add_trap(const int x, const int y, const trap_id t)$/;"	f	class:map
add_type	pldata.h	/^enum add_type {$/;"	g
add_vehicle	mapgen.cpp	/^vehicle *map::add_vehicle(game *g, vhtype_id type, int x, int y, int dir)$/;"	f	class:map
addedchar	catacurse.cpp	/^inline void addedchar(WINDOW *win){$/;"	f
addict	itype.h	/^    unsigned char addict;	\/\/ Addictiveness potential$/;"	m	struct:it_comest
addict_effect	addiction.h	/^void addict_effect(game *g, addiction &add)$/;"	f
addiction	pldata.h	/^ addiction() { type = ADD_NULL; intensity = 0; sated = 600; }$/;"	f	struct:addiction
addiction	pldata.h	/^ addiction(add_type t) { type = t; intensity = 1; sated = 600; }$/;"	f	struct:addiction
addiction	pldata.h	/^ addiction(add_type t, int i) { type = t; intensity = i; sated = 600; }$/;"	f	struct:addiction
addiction	pldata.h	/^struct addiction$/;"	s
addiction_level	player.cpp	/^int player::addiction_level(add_type type)$/;"	f	class:player
addiction_name	addiction.h	/^std::string addiction_name(addiction cur)$/;"	f
addiction_text	addiction.h	/^std::string addiction_text(addiction cur)$/;"	f
addictions	player.h	/^ std::vector <addiction> addictions;$/;"	m	class:player
additions	mutation.h	/^ std::vector<pl_flag> additions; \/\/ Mutations that add to this one$/;"	m	struct:mutation_branch
address_needs	npcmove.cpp	/^npc_action npc::address_needs(game *g, int danger)$/;"	f	class:npc
address_player	npcmove.cpp	/^npc_action npc::address_player(game *g)$/;"	f	class:npc
adjective	artifactdata.h	/^ std::string adjective;$/;"	m	struct:artifact_weapon_datum
advance	tileray.cpp	/^void tileray::advance (int num)$/;"	f	class:tileray
advance_nextinv	game.cpp	/^void game::advance_nextinv()$/;"	f	class:game
age	mapdata.h	/^ int age;$/;"	m	struct:field
aggression	npc.h	/^ signed char aggression;$/;"	m	struct:npc_personality
agro	mtype.h	/^ int agro;	\/\/ How likely to attack; -100 to 100$/;"	m	struct:mtype
alarmed	mapdata.h	/^ alarmed,      \/\/ Sets off an alarm if smashed$/;"	e	enum:t_flag
alcohol	iuse.cpp	/^void iuse::alcohol(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
alcohol_weak	iuse.cpp	/^void iuse::alcohol_weak(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
allow_camp	map.cpp	/^bool map::allow_camp(const int x, const int y, const int radius)$/;"	f	class:map
alpha	dialogue.h	/^ player *alpha;$/;"	m	struct:dialogue
alt_attack	npcmove.cpp	/^void npc::alt_attack(game *g, int target)$/;"	f	class:npc
alt_attack_available	npcmove.cpp	/^bool npc::alt_attack_available(game *g)$/;"	f	class:npc
altruism	npc.h	/^ signed char altruism;$/;"	m	struct:npc_personality
always	mission.h	/^ bool always		(game *g, int posx, int posy) { return true;  }$/;"	f	struct:mission_place
always	omdata.h	/^ bool always     (overmap *om, tripoint p) { return true;  }$/;"	f	struct:omspec_place
ambient_light_at	lightmap.cpp	/^float map::ambient_light_at(int dx, int dy)$/;"	f	class:map
amigara	mondeath.cpp	/^void mdeath::amigara(game *g, monster *z)$/;"	f	class:mdeath
ammo	itype.h	/^ ammotype ammo;$/;"	m	struct:it_gun
ammo	itype.h	/^ ammotype ammo;$/;"	m	struct:it_tool
ammo_effect	itype.h	/^enum ammo_effect {$/;"	g
ammo_effects	itype.h	/^ unsigned ammo_effects : NUM_AMMO_EFFECTS;$/;"	m	struct:it_ammo
ammo_effects	ranged.cpp	/^void ammo_effects(game *g, int x, int y, long effects)$/;"	f
ammo_name	itypedef.cpp	/^std::string ammo_name(ammotype t)$/;"	f
ammo_type	item.cpp	/^ammotype item::ammo_type()$/;"	f	class:item
ammotype	itype.h	/^enum ammotype {$/;"	g
amount	vehicle.h	/^        int amount;         \/\/ amount of fuel for tank$/;"	m	union:vehicle_part::__anon9
amount_of	inventory.cpp	/^int inventory::amount_of(itype_id it)$/;"	f	class:inventory
amount_of	player.cpp	/^int player::amount_of(itype_id it)$/;"	f	class:player
anger	monster.h	/^ int anger, morale;$/;"	m	class:monster
anger	mtype.h	/^ std::vector<monster_trigger> anger;   \/\/ What angers us?$/;"	m	struct:mtype
anger	npc.h	/^ int anger;$/;"	m	struct:npc_opinion
antibiotic	iuse.cpp	/^void iuse::antibiotic(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
antqueen	monattack.cpp	/^void mattack::antqueen(game *g, monster *z)$/;"	f	class:mattack
apply_light_arc	lightmap.cpp	/^void map::apply_light_arc(int x, int y, int angle, float luminance)$/;"	f	class:map
apply_light_ray	lightmap.cpp	/^void map::apply_light_ray(bool lit[LIGHTMAP_CACHE_X][LIGHTMAP_CACHE_Y],$/;"	f	class:map
apply_light_source	lightmap.cpp	/^void map::apply_light_source(int x, int y, float luminance)$/;"	f	class:map
armor_bash	monster.cpp	/^int monster::armor_bash()$/;"	f	class:monster
armor_bash	mtype.h	/^ unsigned char armor_bash;	\/\/ Natural armor vs. bash$/;"	m	struct:mtype
armor_bash	player.cpp	/^int player::armor_bash(body_part bp)$/;"	f	class:player
armor_cut	monster.cpp	/^int monster::armor_cut()$/;"	f	class:monster
armor_cut	mtype.h	/^ unsigned char armor_cut;	\/\/ Natural armor vs. cut$/;"	m	struct:mtype
armor_cut	player.cpp	/^int player::armor_cut(body_part bp)$/;"	f	class:player
array	picojson.h	/^    typedef std::vector<value> array;$/;"	t	class:picojson::value
array	picojson.h	/^  typedef value::array array;$/;"	t	namespace:picojson
array_	picojson.h	/^      array* array_;$/;"	m	union:picojson::value::__anon7
array_type	picojson.h	/^    array_type,$/;"	e	enum:picojson::__anon6
art_charge	artifact.h	/^enum art_charge$/;"	g
art_effect_active	artifact.h	/^enum art_effect_active {$/;"	g
art_effect_passive	artifact.h	/^enum art_effect_passive {$/;"	g
artifact	iuse.cpp	/^void iuse::artifact(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
artifact_adj	artifactdata.h	/^std::string artifact_adj[NUM_ART_ADJS] = {$/;"	v
artifact_armor_form	artifactdata.h	/^enum artifact_armor_form$/;"	g
artifact_armor_form_data	artifactdata.h	/^artifact_armor_form_datum artifact_armor_form_data[NUM_ARTARMFORMS] = {$/;"	v
artifact_armor_form_datum	artifactdata.h	/^struct artifact_armor_form_datum$/;"	s
artifact_armor_mod	artifactdata.h	/^enum artifact_armor_mod$/;"	g
artifact_armor_mod_data	artifactdata.h	/^artifact_armor_form_datum artifact_armor_mod_data[NUM_ARMORMODS] = {$/;"	v
artifact_itype_ids	itypedef.cpp	/^std::vector<std::string> artifact_itype_ids;$/;"	v
artifact_name	artifact.cpp	/^std::string artifact_name(std::string type)$/;"	f
artifact_natural_property	artifact.h	/^enum artifact_natural_property$/;"	g
artifact_natural_shape	artifact.h	/^enum artifact_natural_shape$/;"	g
artifact_noun	artifactdata.h	/^std::string artifact_noun[NUM_ART_NOUNS] = {$/;"	v
artifact_property_data	artifactdata.h	/^artifact_property_datum artifact_property_data[ARTPROP_MAX] = {$/;"	v
artifact_property_datum	artifactdata.h	/^struct artifact_property_datum$/;"	s
artifact_shape_data	artifactdata.h	/^artifact_shape_datum artifact_shape_data[ARTSHAPE_MAX] = {$/;"	v
artifact_shape_datum	artifactdata.h	/^struct artifact_shape_datum$/;"	s
artifact_tool_form	artifactdata.h	/^enum artifact_tool_form$/;"	g
artifact_tool_form_data	artifactdata.h	/^artifact_tool_form_datum artifact_tool_form_data[NUM_ARTTOOLFORMS] = {$/;"	v
artifact_tool_form_datum	artifactdata.h	/^struct artifact_tool_form_datum$/;"	s
artifact_weapon_data	artifactdata.h	/^artifact_weapon_datum artifact_weapon_data[NUM_ARTWEAPS] = {$/;"	v
artifact_weapon_datum	artifactdata.h	/^struct artifact_weapon_datum$/;"	s
artifact_weapon_type	artifactdata.h	/^enum artifact_weapon_type$/;"	g
as_vector	inventory.cpp	/^std::vector<item> inventory::as_vector()$/;"	f	class:inventory
assign_activity	player.cpp	/^void player::assign_activity(game* g, activity_type type, int moves, int index)$/;"	f	class:player
assign_base	npctalk.cpp	/^void talk_function::assign_base(game *g, npc *p)$/;"	f	class:talk_function
assign_empty_invlet	inventory.cpp	/^void inventory::assign_empty_invlet(item &it, player *p)$/;"	f	class:inventory
assign_faction_id	game.cpp	/^int game::assign_faction_id()$/;"	f	class:game
assign_mission	game.cpp	/^void game::assign_mission(int id)$/;"	f	class:game
assign_mission	npctalk.cpp	/^void talk_function::assign_mission(game *g, npc *p)$/;"	f	class:talk_function
assign_mission_id	game.cpp	/^int game::assign_mission_id()$/;"	f	class:game
assign_npc_id	game.cpp	/^int game::assign_npc_id()$/;"	f	class:game
assigned_missions_value	npc.cpp	/^int npc::assigned_missions_value(game *g)$/;"	f	class:npc
astar_list	map.cpp	/^enum astar_list {$/;"	g	file:
attack_speed	melee.cpp	/^int attack_speed(player &u, bool missed)$/;"	f
attack_time	item.cpp	/^int item::attack_time()$/;"	f	class:item
attitude	monster.cpp	/^monster_attitude monster::attitude(player *u)$/;"	f	class:monster
attitude	npc.h	/^ npc_attitude attitude;	\/\/ What we want to do to the player$/;"	m	class:npc
attr_t	catacurse.h	/^typedef unsigned short	attr_t;$/;"	t
attroff	catacurse.cpp	/^int attroff(int attrs)$/;"	f
attron	catacurse.cpp	/^int attron(int attrs)$/;"	f
autosafemode	game.h	/^  bool autosafemode; \/\/ is autosafemode enabled?$/;"	m	class:game
autosave	game.cpp	/^void game::autosave()$/;"	f	class:game
autosave_timeout	game.cpp	/^int game::autosave_timeout()$/;"	f	class:game
available_mods	artifactdata.h	/^ artifact_armor_mod available_mods[5];$/;"	m	struct:artifact_armor_form_datum
average_damage_dealt	npc.cpp	/^int npc::average_damage_dealt()$/;"	f	class:npc
avg_temperature	weather.h	/^ int avg_temperature[4]; \/\/ Spring, Summer, Winter, Fall$/;"	m	struct:weather_datum
avoid_friendly_fire	npcmove.cpp	/^void npc::avoid_friendly_fire(game *g, int target)$/;"	f	class:npc
avoid_trap	player.cpp	/^bool player::avoid_trap(trap* tr)$/;"	f	class:player
avoidance	trap.h	/^ int avoidance;	\/\/ 0 to ??, affects avoidance$/;"	m	struct:trap
avoidance_vehicles_radius	npcmove.cpp	/^const int avoidance_vehicles_radius = 5;$/;"	v
bLowerIsBetter	item.h	/^  bool bLowerIsBetter; \/\/Lower values are better (red <-> green)$/;"	m	struct:iteminfo
bNewLine	item.h	/^  bool bNewLine; \/\/New line at the end$/;"	m	struct:iteminfo
backbit	catacurse.cpp	/^HBITMAP backbit;        \/\/the bitmap that is used in conjunction wth the above$/;"	v
backbuffer	catacurse.cpp	/^HDC backbuffer;         \/\/an off-screen DC to prevent flickering, lower cpu$/;"	v
backlog	player.h	/^ player_activity backlog;$/;"	m	class:player
bad_fac_id	mission.h	/^ int good_fac_id, bad_fac_id;	\/\/ IDs of the protagonist\/antagonist factions$/;"	m	struct:mission
bandage	iuse.cpp	/^void iuse::bandage(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
base_damage	melee.cpp	/^int player::base_damage(bool real_life, int stat)$/;"	f	class:player
base_to_hit	melee.cpp	/^int player::base_to_hit(bool real_life, int stat)$/;"	f	class:player
base_weapon	artifactdata.h	/^ artifact_weapon_type base_weapon;$/;"	m	struct:artifact_tool_form_datum
basecamp	basecamp.cpp	/^basecamp::basecamp()$/;"	f	class:basecamp
basecamp	basecamp.cpp	/^basecamp::basecamp(std::string const& name_, int const posx_, int const posy_)$/;"	f	class:basecamp
basecamp	basecamp.h	/^class basecamp$/;"	c
bash	map.cpp	/^bool map::bash(const int x, const int y, const int str, std::string &sound, int *res)$/;"	f	class:map
bash	player.h	/^ int bash;$/;"	m	struct:special_attack
bash_max	artifactdata.h	/^ int bash_min, bash_max;$/;"	m	struct:artifact_weapon_datum
bash_min	artifactdata.h	/^ int bash_min, bash_max;$/;"	m	struct:artifact_weapon_datum
bashable	mapdata.h	/^ bashable,     \/\/ Player & monsters can bash this & make it the next in the list$/;"	e	enum:t_flag
basic_consumption	vehicle.cpp	/^int vehicle::basic_consumption (int ftype)$/;"	f	class:vehicle
bday	item.h	/^ unsigned int bday;     \/\/ The turn on which it was created$/;"	m	class:item
beartrap	trapfunc.cpp	/^void trapfunc::beartrap(game *g, int x, int y)$/;"	f	class:trapfunc
beartrap	trapfunc.cpp	/^void trapfuncm::beartrap(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
best_skill	npc.cpp	/^skill npc::best_skill()$/;"	f	class:npc
beta	dialogue.h	/^ npc *beta;$/;"	m	struct:dialogue
bigness	item.h	/^   int bigness;         \/\/ engine power, wheel size$/;"	m	union:item::__anon4
bigness	vehicle.h	/^    int bigness;            \/\/ size of engine, wheel radius, translates to item properties.$/;"	m	struct:vehicle_part
bigness_aspect	itype.h	/^ bigness_property_aspect bigness_aspect;$/;"	m	struct:itype
bigness_property_aspect	itype.h	/^enum bigness_property_aspect {$/;"	g
bionic	bionics.h	/^ bionic() {$/;"	f	struct:bionic
bionic	bionics.h	/^ bionic(bionic_id pid, char pinvlet) {$/;"	f	struct:bionic
bionic	bionics.h	/^struct bionic {$/;"	s
bionic_data	bionics.cpp	/^bionic_data::bionic_data(std::string new_name, bool new_power_source, bool new_activated,$/;"	f	class:bionic_data
bionic_data	bionics.h	/^class bionic_data {$/;"	c
bionic_id	bionics.h	/^typedef std::string bionic_id;$/;"	t
bionics	bionics.cpp	/^std::map<bionic_id, bionic_data*> bionics;$/;"	v
bionics_install_failure	bionics.cpp	/^void bionics_install_failure(game *g, player *u, int success)$/;"	f
bite	monattack.cpp	/^void mattack::bite(game *g, monster *z)$/;"	f	class:mattack
blade	trapfunc.cpp	/^void trapfunc::blade(game *g, int x, int y)$/;"	f	class:trapfunc
blade	trapfunc.cpp	/^void trapfuncm::blade(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
blech	iuse.cpp	/^void iuse::blech(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
blobsplit	mondeath.cpp	/^void mdeath::blobsplit(game *g, monster *z)$/;"	f	class:mdeath
blocks_left	player.h	/^ int dodges_left, blocks_left;$/;"	m	class:player
blood	vehicle.h	/^    int blood;              \/\/ how much blood covers part (in turns). only useful for external$/;"	m	struct:vehicle_part
board	trapfunc.cpp	/^void trapfunc::board(game *g, int x, int y)$/;"	f	class:trapfunc
board	trapfunc.cpp	/^void trapfuncm::board(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
board_name	basecamp.cpp	/^std::string basecamp::board_name() const$/;"	f	class:basecamp
board_vehicle	map.cpp	/^void map::board_vehicle(game *g, int x, int y, player *p)$/;"	f	class:map
board_x	basecamp.h	/^	inline int board_x() const { return posx; }$/;"	f	class:basecamp
board_y	basecamp.h	/^	inline int board_y() const { return posy; }$/;"	f	class:basecamp
boarded_parts	vehicle.cpp	/^std::vector<int> vehicle::boarded_parts()$/;"	f	class:vehicle
body_part	bodypart.h	/^enum body_part {$/;"	g
body_part_name	bodypart.cpp	/^std::string body_part_name (body_part bp, int side)$/;"	f
boltcutters	iuse.cpp	/^void iuse::boltcutters(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
bonus	morale.h	/^ int bonus;$/;"	m	struct:morale_point
bonus	veh_type.h	/^        int bonus;      \/\/ seatbelt (str), muffler (%)$/;"	m	union:vpart_info::__anon10
boobytrap	trapfunc.cpp	/^void trapfunc::boobytrap(game *g, int x, int y)$/;"	f	class:trapfunc
boobytrap	trapfunc.cpp	/^void trapfuncm::boobytrap(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
boolean_	picojson.h	/^      bool boolean_;$/;"	m	union:picojson::value::__anon7
boolean_type	picojson.h	/^    boolean_type,$/;"	e	enum:picojson::__anon6
boomer	monattack.cpp	/^void mattack::boomer(game *g, monster *z)$/;"	f	class:mattack
boomer	mondeath.cpp	/^void mdeath::boomer(game *g, monster *z)$/;"	f	class:mdeath
bp_arms	bodypart.h	/^ bp_arms,$/;"	e	enum:body_part
bp_eyes	bodypart.h	/^ bp_eyes,$/;"	e	enum:body_part
bp_feet	bodypart.h	/^ bp_feet,$/;"	e	enum:body_part
bp_hands	bodypart.h	/^ bp_hands,$/;"	e	enum:body_part
bp_head	bodypart.h	/^ bp_head,$/;"	e	enum:body_part
bp_legs	bodypart.h	/^ bp_legs,$/;"	e	enum:body_part
bp_mouth	bodypart.h	/^ bp_mouth,$/;"	e	enum:body_part
bp_torso	bodypart.h	/^ bp_torso = 0,$/;"	e	enum:body_part
bravery	npc.h	/^ signed char bravery;$/;"	m	struct:npc_personality
bravery_check	npc.cpp	/^bool npc::bravery_check(int diff)$/;"	f	class:npc
breathe	monattack.cpp	/^void mattack::breathe(game *g, monster *z)$/;"	f	class:mattack
bubble	trapfunc.cpp	/^void trapfunc::bubble(game *g, int x, int y)$/;"	f	class:trapfunc
bubble	trapfunc.cpp	/^void trapfuncm::bubble(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
build_anthill	overmap.cpp	/^void overmap::build_anthill(int x, int y, int z, int s)$/;"	f	class:overmap
build_lab	overmap.cpp	/^bool overmap::build_lab(int x, int y, int z, int s)$/;"	f	class:overmap
build_mansion_room	mapgen.cpp	/^void build_mansion_room(map *m, room_type type, int x1, int y1, int x2, int y2)$/;"	f
build_map_cache	map.cpp	/^void map::build_map_cache(game *g)$/;"	f	class:map
build_mine	overmap.cpp	/^void overmap::build_mine(int x, int y, int z, int s)$/;"	f	class:overmap
build_mine_room	mapgen.cpp	/^void build_mine_room(map *m, room_type type, int x1, int y1, int x2, int y2)$/;"	f
build_outside_cache	map.cpp	/^void map::build_outside_cache()$/;"	f	class:map
build_seen_cache	map.cpp	/^void map::build_seen_cache(game *g)$/;"	f	class:map
build_slimepit	overmap.cpp	/^bool overmap::build_slimepit(int x, int y, int z, int s)$/;"	f	class:overmap
build_transparency_cache	map.cpp	/^void map::build_transparency_cache()$/;"	f	class:map
build_tunnel	overmap.cpp	/^void overmap::build_tunnel(int x, int y, int z, int s, int dir)$/;"	f	class:overmap
building_on_hiway	overmap.cpp	/^void overmap::building_on_hiway(int x, int y, int dir)$/;"	f	class:overmap
bullet_puller	iuse.cpp	/^void iuse::bullet_puller(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
bulletin_board	iexamine.cpp	/^void iexamine::bulletin_board(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
burn	item.cpp	/^bool item::burn(int amount)$/;"	f	class:item
burnt	item.h	/^ char burnt;	         \/\/ How badly we're burnt$/;"	m	class:item
burst	itype.h	/^ signed char accuracy, damage, loudness, clip, recoil, burst;$/;"	m	struct:it_gunmod
burst	itype.h	/^ unsigned char burst;$/;"	m	struct:it_gun
burst_size	item.cpp	/^int item::burst_size()$/;"	f	class:item
butcher	game.cpp	/^void game::butcher()$/;"	f	class:game
butcher_factor	player.cpp	/^int player::butcher_factor()$/;"	f	class:player
by_highway	overmap.cpp	/^bool omspec_place::by_highway(overmap *om, tripoint p)$/;"	f	class:omspec_place
c4	iuse.cpp	/^void iuse::c4(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
c4armed	iuse.cpp	/^void iuse::c4armed(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
c_black	color.h	/^c_black   = COLOR_PAIR(30),$/;"	e	enum:nc_color
c_blue	color.h	/^c_blue    = COLOR_PAIR(4),$/;"	e	enum:nc_color
c_blue_red	color.h	/^c_blue_red    = COLOR_PAIR(26),$/;"	e	enum:nc_color
c_brown	color.h	/^c_brown   = COLOR_PAIR(7),$/;"	e	enum:nc_color
c_brown_red	color.h	/^c_brown_red   = COLOR_PAIR(29),$/;"	e	enum:nc_color
c_cyan	color.h	/^c_cyan    = COLOR_PAIR(5),$/;"	e	enum:nc_color
c_cyan_red	color.h	/^c_cyan_red    = COLOR_PAIR(27),$/;"	e	enum:nc_color
c_dkgray	color.h	/^c_dkgray  = COLOR_PAIR(30) | A_BOLD,$/;"	e	enum:nc_color
c_dkgray_red	color.h	/^c_dkgray_red  = COLOR_PAIR(9),$/;"	e	enum:nc_color
c_green	color.h	/^c_green   = COLOR_PAIR(3),$/;"	e	enum:nc_color
c_green_red	color.h	/^c_green_red   = COLOR_PAIR(25),$/;"	e	enum:nc_color
c_ltblue	color.h	/^c_ltblue  = COLOR_PAIR(4)  | A_BOLD,$/;"	e	enum:nc_color
c_ltblue_red	color.h	/^c_ltblue_red  = COLOR_PAIR(26) | A_BOLD,$/;"	e	enum:nc_color
c_ltcyan	color.h	/^c_ltcyan  = COLOR_PAIR(5)  | A_BOLD,$/;"	e	enum:nc_color
c_ltcyan_red	color.h	/^c_ltcyan_red  = COLOR_PAIR(27) | A_BOLD,$/;"	e	enum:nc_color
c_ltgray	color.h	/^c_ltgray  = COLOR_PAIR(1),$/;"	e	enum:nc_color
c_ltgray_red	color.h	/^c_ltgray_red  = COLOR_PAIR(23),$/;"	e	enum:nc_color
c_ltgreen	color.h	/^c_ltgreen = COLOR_PAIR(3)  | A_BOLD,$/;"	e	enum:nc_color
c_ltgreen_red	color.h	/^c_ltgreen_red = COLOR_PAIR(25) | A_BOLD,$/;"	e	enum:nc_color
c_ltred	color.h	/^c_ltred   = COLOR_PAIR(2)  | A_BOLD,$/;"	e	enum:nc_color
c_ltred_red	color.h	/^c_ltred_red   = COLOR_PAIR(24) | A_BOLD,$/;"	e	enum:nc_color
c_magenta	color.h	/^c_magenta = COLOR_PAIR(6),$/;"	e	enum:nc_color
c_magenta_red	color.h	/^c_magenta_red = COLOR_PAIR(28),$/;"	e	enum:nc_color
c_pink	color.h	/^c_pink    = COLOR_PAIR(6)  | A_BOLD,$/;"	e	enum:nc_color
c_pink_red	color.h	/^c_pink_red    = COLOR_PAIR(28) | A_BOLD,$/;"	e	enum:nc_color
c_red	color.h	/^c_red     = COLOR_PAIR(2),$/;"	e	enum:nc_color
c_red_red	color.h	/^c_red_red     = COLOR_PAIR(9),$/;"	e	enum:nc_color
c_white	color.h	/^c_white   = COLOR_PAIR(1)  | A_BOLD,$/;"	e	enum:nc_color
c_white_red	color.h	/^c_white_red   = COLOR_PAIR(23) | A_BOLD,$/;"	e	enum:nc_color
c_yellow	color.h	/^c_yellow  = COLOR_PAIR(7)  | A_BOLD,$/;"	e	enum:nc_color
c_yellow_red	color.h	/^c_yellow_red  = COLOR_PAIR(29) | A_BOLD$/;"	e	enum:nc_color
cache_seen	lightmap.cpp	/^void map::cache_seen(int fx, int fy, int tx, int ty, int max_range)$/;"	f	class:map
caff	iuse.cpp	/^void iuse::caff(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
calc_HP	newcharacter.cpp	/^int calc_HP(int strength, bool tough)$/;"	f
calculate_missed_by	ranged.cpp	/^double calculate_missed_by(player &p, int trange, item* weapon)$/;"	f
calculate_range	ranged.cpp	/^int calculate_range(player &p, int tarx, int tary)$/;"	f
calendar	calendar.cpp	/^calendar::calendar()$/;"	f	class:calendar
calendar	calendar.cpp	/^calendar::calendar(const calendar &copy)$/;"	f	class:calendar
calendar	calendar.cpp	/^calendar::calendar(int Minute, int Hour, int Day, season_type Season, int Year)$/;"	f	class:calendar
calendar	calendar.cpp	/^calendar::calendar(int turn)$/;"	f	class:calendar
calendar	calendar.h	/^class calendar$/;"	c
camp	mapdata.h	/^ basecamp camp;  \/\/ only allowing one basecamp per submap$/;"	m	struct:submap
camp_at	map.cpp	/^basecamp* map::camp_at(const int x, const int y, const int radius)$/;"	f	class:map
camp_name	basecamp.h	/^	inline std::string const& camp_name() const { return name; }$/;"	f	class:basecamp::std
can_goo	iuse.cpp	/^void iuse::can_goo(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
can_hear	monster.cpp	/^bool monster::can_hear()$/;"	f	class:monster
can_make	crafting.cpp	/^bool game::can_make(recipe *r)$/;"	f	class:game
can_mount	veh_interact.h	/^    std::vector<int> can_mount;$/;"	m	class:veh_interact
can_mount	vehicle.cpp	/^bool vehicle::can_mount (int dx, int dy, vpart_id id)$/;"	f	class:vehicle
can_move_to	monmove.cpp	/^bool monster::can_move_to(map &m, int x, int y)$/;"	f	class:monster
can_move_to	npcmove.cpp	/^bool npc::can_move_to(game *g, int x, int y)$/;"	f	class:npc
can_reload	npcmove.cpp	/^bool npc::can_reload()$/;"	f	class:npc
can_see	monster.cpp	/^bool monster::can_see()$/;"	f	class:monster
can_sleep	player.cpp	/^bool player::can_sleep(game *g)$/;"	f	class:player
can_unmount	vehicle.cpp	/^bool vehicle::can_unmount (int p)$/;"	f	class:vehicle
cancel_activity	game.cpp	/^void game::cancel_activity()$/;"	f	class:game
cancel_activity	player.cpp	/^void player::cancel_activity()$/;"	f	class:player
cancel_activity_query	game.cpp	/^void game::cancel_activity_query(const char* message, ...)$/;"	f	class:game
cancels	mutation.h	/^ std::vector<pl_flag> cancels; \/\/ Mutations that conflict with this one$/;"	m	struct:mutation_branch
candidate_vpart	veh_interact.cpp	/^   candidate_vpart(int i, item vpitem):$/;"	f	struct:candidate_vpart
candidate_vpart	veh_interact.cpp	/^   candidate_vpart(int x, int y, int i, item vpitem):$/;"	f	struct:candidate_vpart
candidate_vpart	veh_interact.cpp	/^struct candidate_vpart {$/;"	s	file:
candle	iuse.cpp	/^void iuse::candle(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
candle_lit	iuse.cpp	/^void iuse::candle_lit(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
cant_do	veh_interact.cpp	/^int veh_interact::cant_do (char mode)$/;"	f	class:veh_interact
caravan	defense.cpp	/^void defense_game::caravan(game *g)$/;"	f	class:defense_game
caravan_category	gamemode.h	/^enum caravan_category {$/;"	g
caravan_category_name	defense.cpp	/^std::string caravan_category_name(caravan_category cat)$/;"	f
caravan_items	defense.cpp	/^std::vector<itype_id> caravan_items(caravan_category cat)$/;"	f
caravan_price	defense.cpp	/^int caravan_price(player &u, int price) {$/;"	f
cardreader	iexamine.cpp	/^void iexamine::cardreader(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
cash	player.h	/^ int cash;$/;"	m	class:player
cash_increase	gamemode.h	/^ int cash_increase;	\/\/ How much does the above increase per wave?$/;"	m	struct:defense_game
cash_per_wave	gamemode.h	/^ int cash_per_wave;	\/\/ How much cash do we get per wave?$/;"	m	struct:defense_game
categories	mtype.h	/^ std::vector<m_category> categories;$/;"	m	struct:mtype
category	crafting.h	/^  craft_cat category;$/;"	m	struct:recipe
cauterize	player.cpp	/^void player::cauterize(game *g) {$/;"	f	class:player
cauterize_elec	iuse.cpp	/^void iuse::cauterize_elec(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
cbreak	catacurse.cpp	/^int cbreak(void)$/;"	f
chainfence	iexamine.cpp	/^void iexamine::chainfence(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
chainsaw_off	iuse.cpp	/^void iuse::chainsaw_off(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
chainsaw_on	iuse.cpp	/^void iuse::chainsaw_on(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
chance	mapdata.h	/^ unsigned int chance;$/;"	m	struct:map_extras
chance	mapitems.h	/^ int chance;$/;"	m	struct:items_location_and_chance
chances	mapdata.h	/^ int chances[num_map_extras + 1];$/;"	m	struct:map_extras
character_type	pldata.h	/^enum character_type {$/;"	g
charge	bionics.h	/^ int charge;$/;"	m	struct:bionic
charge_power	player.cpp	/^void player::charge_power(int amount)$/;"	f	class:player
charge_time	bionics.h	/^     int charge_time;	\/\/ How long, when activated, between drawing power_cost$/;"	m	class:bionic_data
charge_type	itype.h	/^ art_charge charge_type;$/;"	m	struct:it_artifact_tool
charges	item.h	/^ int charges;$/;"	m	class:item
charges	itype.h	/^    unsigned char charges;	\/\/ Defaults # of charges (drugs, loaf of bread? etc)$/;"	m	struct:it_comest
charges_of	inventory.cpp	/^int inventory::charges_of(itype_id it)$/;"	f	class:inventory
charges_of	player.cpp	/^int player::charges_of(itype_id it)$/;"	f	class:player
charges_per_use	itype.h	/^ unsigned char charges_per_use;$/;"	m	struct:it_tool
chars	catacurse.h	/^char *chars;$/;"	m	struct:__anon2
chat	game.cpp	/^void game::chat()$/;"	f	class:game
chatbin	npc.h	/^ npc_chatbin chatbin;$/;"	m	class:npc
choose_escape_item	npcmove.cpp	/^int npc::choose_escape_item()$/;"	f	class:npc
choose_monster_target	npcmove.cpp	/^void npc::choose_monster_target(game *g, int &enemy, int &danger,$/;"	f	class:npc
choose_point	overmap.cpp	/^point overmap::choose_point(game *g, int const zlevel)$/;"	f	class:overmap
chtype	catacurse.h	/^typedef int	chtype;$/;"	t
cig	iuse.cpp	/^void iuse::cig(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
cities	overmap.h	/^  std::vector<city> cities;$/;"	m	class:overmap
city	overmap.h	/^ city(int X = -1, int Y = -1, int S = -1) : x (X), y (Y), s (S) {}$/;"	f	struct:city
city	overmap.h	/^struct city {$/;"	s
clairvoyance	player.cpp	/^int player::clairvoyance()$/;"	f	class:player
cleanup_at_end	game.cpp	/^void game::cleanup_at_end(){$/;"	f	class:game
cleanup_dead	game.cpp	/^void game::cleanup_dead()$/;"	f	class:game
clear	catacurse.cpp	/^int clear(void)$/;"	f
clear	inventory.cpp	/^void inventory::clear()$/;"	f	class:inventory
clear_bindings	action.cpp	/^void game::clear_bindings(action_id act)$/;"	f	class:game
clear_mission	npctalk.cpp	/^void talk_function::clear_mission(game *g, npc *p)$/;"	f	class:talk_function
clear_path	map.cpp	/^bool map::clear_path(const int Fx, const int Fy, const int Tx, const int Ty,$/;"	f	class:map
clear_spawns	map.cpp	/^void map::clear_spawns()$/;"	f	class:map
clear_traps	map.cpp	/^void map::clear_traps()$/;"	f	class:map
clear_vehicle_cache	map.cpp	/^void map::clear_vehicle_cache()$/;"	f	class:map
clip	itype.h	/^ int clip;$/;"	m	struct:it_gun
clip	itype.h	/^ signed char accuracy, damage, loudness, clip, recoil, burst;$/;"	m	struct:it_gunmod
clip_size	item.cpp	/^int item::clip_size()$/;"	f	class:item
close	game.cpp	/^void game::close()$/;"	f	class:game
close_door	map.cpp	/^bool map::close_door(const int x, const int y, const bool inside)$/;"	f	class:map
closest_city	overmap.cpp	/^int overmap::closest_city(point p)$/;"	f	class:overmap
coke	iuse.cpp	/^void iuse::coke(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
col_attribute	color.h	/^enum col_attribute {$/;"	g
collapses	mapdata.h	/^ collapses,    \/\/ Tiles that have a roof over them (which can collapse)$/;"	e	enum:t_flag
collector	npc.h	/^ signed char collector;$/;"	m	struct:npc_personality
color	artifactdata.h	/^ nc_color color;$/;"	m	struct:artifact_armor_form_datum
color	artifactdata.h	/^ nc_color color;$/;"	m	struct:artifact_tool_form_datum
color	item.cpp	/^nc_color item::color()$/;"	f	class:item
color	item.cpp	/^nc_color item::color(player *u)$/;"	f	class:item
color	itype.h	/^ nc_color color;	\/\/ Color on the map (color.h)$/;"	m	struct:itype
color	mapdata.h	/^ nc_color color;$/;"	m	struct:ter_t
color	mapdata.h	/^ nc_color color[3];$/;"	m	struct:field_t
color	mtype.h	/^ nc_color color;\/\/ Color of symbol (see color.h)$/;"	m	struct:mtype
color	omdata.h	/^ nc_color color;$/;"	m	struct:oter_t
color	player.cpp	/^nc_color player::color()$/;"	f	class:player
color	trap.h	/^ nc_color color;$/;"	m	struct:trap
color	veh_type.h	/^    nc_color color;         \/\/ color$/;"	m	struct:vpart_info
color	weather.h	/^ nc_color color;$/;"	m	struct:weather_datum
color_broken	veh_type.h	/^    nc_color color_broken;  \/\/ color of broken part$/;"	m	struct:vpart_info
color_in_inventory	item.cpp	/^nc_color item::color_in_inventory(player *u)$/;"	f	class:item
color_to_int	color.cpp	/^int color_to_int(nc_color col)$/;"	f
color_with_effects	monster.cpp	/^nc_color monster::color_with_effects()$/;"	f	class:monster
colorpairs	catacurse.cpp	/^pairs *colorpairs;   \/\/storage for pair'ed colored, should be dynamic, meh$/;"	v
combat_engagement	npc.h	/^enum combat_engagement {$/;"	g
combat_rules	npc.h	/^ npc_combat_rules combat_rules;$/;"	m	class:npc
comesttype	itype.h	/^    std::string comesttype; \/\/FOOD, DRINK, MED$/;"	m	struct:it_comest
coming_to_stairs	game.h	/^  std::vector<monster_and_count> coming_to_stairs;$/;"	m	class:game
comp	mapdata.h	/^ computer comp;$/;"	m	struct:submap
compare	inventory_ui.cpp	/^void game::compare(int iCompareX, int iCompareY)$/;"	f	class:game
compare_split_screen_popup	output.cpp	/^char compare_split_screen_popup(int iLeft, int iWidth, int iHeight, std::string sItemName, std::vector<iteminfo> vItemDisplay, std::vector<iteminfo> vItemCompare)$/;"	f
complete_butcher	game.cpp	/^void game::complete_butcher(int index)$/;"	f	class:game
complete_construction	construction.cpp	/^void game::complete_construction()$/;"	f	class:game
complete_craft	crafting.cpp	/^void game::complete_craft()$/;"	f	class:game
complete_disassemble	crafting.cpp	/^void game::complete_disassemble()$/;"	f	class:game
complete_vehicle	veh_interact.cpp	/^void complete_vehicle (game *g)$/;"	f
completed_missions	player.h	/^ std::vector<int> completed_missions;$/;"	m	class:player
component	crafting.h	/^ component() { type = "null"; count = 0; }$/;"	f	struct:component
component	crafting.h	/^ component(itype_id TYPE, int COUNT) : type (TYPE), count (COUNT) {}$/;"	f	struct:component
component	crafting.h	/^struct component$/;"	s
components	construction.h	/^ std::vector<component> components[3];$/;"	m	struct:construction_stage
components	crafting.h	/^  std::vector<component> components[20];$/;"	m	struct:recipe
components	trap.h	/^ std::vector<itype_id> components;	\/\/ For disassembly?$/;"	m	struct:trap
comprehension	skill.cpp	/^int SkillLevel::comprehension(int intellect, bool fastLearner) {$/;"	f	class:SkillLevel
comprehension_percent	player.cpp	/^int player::comprehension_percent(skill s, bool real_life)$/;"	f	class:player
computer	computer.cpp	/^computer::computer()$/;"	f	class:computer
computer	computer.cpp	/^computer::computer(std::string Name, int Security)$/;"	f	class:computer
computer	computer.h	/^class computer$/;"	c
computer_action	computer.h	/^enum computer_action$/;"	g
computer_at	map.cpp	/^computer* map::computer_at(const int x, const int y)$/;"	f	class:map
computer_failure	computer.h	/^enum computer_failure$/;"	g
computer_option	computer.h	/^ computer_option() { name = "Unknown", action = COMPACT_NULL, security = 0; };$/;"	f	struct:computer_option
computer_option	computer.h	/^ computer_option(std::string N, computer_action A, int S) :$/;"	f	struct:computer_option
computer_option	computer.h	/^struct computer_option$/;"	s
con_rigid	itype.h	/^ con_rigid,$/;"	e	enum:container_flags
con_seals	itype.h	/^ con_seals,$/;"	e	enum:container_flags
con_wtight	itype.h	/^ con_wtight,$/;"	e	enum:container_flags
conductive	item.cpp	/^bool item::conductive()$/;"	f	class:item
confident_range	npcmove.cpp	/^int npc::confident_range(int index)$/;"	f	class:npc
connects_to	mapgen.cpp	/^bool connects_to(oter_id there, int dir)$/;"	f
console	mapdata.h	/^ console,      \/\/ Used as a computer$/;"	e	enum:t_flag
const_stack	inventory.cpp	/^std::vector<item> inventory::const_stack(int i) const$/;"	f	class:inventory
construct	construction.h	/^struct construct \/\/ Construction functions.$/;"	s
constructable	construction.h	/^ constructable(int Id, std::string Name, int Diff,$/;"	f	struct:constructable
constructable	construction.h	/^struct constructable$/;"	s
construction_menu	construction.cpp	/^void game::construction_menu()$/;"	f	class:game
construction_stage	construction.h	/^ construction_stage(ter_id Terrain, int Time) :$/;"	f	struct:construction_stage
construction_stage	construction.h	/^struct construction_stage$/;"	s
constructions	game.h	/^  std::vector<constructable*> constructions; \/\/ The list of constructions$/;"	m	class:game
consume_fuel	vehicle.cpp	/^void vehicle::consume_fuel ()$/;"	f	class:vehicle
consume_items	crafting.cpp	/^void game::consume_items(std::vector<component> components)$/;"	f	class:game
consume_tools	crafting.cpp	/^void game::consume_tools(std::vector<component> tools)$/;"	f	class:game
consume_vpart_item	veh_interact.cpp	/^item consume_vpart_item (game *g, vpart_id vpid){$/;"	f
container	itype.h	/^    itype_id container;	\/\/ The container it comes in$/;"	m	struct:it_comest
container	mapdata.h	/^ container,    \/\/ Items on this square are hidden until looted by the player$/;"	e	enum:t_flag
container_flags	itype.h	/^enum container_flags {$/;"	g
contains	itype.h	/^ unsigned char contains;	\/\/ Internal volume$/;"	m	struct:it_container
contains	picojson.h	/^  inline bool value::contains(const std::string& key) const {$/;"	f	class:picojson::value
contains	picojson.h	/^  inline bool value::contains(size_t idx) const {$/;"	f	class:picojson::value
contents	graffiti.h	/^ std::string *contents;$/;"	m	class:graffiti
contents	item.h	/^ std::vector<item> contents;$/;"	m	class:item
continue_line	line.cpp	/^std::vector<point> continue_line(std::vector<point> line, int distance)$/;"	f
control_cancel	vehicle.cpp	/^ control_cancel$/;"	e	enum:vehicle_controls	file:
controls_gate	iexamine.cpp	/^void iexamine::controls_gate(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
coord_translate	vehicle.cpp	/^void vehicle::coord_translate (int dir, int reldx, int reldy, int &dx, int &dy)$/;"	f	class:vehicle
coord_translate	vehicle.cpp	/^void vehicle::coord_translate (int reldx, int reldy, int &dx, int &dy)$/;"	f	class:vehicle
copbot	monattack.cpp	/^void mattack::copbot(game *g, monster *z)$/;"	f	class:mattack
copy	picojson.h	/^  template <typename Iter> void copy(const std::string& s, Iter oi) {$/;"	f	namespace:picojson
copy_grid	map.cpp	/^void map::copy_grid(const int to, const int from)$/;"	f	class:map
corpse	item.h	/^ mtype*   corpse;$/;"	m	class:item
cot	trapfunc.cpp	/^void trapfuncm::cot(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
count	crafting.h	/^ int count;$/;"	m	struct:component
count	game.h	/^ int count;$/;"	m	struct:game_message
count	game.h	/^ int count;$/;"	m	struct:monster_and_count
count	itype.h	/^ unsigned char count;	\/\/ Default charges$/;"	m	struct:it_ammo
count	mapdata.h	/^ int count;$/;"	m	struct:spawn_point
count	mission.h	/^ int count;		\/\/ How many of that item$/;"	m	struct:mission
count_by_charges	item.cpp	/^bool item::count_by_charges()$/;"	f	class:item
count_by_charges	itype.h	/^    virtual bool count_by_charges()$/;"	f	struct:it_comest
count_by_charges	itype.h	/^ virtual bool count_by_charges() { return false; }$/;"	f	struct:itype
count_by_charges	itype.h	/^ virtual bool count_by_charges() { return true; }$/;"	f	struct:it_ammo
covers	artifactdata.h	/^ unsigned char covers;$/;"	m	struct:artifact_armor_form_datum
covers	itype.h	/^ unsigned char covers; \/\/ Bitfield of enum body_part$/;"	m	struct:it_armor
cpart	veh_interact.h	/^    int cpart;$/;"	m	class:veh_interact
crack	iuse.cpp	/^void iuse::crack(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
craft	crafting.cpp	/^void game::craft()$/;"	f	class:game
craft_cat	crafting.h	/^enum craft_cat {$/;"	g
craft_has_charges	item.cpp	/^bool item::craft_has_charges()$/;"	f	class:item
crafting_allowed	crafting.cpp	/^bool game::crafting_allowed()$/;"	f	class:game
crafting_inv	veh_interact.h	/^    inventory crafting_inv;$/;"	m	class:veh_interact
crafting_inventory	crafting.cpp	/^inventory game::crafting_inventory(){$/;"	f	class:game
create	mission.cpp	/^mission mission_type::create(game *g, int npc_id)$/;"	f	class:mission_type
create	newcharacter.cpp	/^bool player::create(game *g, character_type type, std::string tempname)$/;"	f	class:player
create_anomaly	mapgen.cpp	/^void map::create_anomaly(int cx, int cy, artifact_natural_property prop)$/;"	f	class:map
create_default_options	options.cpp	/^void create_default_options()$/;"	f
create_factions	game.cpp	/^void game::create_factions()$/;"	f	class:game
create_starting_npcs	game.cpp	/^void game::create_starting_npcs()$/;"	f	class:game
crime	facdata.h	/^ int crime;$/;"	m	struct:faction_value_datum
crime	faction.h	/^ int strength, sneak, crime, cult, good;	\/\/ Defining values$/;"	m	struct:faction
crossbow	trapfunc.cpp	/^void trapfunc::crossbow(game *g, int x, int y)$/;"	f	class:trapfunc
crossbow	trapfunc.cpp	/^void trapfuncm::crossbow(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
crowbar	iuse.cpp	/^void iuse::crowbar(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
cruise_on	vehicle.h	/^    bool cruise_on;     \/\/ cruise control on\/off$/;"	m	class:vehicle
cruise_thrust	vehicle.cpp	/^void vehicle::cruise_thrust (int amount)$/;"	f	class:vehicle
cruise_velocity	vehicle.h	/^    int cruise_velocity; \/\/ velocity vehicle's cruise control trying to acheive$/;"	m	class:vehicle
cult	facdata.h	/^ int cult;$/;"	m	struct:faction_value_datum
cult	faction.h	/^ int strength, sneak, crime, cult, good;	\/\/ Defining values$/;"	m	struct:faction
cur	picojson.h	/^    Iter cur() const { return cur_; }$/;"	f	class:picojson::input
cur_	picojson.h	/^    Iter cur_, end_;$/;"	m	class:picojson::input
cur_om	game.h	/^  overmap cur_om;$/;"	m	class:game
curammo	item.h	/^ it_ammo* curammo;$/;"	m	class:item
curmes	game.h	/^  int curmes;	  \/\/ The last-seen message.$/;"	m	class:game
currentTime	debug.cpp	/^std::ofstream & DebugFile::currentTime()$/;"	f	class:DebugFile
current_speed	player.cpp	/^int player::current_speed(game *g)$/;"	f	class:player
current_wave	gamemode.h	/^ int current_wave;$/;"	m	struct:defense_game
curs_set	catacurse.cpp	/^int curs_set(int visibility)$/;"	f
curseline	catacurse.h	/^} curseline;$/;"	t	typeref:struct:__anon2
cursorx	catacurse.h	/^  int cursorx;\/\/x location of the cursor$/;"	m	struct:__anon3
cursory	catacurse.h	/^  int cursory;\/\/y location of the cursor$/;"	m	struct:__anon3
cut	player.h	/^ int cut;$/;"	m	struct:special_attack
cut_max	artifactdata.h	/^ int cut_min, cut_max;$/;"	m	struct:artifact_weapon_datum
cut_min	artifactdata.h	/^ int cut_min, cut_max;$/;"	m	struct:artifact_weapon_datum
cut_resist	artifactdata.h	/^ int cut_resist;$/;"	m	struct:artifact_armor_form_datum
cut_resist	itype.h	/^ unsigned char cut_resist;$/;"	m	struct:it_armor
cx	veh_interact.h	/^    int cx;$/;"	m	class:veh_interact
cy	veh_interact.h	/^    int cy;$/;"	m	class:veh_interact
damage	item.h	/^ signed char damage;    \/\/ How much damage it's sustained; generally, max is 5$/;"	m	class:item
damage	itype.h	/^ signed char accuracy, damage, loudness, clip, recoil, burst;$/;"	m	struct:it_gunmod
damage	itype.h	/^ unsigned char damage;	\/\/ Average damage done$/;"	m	struct:it_ammo
damage	vehicle.cpp	/^int vehicle::damage (int p, int dmg, int type, bool aimed)$/;"	f	class:vehicle
damage_all	vehicle.cpp	/^void vehicle::damage_all (int dmg1, int dmg2, int type)$/;"	f	class:vehicle
damage_bash	item.cpp	/^int item::damage_bash()$/;"	f	class:item
damage_cut	item.cpp	/^int item::damage_cut()$/;"	f	class:item
damage_direct	vehicle.cpp	/^int vehicle::damage_direct (int p, int dmg, int type)$/;"	f	class:vehicle
danger_assessment	npc.cpp	/^int npc::danger_assessment(game *g)$/;"	f	class:npc
dangerous	mapdata.h	/^ bool dangerous[3];$/;"	m	struct:field_t
dangerous	weather.h	/^ bool dangerous; \/\/ If true, our activity gets interrupted$/;"	m	struct:weather_datum
day	calendar.h	/^  int day;$/;"	m	class:calendar
dbg	game.cpp	36;"	d	file:
dbg	main_menu.cpp	11;"	d	file:
dbg	map.cpp	17;"	d	file:
dbg	mapbuffer.cpp	7;"	d	file:
dbg	mapgen.cpp	15;"	d	file:
dbg	npcmove.cpp	8;"	d	file:
dbg	npctalk.cpp	45;"	d	file:
dcbits	catacurse.cpp	/^unsigned char *dcbits;  \/\/the bits of the screen image, for direct access$/;"	v
ddx	veh_interact.h	/^    int ddx;$/;"	m	class:veh_interact
ddy	veh_interact.h	/^    int ddy;$/;"	m	class:veh_interact
dead	monster.h	/^ bool dead;$/;"	m	class:monster
dead	npc.h	/^ bool dead;		\/\/ If true, we need to be cleaned up$/;"	m	class:npc
deadline	mission.h	/^ int deadline;		\/\/ Turn number$/;"	m	struct:mission
deadline_high	mission.h	/^ int deadline_low, deadline_high; \/\/ Low and high deadlines (turn numbers)$/;"	m	struct:mission_type
deadline_low	mission.h	/^ int deadline_low, deadline_high; \/\/ Low and high deadlines (turn numbers)$/;"	m	struct:mission_type
death_screen	game.cpp	/^void game::death_screen()$/;"	f	class:game
debug	game.cpp	/^void game::debug()$/;"	f	class:game
debug	map.cpp	/^void map::debug()$/;"	f	class:map
debug	monster.cpp	/^void monster::debug(player &u)$/;"	f	class:monster
debugClass	debug.cpp	/^static int debugClass = DC_ALL;$/;"	v	file:
debugFile	debug.cpp	/^static DebugFile debugFile;$/;"	v	file:
debugLevel	debug.cpp	/^static int debugLevel = DL_ALL;$/;"	v	file:
debugmon	game.h	/^  bool debugmon;$/;"	m	class:game
debugmsg	output.h	51;"	d
decide_needs	npc.cpp	/^void npc::decide_needs()$/;"	f	class:npc
deconstruct	mapdata.h	/^ deconstruct,  \/\/ Can be deconstructed$/;"	e	enum:t_flag
decrease_nextinv	game.cpp	/^void game::decrease_nextinv()$/;"	f	class:game
def_charges	itype.h	/^ unsigned int def_charges;$/;"	m	struct:it_tool
defaultMonster	mongroup.h	/^    mon_id defaultMonster;$/;"	m	struct:MonsterGroup
default_ammo	itypedef.cpp	/^itype_id default_ammo(ammotype guntype)$/;"	f
default_anger	mtypedef.cpp	/^std::vector<monster_trigger> default_anger(monster_species spec)$/;"	f
default_fears	mtypedef.cpp	/^std::vector<monster_trigger> default_fears(monster_species spec)$/;"	f
default_keymap_txt	keypress.cpp	/^std::string default_keymap_txt()$/;"	f
default_parse_context	picojson.h	/^    default_parse_context(value* out) : out_(out) {}$/;"	f	class:picojson::default_parse_context
default_parse_context	picojson.h	/^  class default_parse_context {$/;"	c	namespace:picojson
default_technique_name	item.cpp	/^std::string default_technique_name(technique_id tech)$/;"	f
defense_game	defense.cpp	/^defense_game::defense_game()$/;"	f	class:defense_game
defense_game	gamemode.h	/^struct defense_game : public special_game$/;"	s
defense_location	gamemode.h	/^enum defense_location {$/;"	g
defense_location_description	defense.cpp	/^std::string defense_location_description(defense_location location)$/;"	f
defense_location_name	defense.cpp	/^std::string defense_location_name(defense_location location)$/;"	f
defense_style	gamemode.h	/^enum defense_style {$/;"	g
defense_style_description	defense.cpp	/^std::string defense_style_description(defense_style style)$/;"	f
defense_style_name	defense.cpp	/^std::string defense_style_name(defense_style style)$/;"	f
delete_note	overmap.h	/^  void delete_note(int const x, int const y, int const z) { add_note(x, y, z, ""); }$/;"	f	class:overmap
delete_save	game.cpp	/^void game::delete_save()$/;"	f	class:game
deltax	tileray.h	/^    int deltax;     \/\/ ray delta x$/;"	m	class:tileray
deltay	tileray.h	/^    int deltay;     \/\/ ray delta y$/;"	m	class:tileray
delwin	catacurse.cpp	/^int delwin(WINDOW *win)$/;"	f
density	mapdata.h	/^ signed char density;$/;"	m	struct:field
deny_equipment	npctalk.cpp	/^void talk_function::deny_equipment(game *g, npc *p)$/;"	f	class:talk_function
deny_follow	npctalk.cpp	/^void talk_function::deny_follow(game *g, npc *p)$/;"	f	class:talk_function
deny_lead	npctalk.cpp	/^void talk_function::deny_lead(game *g, npc *p)$/;"	f	class:talk_function
deny_parse_context	picojson.h	/^  class deny_parse_context {$/;"	c	namespace:picojson
dermatik	monattack.cpp	/^void mattack::dermatik(game *g, monster *z)$/;"	f	class:mattack
desc	artifactdata.h	/^ std::string desc;$/;"	m	struct:artifact_property_datum
desc	artifactdata.h	/^ std::string desc;$/;"	m	struct:artifact_shape_datum
describe	faction.cpp	/^std::string faction::describe()$/;"	f	class:faction
description	bionics.h	/^     std::string description;$/;"	m	class:bionic_data
description	itype.h	/^ std::string description;\/\/ Flavor text$/;"	m	struct:itype
description	mission.h	/^ std::string description; \/\/ Basic descriptive text$/;"	m	struct:mission
description	mtype.h	/^ std::string description;$/;"	m	struct:mtype
description	pldata.h	/^ std::string description;$/;"	m	struct:trait
description	skill.h	/^  std::string description() { return _description; }$/;"	f	class:Skill
despawn_monsters	game.cpp	/^void game::despawn_monsters(const bool stairs, const int shiftx, const int shifty)$/;"	f	class:game
destroy	map.cpp	/^void map::destroy(game *g, const int x, const int y, const bool makesound)$/;"	f	class:map
destroy_vehicle	map.cpp	/^void map::destroy_vehicle (vehicle *veh)$/;"	f	class:map
destroyed_at_zero_charges	item.cpp	/^bool item::destroyed_at_zero_charges()$/;"	f	class:item
determine_wall_corner	map.cpp	/^long map::determine_wall_corner(int x, int y, long sym)$/;"	f	class:map
dex_cur	player.h	/^ int str_cur, dex_cur, int_cur, per_cur;$/;"	m	class:player
dex_max	player.h	/^ int str_max, dex_max, int_max, per_max;$/;"	m	class:player
dialogue	dialogue.h	/^ dialogue()$/;"	f	struct:dialogue
dialogue	dialogue.h	/^struct dialogue {$/;"	s
dice	rng.cpp	/^int dice(int number, int sides)$/;"	f
die	monster.cpp	/^void monster::die(game *g)$/;"	f	class:monster
die	npc.cpp	/^void npc::die(game *g, bool your_fault)$/;"	f	class:npc
dies	mtype.h	/^ void (mdeath::*dies)(game *, monster *); \/\/ What happens when this monster dies$/;"	m	struct:mtype
difficulty	construction.h	/^ int difficulty; \/\/ Carpentry skill level required$/;"	m	struct:constructable
difficulty	crafting.h	/^  int difficulty;$/;"	m	struct:recipe
difficulty	dialogue.h	/^ int difficulty;$/;"	m	struct:talk_response
difficulty	itype.h	/^ int difficulty;$/;"	m	struct:it_bionic
difficulty	mission.h	/^ int difficulty;	\/\/ Difficulty; TODO: come up with a scale$/;"	m	struct:mission_type
difficulty	mtype.h	/^ int difficulty;\/\/ Used all over; 30 min + (diff-3)*30 min = earlist appearance$/;"	m	struct:mtype
difficulty	trap.h	/^ int difficulty; \/\/ 0 to ??, difficulty of assembly & disassembly$/;"	m	struct:trap
difficulty	veh_type.h	/^    int difficulty;     \/\/ installation difficulty (mechanics requirement)$/;"	m	struct:vpart_info
diffuse	mongroup.h	/^ bool diffuse;   \/\/ group size ind. of dist. from center and radius invariant$/;"	m	struct:mongroup
dig	iuse.cpp	/^void iuse::dig(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
diggable	mapdata.h	/^ diggable,     \/\/ Digging monsters, seeding monsters, digging w\/ shovel, etc.$/;"	e	enum:t_flag
dir	tileray.cpp	/^int tileray::dir ()$/;"	f	class:tileray
dir4	tileray.cpp	/^int tileray::dir4 ()$/;"	f	class:tileray
dir_symbol	tileray.cpp	/^long tileray::dir_symbol (long sym)$/;"	f	class:tileray
direction	line.h	/^enum direction {$/;"	g
direction	tileray.h	/^    int direction;  \/\/ ray direction$/;"	m	class:tileray
direction_from	line.cpp	/^direction direction_from(int x1, int y1, int x2, int y2)$/;"	f
direction_name	line.cpp	/^std::string direction_name(direction dir)$/;"	f
direction_name_short	line.cpp	/^std::string direction_name_short(direction dir)$/;"	f
dirt_or_pile	mapgen.cpp	/^ter_id dirt_or_pile()$/;"	f
dirty	mapbuffer.h	/^  bool dirty;$/;"	m	class:mapbuffer
dis_description	disease.cpp	/^std::string dis_description(disease dis)$/;"	f
dis_effect	disease.cpp	/^void dis_effect(game *g, player &p, disease &dis)$/;"	f
dis_msg	disease.cpp	/^void dis_msg(game *g, dis_type type)$/;"	f
dis_name	disease.cpp	/^std::string dis_name(disease dis)$/;"	f
dis_type	pldata.h	/^enum dis_type {$/;"	g
disappear	monattack.cpp	/^void mattack::disappear(game *g, monster *z)$/;"	f	class:mattack
disappear	mondeath.cpp	/^void mdeath::disappear(game *g, monster *z)$/;"	f	class:mdeath
disarm_trap	map.cpp	/^void map::disarm_trap(game *g, const int x, const int y)$/;"	f	class:map
disassemble	crafting.cpp	/^void game::disassemble(char ch)$/;"	f	class:game
disease	pldata.h	/^ disease() { type = DI_NULL; duration = 0; intensity = 0; }$/;"	f	struct:disease
disease	pldata.h	/^ disease(dis_type t, int d, int i = 0) { type = t; duration = d; intensity = i;}$/;"	f	struct:disease
disease	pldata.h	/^struct disease$/;"	s
disease_intensity	player.cpp	/^int player::disease_intensity(dis_type type)$/;"	f	class:player
disease_level	player.cpp	/^int player::disease_level(dis_type type)$/;"	f	class:player
disease_speed_boost	disease.cpp	/^int disease_speed_boost(disease dis)$/;"	f
disintegrate	mondeath.cpp	/^void mdeath::disintegrate(game *g, monster *z)$/;"	f	class:mdeath
disp_NPCs	game.cpp	/^void game::disp_NPCs()$/;"	f	class:game
disp_info	player.cpp	/^void player::disp_info(game *g)$/;"	f	class:player
disp_kills	game.cpp	/^void game::disp_kills()$/;"	f	class:game
disp_morale	player.cpp	/^void player::disp_morale(game* g)$/;"	f	class:player
disp_status	player.cpp	/^void player::disp_status(WINDOW *w, game *g)$/;"	f	class:player
displace_vehicle	map.cpp	/^bool map::displace_vehicle (game *g, int &x, int &y, const int dx, const int dy, bool test=false)$/;"	f	class:map
displace_water	map.cpp	/^bool map::displace_water (const int x, const int y)$/;"	f	class:map
display_list	veh_interact.cpp	/^void veh_interact::display_list (int pos)$/;"	f	class:veh_interact
display_mode	veh_interact.cpp	/^void veh_interact::display_mode (char mode)$/;"	f	class:veh_interact
display_notes	overmap.cpp	/^point overmap::display_notes(game* g, int const z) const$/;"	f	class:overmap
display_scent	game.cpp	/^void game::display_scent()$/;"	f	class:game
display_stats	veh_interact.cpp	/^void veh_interact::display_stats ()$/;"	f	class:veh_interact
display_veh	veh_interact.cpp	/^void veh_interact::display_veh ()$/;"	f	class:veh_interact
dissector	trapfunc.cpp	/^void trapfunc::dissector(game *g, int x, int y)$/;"	f	class:trapfunc
dissector	trapfunc.cpp	/^void trapfuncm::dissector(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
dist	overmap.cpp	/^double dist(int x1, int y1, int x2, int y2)$/;"	f
dist_from_city	overmap.cpp	/^int overmap::dist_from_city(point p)$/;"	f	class:overmap
djb2_hash	rng.cpp	/^int djb2_hash(unsigned char *str){$/;"	f
dmg_bonus	itype.h	/^ signed char dmg_bonus;$/;"	m	struct:it_gun
dmg_mod	veh_type.h	/^    int dmg_mod;            \/\/ damage modifier, percent$/;"	m	struct:vpart_info
dmg_resist	artifactdata.h	/^ int dmg_resist;$/;"	m	struct:artifact_armor_form_datum
dmg_resist	itype.h	/^ unsigned char dmg_resist;$/;"	m	struct:it_armor
do_install	veh_interact.cpp	/^void veh_interact::do_install(int reason)$/;"	f	class:veh_interact
do_refill	veh_interact.cpp	/^void veh_interact::do_refill(int reason)$/;"	f	class:veh_interact
do_remove	veh_interact.cpp	/^void veh_interact::do_remove(int reason)$/;"	f	class:veh_interact
do_rename	veh_interact.cpp	/^void veh_interact::do_rename(int reason)$/;"	f	class:veh_interact
do_repair	veh_interact.cpp	/^void veh_interact::do_repair(int reason)$/;"	f	class:veh_interact
do_turn	game.cpp	/^bool game::do_turn()$/;"	f	class:game
dodge	melee.cpp	/^int player::dodge(game *g)$/;"	f	class:player
dodge	monster.cpp	/^int monster::dodge()$/;"	f	class:monster
dodge_roll	melee.cpp	/^int player::dodge_roll(game *g)$/;"	f	class:player
dodge_roll	monster.cpp	/^int monster::dodge_roll()$/;"	f	class:monster
dodges_left	player.h	/^ int dodges_left, blocks_left;$/;"	m	class:player
dog_whistle	iuse.cpp	/^void iuse::dog_whistle(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
dogfood	iuse.cpp	/^void iuse::dogfood(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
dogthing	monattack.cpp	/^void mattack::dogthing(game *g, monster *z)$/;"	f	class:mattack
done	construction.h	/^ void (construct::*done)  (game *, point);$/;"	m	struct:constructable
done	dialogue.h	/^ bool done;$/;"	m	struct:dialogue
done_deconstruct	construction.cpp	/^void construct::done_deconstruct(game *g, point p)$/;"	f	class:construct
done_furniture	construction.cpp	/^void construct::done_furniture(game *g, point p)$/;"	f	class:construct
done_log	construction.cpp	/^void construct::done_log(game *g, point p)$/;"	f	class:construct
done_nothing	construction.h	/^ void done_nothing(game *, point) { }$/;"	f	struct:construct
done_tape	construction.cpp	/^void construct::done_tape(game *g, point p)$/;"	f	class:construct
done_tree	construction.cpp	/^void construct::done_tree(game *g, point p)$/;"	f	class:construct
done_vehicle	construction.cpp	/^void construct::done_vehicle(game *g, point p)$/;"	f	class:construct
done_window_pane	construction.cpp	/^void construct::done_window_pane(game *g, point p)$/;"	f	class:construct
door	mapdata.h	/^ door,         \/\/ Can be opened--used for NPC pathfinding.$/;"	e	enum:t_flag
dot_product	line.cpp	/^float rl_vec2d::dot_product (rl_vec2d &v){$/;"	f	class:rl_vec2d
dout	debug.cpp	/^DebugVoid dout(DebugLevel,DebugClass)$/;"	f
dout	debug.cpp	/^std::ostream & dout(DebugLevel lev,DebugClass cl)$/;"	f
dragging	game.h	/^  ter_id dragging;$/;"	m	class:game
drain	trapfunc.cpp	/^void trapfunc::drain(game *g, int x, int y)$/;"	f	class:trapfunc
drain	trapfunc.cpp	/^void trapfuncm::drain(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
drain	vehicle.cpp	/^int vehicle::drain (int ftype, int amount) {$/;"	f	class:vehicle
draw	catacurse.h	/^  bool draw;\/\/Tracks if the window text has been changed$/;"	m	struct:__anon3
draw	game.cpp	/^void game::draw()$/;"	f	class:game
draw	map.cpp	/^void map::draw(game *g, WINDOW* w, const point center)$/;"	f	class:map
draw	monster.cpp	/^void monster::draw(WINDOW *w, int plx, int ply, bool inv)$/;"	f	class:monster
draw	npc.cpp	/^void npc::draw(WINDOW* w, int ux, int uy, bool inv)$/;"	f	class:npc
draw	overmap.cpp	/^void overmap::draw(WINDOW *w, game *g, int z, int &cursx, int &cursy,$/;"	f	class:overmap
draw_HP	game.cpp	/^void game::draw_HP()$/;"	f	class:game
draw_caravan_borders	defense.cpp	/^void draw_caravan_borders(WINDOW *w, int current_window)$/;"	f
draw_caravan_categories	defense.cpp	/^void draw_caravan_categories(WINDOW *w, int category_selected, int total_price,$/;"	f
draw_caravan_items	defense.cpp	/^void draw_caravan_items(WINDOW *w, game *g, std::vector<itype_id> *items,$/;"	f
draw_footsteps	game.cpp	/^void game::draw_footsteps()$/;"	f	class:game
draw_map	mapgen.cpp	/^void map::draw_map(const oter_id terrain_type, const oter_id t_north, const oter_id t_east,$/;"	f	class:map
draw_minimap	game.cpp	/^void game::draw_minimap()$/;"	f	class:game
draw_overmap	game.cpp	/^void game::draw_overmap()$/;"	f	class:game
draw_recipe_tabs	crafting.cpp	/^void draw_recipe_tabs(WINDOW *w, craft_cat tab,bool filtered)$/;"	f
draw_tab	output.cpp	/^void draw_tab(WINDOW *w, int iOffsetX, std::string sText, bool bSelected)$/;"	f
draw_tabs	newcharacter.cpp	/^void draw_tabs(WINDOW* w, std::string sTab)$/;"	f
draw_tabs	output.cpp	/^void draw_tabs(WINDOW *w, int active_tab, ...)$/;"	f
draw_ter	game.cpp	/^void game::draw_ter(int posx, int posy)$/;"	f	class:game
drawsq	map.cpp	/^void map::drawsq(WINDOW* w, player &u, const int x, const int y, const bool invert_arg,$/;"	f	class:map
driving_recoil	player.h	/^ unsigned int driving_recoil;$/;"	m	class:player
drop	game.cpp	/^void game::drop(char chInput)$/;"	f	class:game
drop_in_direction	game.cpp	/^void game::drop_in_direction()$/;"	f	class:game
drop_items	npcmove.cpp	/^void npc::drop_items(game *g, int weight, int volume)$/;"	f	class:npc
drop_weapon	npctalk.cpp	/^void talk_function::drop_weapon(game *g, npc *p)$/;"	f	class:talk_function
dummy_str	picojson.h	/^    struct dummy_str {$/;"	s	class:picojson::null_parse_context
durability	itype.h	/^ signed char durability;$/;"	m	struct:it_gun
durability	veh_type.h	/^    int durability;         \/\/ durability$/;"	m	struct:vpart_info
duration	monster.h	/^ int duration;$/;"	m	struct:monster_effect
duration	pldata.h	/^ int duration;$/;"	m	struct:disease
dx	tileray.cpp	/^int tileray::dx ()$/;"	f	class:tileray
dy	tileray.cpp	/^int tileray::dy ()$/;"	f	class:tileray
dying	mongroup.h	/^ bool dying;$/;"	m	struct:mongroup
dynamic_line	npctalk.cpp	/^std::string dynamic_line(talk_topic topic, game *g, npc *p)$/;"	f
dynamite	iuse.cpp	/^void iuse::dynamite(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
dynamite_act	iuse.cpp	/^void iuse::dynamite_act(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
eat	game.cpp	/^void game::eat(char chInput)$/;"	f	class:game
eat	player.cpp	/^bool player::eat(game *g, int index)$/;"	f	class:player
effect	weather.h	/^ void (weather_effect::*effect)(game *);$/;"	m	struct:weather_datum
effect_failure	dialogue.h	/^ void (talk_function::*effect_failure)(game *, npc *);$/;"	m	struct:talk_response
effect_success	dialogue.h	/^ void (talk_function::*effect_success)(game *, npc *);$/;"	m	struct:talk_response
effects	monster.h	/^ std::vector<monster_effect> effects; \/\/ Active effects, e.g. on fire$/;"	m	class:monster
effects_activated	itype.h	/^ std::vector<art_effect_active>  effects_activated;$/;"	m	struct:it_artifact_tool
effects_carried	itype.h	/^ std::vector<art_effect_passive> effects_carried;$/;"	m	struct:it_artifact_tool
effects_wielded	itype.h	/^ std::vector<art_effect_passive> effects_wielded;$/;"	m	struct:it_artifact_tool
effects_worn	itype.h	/^ std::vector<art_effect_passive> effects_worn;$/;"	m	struct:it_artifact_armor
elevator	iexamine.cpp	/^void iexamine::elevator(game *g, player *p, map *m, int examx, int examy){$/;"	f	class:iexamine
embellishments	omdata.h	/^ const map_extras& embellishments;$/;"	m	struct:oter_t
emergency	npc.cpp	/^bool npc::emergency(int danger)$/;"	f	class:npc
emp_blast	game.cpp	/^void game::emp_blast(int x, int y)$/;"	f	class:game
encumb	artifactdata.h	/^ int encumb;$/;"	m	struct:artifact_armor_form_datum
encumb	player.cpp	/^int player::encumb(body_part bp) {$/;"	f	class:player
encumb	player.cpp	/^int player::encumb(body_part bp, int &layers, int &armorenc, int &warmth)$/;"	f	class:player
encumb_color	player.cpp	/^nc_color encumb_color(int level)$/;"	f
encumb_text	bodypart.cpp	/^std::string encumb_text(body_part bp)$/;"	f
encumber	itype.h	/^ signed char encumber;$/;"	m	struct:it_armor
end	mission.h	/^ void (mission_end  ::*end  )(game *g, mission *);$/;"	m	struct:mission_type
end	tileray.cpp	/^bool tileray::end ()$/;"	f	class:tileray
end_	picojson.h	/^    Iter cur_, end_;$/;"	m	class:picojson::input
endwin	catacurse.cpp	/^int endwin(void)$/;"	f
engagement	npc.h	/^ combat_engagement engagement;$/;"	m	struct:npc_combat_rules
enough_time_to_reload	npcmove.cpp	/^bool npc::enough_time_to_reload(game *g, int target, item &gun)$/;"	f	class:npc
enslave	dialogue.h	/^ void enslave			(game *g, npc *p) {}; \/\/ p becomes slave of u$/;"	f	struct:talk_function
env_resist	artifactdata.h	/^ int env_resist;$/;"	m	struct:artifact_armor_form_datum
env_resist	itype.h	/^ unsigned char env_resist; \/\/ Resistance to environmental effects$/;"	m	struct:it_armor
erase	catacurse.cpp	/^int erase(void)$/;"	f
evaluate_as_boolean	picojson.h	/^  inline bool value::evaluate_as_boolean() const {$/;"	f	class:picojson::value
event	event.h	/^ event() {$/;"	f	struct:event
event	event.h	/^ event(event_type e_t, int t, int f_id, int x, int y) {$/;"	f	struct:event
event	event.h	/^struct event {$/;"	s
event_queued	game.cpp	/^bool game::event_queued(event_type type)$/;"	f	class:game
event_type	event.h	/^enum event_type {$/;"	g
events	game.h	/^  std::vector<event> events;	        \/\/ Game events to be processed$/;"	m	class:game
ex	veh_interact.h	/^    int ex, ey;$/;"	m	class:veh_interact
exam_vehicle	game.cpp	/^void game::exam_vehicle(vehicle &veh, int examx, int examy, int cx, int cy)$/;"	f	class:game
examine	game.cpp	/^void game::examine()$/;"	f	class:game
examine	mapdata.h	/^ void (iexamine::*examine)(game *, player *, map *m, int examx, int examy);$/;"	m	struct:ter_t
exec	veh_interact.cpp	/^void veh_interact::exec (game *gm, vehicle *v, int x, int y)$/;"	f	class:veh_interact
execute_action	npcmove.cpp	/^void npc::execute_action(game *g, npc_action action, int target)$/;"	f	class:npc
exercise	skill.h	/^  int exercise() const { return _exercise; }$/;"	f	class:SkillLevel
exhaust_dx	vehicle.h	/^    int exhaust_dx;$/;"	m	class:vehicle
exhaust_dy	vehicle.h	/^    int exhaust_dy;$/;"	m	class:vehicle
exit_handler	main.cpp	/^void exit_handler(int s) {$/;"	f
expect	picojson.h	/^    bool expect(int expect) {$/;"	f	class:picojson::input
explode	mondeath.cpp	/^void mdeath::explode(game *g, monster *z)$/;"	f	class:mdeath
explode_mon	game.cpp	/^void game::explode_mon(int index)$/;"	f	class:game
explodes	mapdata.h	/^ explodes,     \/\/ Explodes when on fire$/;"	e	enum:t_flag
explosion	game.cpp	/^void game::explosion(int x, int y, int power, int shrapnel, bool fire)$/;"	f	class:game
external_parts	vehicle.h	/^    std::vector<int> external_parts;   \/\/ List of external parts indeces$/;"	m	class:vehicle
extinguisher	iuse.cpp	/^void iuse::extinguisher(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
extra_weapons	artifactdata.h	/^ artifact_weapon_type extra_weapons[3];$/;"	m	struct:artifact_tool_form_datum
ey	veh_interact.h	/^    int ex, ey;$/;"	m	class:veh_interact
fac_has_job	npc.cpp	/^bool npc::fac_has_job(faction_job job)$/;"	f	class:npc
fac_has_value	npc.cpp	/^bool npc::fac_has_value(faction_value value)$/;"	f	class:npc
fac_id	npc.h	/^ int fac_id;	\/\/ A temp variable used to inform the game which faction to link$/;"	m	class:npc
fac_ranking_text	faction.cpp	/^std::string fac_ranking_text(int val)$/;"	f
fac_respect_text	faction.cpp	/^std::string fac_respect_text(int val)$/;"	f
face	vehicle.h	/^    tileray face;       \/\/ frame direction$/;"	m	class:vehicle
face_vec	vehicle.cpp	/^rl_vec2d vehicle::face_vec(){$/;"	f	class:vehicle
facgoal_data	facdata.h	/^faction_value_datum facgoal_data[NUM_FACGOALS] = {$/;"	v
facjob_data	facdata.h	/^faction_value_datum facjob_data[NUM_FACJOBS] = {$/;"	v
fact	settlement.h	/^ faction fact;$/;"	m	struct:settlement
faction	faction.cpp	/^faction::faction()$/;"	f	class:faction
faction	faction.cpp	/^faction::faction(int uid)$/;"	f	class:faction
faction	faction.h	/^struct faction {$/;"	s
faction_adj_bad	facdata.h	/^std::string faction_adj_bad[15] = {$/;"	v
faction_adj_neu	facdata.h	/^std::string faction_adj_neu[15] = {$/;"	v
faction_adj_pos	facdata.h	/^std::string faction_adj_pos[15] = {$/;"	v
faction_by_id	game.cpp	/^faction* game::faction_by_id(int id)$/;"	f	class:game
faction_goal	faction.h	/^enum faction_goal {$/;"	g
faction_id	event.h	/^ int faction_id;$/;"	m	struct:event
faction_id	mapdata.h	/^ int faction_id;$/;"	m	struct:spawn_point
faction_id	monster.h	/^ int faction_id; \/\/ If we belong to a faction$/;"	m	class:monster
faction_job	faction.h	/^enum faction_job {$/;"	g
faction_noun_crime	facdata.h	/^std::string faction_noun_crime[15] = {$/;"	v
faction_noun_cult	facdata.h	/^std::string faction_noun_cult[15] = {$/;"	v
faction_noun_none	facdata.h	/^std::string faction_noun_none[15] = {$/;"	v
faction_noun_sneak	facdata.h	/^std::string faction_noun_sneak[15] = {$/;"	v
faction_noun_strong	facdata.h	/^std::string faction_noun_strong[15] = {$/;"	v
faction_value	faction.h	/^enum faction_value {$/;"	g
faction_value_datum	facdata.h	/^struct faction_value_datum {$/;"	s
factions	game.h	/^  std::vector<faction> factions;$/;"	m	class:game
factions_at	game.cpp	/^std::vector<faction *> game::factions_at(int x, int y)$/;"	f	class:game
facval_data	facdata.h	/^faction_value_datum facval_data[NUM_FACVALS] = {$/;"	v
fail	mission.h	/^ void (mission_fail ::*fail )(game *g, mission *);$/;"	m	struct:mission_type
fail_mission	game.cpp	/^void game::fail_mission(int id)$/;"	f	class:game
failed	mission.h	/^ bool failed;		\/\/ True if we've failed it!$/;"	m	struct:mission
failed_missions	player.h	/^ std::vector<int> failed_missions;$/;"	m	class:player
failure	dialogue.h	/^ talk_topic failure;$/;"	m	struct:talk_response
failures	computer.h	/^ std::vector<computer_failure> failures; \/\/ Things that happen if we fail a hack$/;"	m	class:computer
fall_damage	monster.cpp	/^int monster::fall_damage()$/;"	f	class:monster
fatigue	player.h	/^ int hunger, thirst, fatigue, health;$/;"	m	class:player
fault	iexamine.cpp	/^void iexamine::fault(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
faulty_bionics	bionics.cpp	/^std::vector<bionic_id> faulty_bionics;$/;"	v
favors	npc.h	/^ std::vector<npc_favor> favors;$/;"	m	struct:npc_opinion
fd_acid	mapdata.h	/^ fd_acid,$/;"	e	enum:field_id
fd_acid_vent	mapdata.h	/^ fd_acid_vent,$/;"	e	enum:field_id
fd_bile	mapdata.h	/^ fd_bile,$/;"	e	enum:field_id
fd_blood	mapdata.h	/^ fd_blood,$/;"	e	enum:field_id
fd_electricity	mapdata.h	/^ fd_electricity,$/;"	e	enum:field_id
fd_fatigue	mapdata.h	/^ fd_fatigue,$/;"	e	enum:field_id
fd_fire	mapdata.h	/^ fd_fire,$/;"	e	enum:field_id
fd_fire_vent	mapdata.h	/^ fd_fire_vent,$/;"	e	enum:field_id
fd_flame_burst	mapdata.h	/^ fd_flame_burst,$/;"	e	enum:field_id
fd_gas_vent	mapdata.h	/^ fd_gas_vent,$/;"	e	enum:field_id
fd_nuke_gas	mapdata.h	/^ fd_nuke_gas,$/;"	e	enum:field_id
fd_null	mapdata.h	/^ fd_null = 0,$/;"	e	enum:field_id
fd_push_items	mapdata.h	/^ fd_push_items,$/;"	e	enum:field_id
fd_sap	mapdata.h	/^ fd_sap,$/;"	e	enum:field_id
fd_shock_vent	mapdata.h	/^ fd_shock_vent,$/;"	e	enum:field_id
fd_slime	mapdata.h	/^ fd_slime,$/;"	e	enum:field_id
fd_smoke	mapdata.h	/^ fd_smoke,$/;"	e	enum:field_id
fd_tear_gas	mapdata.h	/^ fd_tear_gas,$/;"	e	enum:field_id
fd_toxic_gas	mapdata.h	/^ fd_toxic_gas,$/;"	e	enum:field_id
fd_web	mapdata.h	/^ fd_web,$/;"	e	enum:field_id
fear	mtype.h	/^ std::vector<monster_trigger> fear;    \/\/ What are we afraid of?$/;"	m	struct:mtype
fear	npc.h	/^ int fear;$/;"	m	struct:npc_opinion
fear_paralyze	monattack.cpp	/^void mattack::fear_paralyze(game *g, monster *z)$/;"	f	class:mattack
features	map.cpp	/^std::string map::features(const int x, const int y)$/;"	f	class:map
fence_post	iexamine.cpp	/^void iexamine::fence_post(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
fetching_item	npc.h	/^ bool fetching_item;$/;"	m	class:npc
field	mapdata.h	/^ field() { type = fd_null; density = 1; age = 0; };$/;"	f	struct:field
field	mapdata.h	/^ field(field_id t, unsigned char d, unsigned int a) {$/;"	f	struct:field
field	mapdata.h	/^struct field {$/;"	s
field_at	map.cpp	/^field& map::field_at(const int x, const int y)$/;"	f	class:map
field_count	mapdata.h	/^ int field_count;$/;"	m	struct:submap
field_id	mapdata.h	/^enum field_id {$/;"	g
field_t	mapdata.h	/^struct field_t {$/;"	s
fieldlist	mapdata.h	/^const field_t fieldlist[] = {$/;"	v
file	debug.cpp	/^ std::ofstream file;$/;"	m	struct:DebugFile	file:
fill_bad_active	artifact.cpp	/^std::vector<art_effect_active> fill_bad_active()$/;"	f
fill_bad_passive	artifact.cpp	/^std::vector<art_effect_passive> fill_bad_passive()$/;"	f
fill_good_active	artifact.cpp	/^std::vector<art_effect_active> fill_good_active()$/;"	f
fill_good_passive	artifact.cpp	/^std::vector<art_effect_passive> fill_good_passive()$/;"	f
filteredNames	name.cpp	/^std::vector<std::string> NameGenerator::filteredNames(uint32_t searchFlags) {$/;"	f	class:NameGenerator
find_all	overmap.cpp	/^std::vector<point> overmap::find_all(tripoint origin, oter_id type, int type_range,$/;"	f	class:overmap
find_closest	overmap.cpp	/^point overmap::find_closest(point origin, oter_id type, int type_range,$/;"	f	class:overmap
find_exhaust	vehicle.cpp	/^void vehicle::find_exhaust ()$/;"	f	class:vehicle
find_external_parts	vehicle.cpp	/^void vehicle::find_external_parts ()$/;"	f	class:vehicle
find_firsts	inventory_ui.cpp	/^std::vector<int> find_firsts(inventory &inv)$/;"	f
find_item	game.cpp	/^point game::find_item(item *it)$/;"	f	class:game
find_item	map.cpp	/^point map::find_item(const item *it)$/;"	f	class:map
find_item	npcmove.cpp	/^void npc::find_item(game *g)$/;"	f	class:npc
find_mission	game.cpp	/^mission* game::find_mission(int id)$/;"	f	class:game
find_mission_type	game.cpp	/^mission_type* game::find_mission_type(int id)$/;"	f	class:game
find_note	overmap.cpp	/^point overmap::find_note(int const x, int const y, int const z, std::string const& text) const$/;"	f	class:overmap
find_npc	game.cpp	/^npc* game::find_npc(int id)$/;"	f	class:game
find_safety	mission_start.cpp	/^void mission_start::find_safety(game *g, mission *miss)$/;"	f	class:mission_start
find_template	item_manager.cpp	/^itype* Item_manager::find_template(std::string name){$/;"	f	class:Item_manager
find_terrain	overmap.cpp	/^std::vector<point> overmap::find_terrain(std::string term, int cursx, int cursy, int zlevel)$/;"	f	class:overmap
fire	ranged.cpp	/^void game::fire(player &p, int tarx, int tary, std::vector<point> &trajectory,$/;"	f	class:game
fire_turret	vehicle.cpp	/^void vehicle::fire_turret (int p, bool burst)$/;"	f	class:vehicle
fire_turret_internal	vehicle.cpp	/^bool vehicle::fire_turret_internal (int p, it_gun &gun, it_ammo &ammo, int charges)$/;"	f	class:vehicle
firecracker	iuse.cpp	/^void iuse::firecracker(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
firecracker_act	iuse.cpp	/^void iuse::firecracker_act(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
firecracker_pack	iuse.cpp	/^void iuse::firecracker_pack(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
firecracker_pack_act	iuse.cpp	/^void iuse::firecracker_pack_act(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
first_house	overmap.cpp	/^void overmap::first_house(int &x, int &y)$/;"	f	class:overmap
first_topic	npc.h	/^ talk_topic first_topic;$/;"	m	struct:npc_chatbin
firstaid	iuse.cpp	/^void iuse::firstaid(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
flags	artifactdata.h	/^ unsigned flags : NUM_ITEM_FLAGS;$/;"	m	struct:artifact_weapon_datum
flags	itype.h	/^ unsigned flags : num_con_flags;$/;"	m	struct:it_container
flags	mapdata.h	/^ unsigned long flags;\/\/ : num_t_flags;$/;"	m	struct:ter_t
flags	mtype.h	/^ std::vector<m_flag> flags;$/;"	m	struct:mtype
flags	name.h	/^  uint32_t flags() const { return _flags; }$/;"	f	class:Name
flags	omdata.h	/^ unsigned flags : NUM_OMS_FLAGS; \/\/ See above$/;"	m	struct:overmap_special
flags	veh_type.h	/^    unsigned long flags;    \/\/ flags$/;"	m	struct:vpart_info
flags	vehicle.h	/^    int flags;$/;"	m	struct:vehicle_part
flamethrower	monattack.cpp	/^void mattack::flamethrower(game *g, monster *z)$/;"	f	class:mattack
flammable	mapdata.h	/^ flammable,    \/\/ May be lit on fire$/;"	e	enum:t_flag
flammable2	mapdata.h	/^ flammable2,   \/\/ Burn to ash rather than rubble.$/;"	e	enum:t_flag
flammable_items_at	map.cpp	/^bool map::flammable_items_at(const int x, const int y)$/;"	f	class:map
flashbang	game.cpp	/^void game::flashbang(int x, int y)$/;"	f	class:game
flashbang	iuse.cpp	/^void iuse::flashbang(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
flashbang_act	iuse.cpp	/^void iuse::flashbang_act(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
fld	mapdata.h	/^ field			fld[SEEX][SEEY]; \/\/ Field on each square$/;"	m	struct:submap
flee	npctalk.cpp	/^void talk_function::flee(game *g, npc *p)$/;"	f	class:talk_function
fling_player_or_monster	game.cpp	/^void game::fling_player_or_monster(player *p, monster *zz, int dir, int flvel)$/;"	f	class:game
flower_poppy	iexamine.cpp	/^void iexamine::flower_poppy(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
flumed	iuse.cpp	/^void iuse::flumed(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
flurry	weather.h	/^ void flurry		(game *) {};$/;"	f	struct:weather_effect
flusleep	iuse.cpp	/^void iuse::flusleep(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
follow	npctalk.cpp	/^void talk_function::follow(game *g, npc *p)$/;"	f	class:talk_function
follow_distance	npc.cpp	/^int npc::follow_distance()$/;"	f	class:npc
follow_up	mission.h	/^ mission_id follow_up;	\/\/ What mission do we get after this succeeds?$/;"	m	struct:mission
follow_up	mission.h	/^ mission_id follow_up;$/;"	m	struct:mission_type
font	catacurse.cpp	/^HFONT font;             \/\/Handle to the font created by CreateFont$/;"	v
fontheight	catacurse.cpp	/^int fontheight;         \/\/the height of the font, background is always this size$/;"	v
fontwidth	catacurse.cpp	/^int fontwidth;          \/\/the width of the font, background is always this size$/;"	v
footsteps	game.h	/^  std::vector<point> footsteps;$/;"	m	class:game
footsteps	monmove.cpp	/^void monster::footsteps(game *g, int x, int y)$/;"	f	class:monster
forage	game.cpp	/^void game::forage()$/;"	f	class:game
forest	overmap.cpp	/^bool omspec_place::forest(overmap *om, tripoint p)$/;"	f	class:omspec_place
form_from_map	inventory.cpp	/^void inventory::form_from_map(game *g, point origin, int range)$/;"	f	class:inventory
form_opinion	npc.cpp	/^void npc::form_opinion(player *u)$/;"	f	class:npc
formblob	monattack.cpp	/^void mattack::formblob(game *g, monster *z)$/;"	f	class:mattack
forward_velocity	vehicle.cpp	/^float vehicle::forward_velocity(){$/;"	f	class:vehicle
fout	debug.h	/^	std::ofstream fout;$/;"	m	struct:DebugLog
free_seat	vehicle.cpp	/^int vehicle::free_seat()$/;"	f	class:vehicle
friendly	mapdata.h	/^ bool friendly;$/;"	m	struct:spawn_point
friendly	monster.h	/^ int friendly;$/;"	m	class:monster
friendly_move	monmove.cpp	/^void monster::friendly_move(game *g)$/;"	f	class:monster
frostbite_timer	player.h	/^ signed int temp_cur[num_bp], frostbite_timer[num_bp];$/;"	m	class:player
fswitch	iexamine.cpp	/^void iexamine::fswitch(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
fuel_capacity	vehicle.cpp	/^int vehicle::fuel_capacity (int ftype)$/;"	f	class:vehicle
fuel_left	vehicle.cpp	/^int vehicle::fuel_left (int ftype, bool for_engine)$/;"	f	class:vehicle
fuel_name	vehicle.cpp	/^std::string vehicle::fuel_name(int ftype)$/;"	f	class:vehicle
fuel_type	veh_type.h	/^        int fuel_type;  \/\/ engine, fuel tank$/;"	m	union:vpart_info::__anon11
fuel_types	vehicle.h	/^const int fuel_types[num_fuel_types] = { AT_GAS, AT_BATT, AT_PLUT, AT_PLASMA, AT_WATER };$/;"	v
full_screen_popup	output.cpp	/^void full_screen_popup(const char* mes, ...)$/;"	f
fun	itype.h	/^    signed char fun;	\/\/ How fun its use is$/;"	m	struct:it_comest
fun	itype.h	/^ signed char fun;	\/\/ How fun reading this is$/;"	m	struct:it_book
fungus	monattack.cpp	/^void mattack::fungus(game *g, monster *z)$/;"	f	class:mattack
fungus	mondeath.cpp	/^void mdeath::fungus(game *g, monster *z)$/;"	f	class:mdeath
fungus_sprout	monattack.cpp	/^void mattack::fungus_sprout(game *g, monster *z)$/;"	f	class:mattack
fungusawake	mondeath.cpp	/^void mdeath::fungusawake(game *g, monster *z)$/;"	f	class:mdeath
g	veh_interact.h	/^    game *g;$/;"	m	class:veh_interact
g	vehicle.h	/^    game *g;$/;"	m	class:vehicle
gain_moves	vehicle.cpp	/^void vehicle::gain_moves (int mp)$/;"	f	class:vehicle
game	game.cpp	/^game::game() :$/;"	f	class:game
game	game.h	/^class game$/;"	c
game_message	game.h	/^ game_message() { turn = 0; count = 1; message = ""; };$/;"	f	struct:game_message
game_message	game.h	/^ game_message(calendar T, std::string M) : turn (T), message (M) { count = 1; };$/;"	f	struct:game_message
game_message	game.h	/^struct game_message$/;"	s
game_over	defense.cpp	/^void defense_game::game_over(game *g)$/;"	f	class:defense_game
game_over	gamemode.h	/^ virtual void game_over(game *g) { };$/;"	f	struct:special_game
game_over	gamemode.h	/^ virtual void game_over(game *g) { };$/;"	f	struct:tutorial_game
game_quit	game.cpp	/^bool game::game_quit()$/;"	f	class:game
gamemode	game.h	/^  special_game *gamemode;$/;"	m	class:game
gameover	game.cpp	/^void game::gameover()$/;"	f	class:game
gameover	mondeath.cpp	/^void mdeath::gameover(game *g, monster *z)$/;"	f	class:mdeath
gametype	game.h	/^  special_game_id gametype() const { return (gamemode) ? gamemode->id() : SGAME_NULL; }$/;"	f	class:game
gasbomb	iuse.cpp	/^void iuse::gasbomb(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
gasbomb_act	iuse.cpp	/^void iuse::gasbomb_act(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
gaspump	iexamine.cpp	/^void iexamine::gaspump(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
geiger	iuse.cpp	/^void iuse::geiger(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
gen_responses	npctalk.cpp	/^std::vector<talk_response> gen_responses(talk_topic topic, game *g, npc *p)$/;"	f
gene_sting	monattack.cpp	/^void mattack::gene_sting(game *g, monster *z)$/;"	f	class:mattack
generate	mapgen.cpp	/^void map::generate(game *g, overmap *om, const int x, const int y, const int z, const int turn)$/;"	f	class:map
generate	name.cpp	/^std::string Name::generate(bool male) {$/;"	f	class:Name
generate	overmap.cpp	/^void overmap::generate(game *g, overmap* north, overmap* east, overmap* south,$/;"	f	class:overmap
generateName	name.cpp	/^std::string NameGenerator::generateName(bool male) {$/;"	f	class:NameGenerator
generate_lightmap	lightmap.cpp	/^void map::generate_lightmap(game* g)$/;"	f	class:map
generate_sub	overmap.cpp	/^bool overmap::generate_sub(int const z)$/;"	f	class:overmap
generator	monattack.cpp	/^void mattack::generator(game *g, monster *z)$/;"	f	class:mattack
generator	name.cpp	/^NameGenerator& Name::generator() {$/;"	f	class:Name
generator	name.h	/^  static NameGenerator& generator() {$/;"	f	class:NameGenerator
get	name.cpp	/^std::string Name::get(uint32_t searchFlags) {$/;"	f	class:Name
get	picojson.h	/^  inline const value& value::get(const std::string& key) const {$/;"	f	class:picojson::value
get	picojson.h	/^  inline const value& value::get(size_t idx) const {$/;"	f	class:picojson::value
getName	name.cpp	/^std::string NameGenerator::getName(uint32_t searchFlags) {$/;"	f	class:NameGenerator
get_direction	input.cpp	/^void get_direction(int &x, int &y, InputEvent &input)$/;"	f
get_direction	keypress.cpp	/^void get_direction(game *g, int &x, int &y, char ch)$/;"	f
get_input	input.cpp	/^InputEvent get_input(int ch)$/;"	f
get_last_error	picojson.h	/^  inline const std::string& get_last_error() {$/;"	f	namespace:picojson
get_part_properties_from_item	vehicle.cpp	/^void vehicle::get_part_properties_from_item(game* g, int partnum, item& i){$/;"	f	class:vehicle
get_passenger	vehicle.cpp	/^player *vehicle::get_passenger (int p)$/;"	f	class:vehicle
get_sick	player.cpp	/^void player::get_sick(game *g)$/;"	f	class:player
get_special_game	gamemode.cpp	/^special_game* get_special_game(special_game_id id)$/;"	f
get_turn	calendar.cpp	/^int calendar::get_turn()$/;"	f	class:calendar
get_vehicles	map.cpp	/^VehicleList map::get_vehicles(){$/;"	f	class:map
get_vehicles	map.cpp	/^VehicleList map::get_vehicles(const int sx, const int sy, const int ex, const int ey)$/;"	f	class:map
getbegx	catacurse.cpp	/^int getbegx(WINDOW *win)$/;"	f
getbegy	catacurse.cpp	/^int getbegy(WINDOW *win)$/;"	f
getc	picojson.h	/^    int getc() {$/;"	f	class:picojson::input
getch	catacurse.cpp	/^int getch(void)$/;"	f
getmaxx	catacurse.cpp	/^int getmaxx(WINDOW *win)$/;"	f
getmaxy	catacurse.cpp	/^int getmaxy(WINDOW *win)$/;"	f
getmaxyx	catacurse.h	106;"	d
give_equipment	npctalk.cpp	/^void talk_function::give_equipment(game *g, npc *p)$/;"	f	class:talk_function
give_mission	game.cpp	/^void game::give_mission(mission_id type)$/;"	f	class:game
give_part_properties_to_item	vehicle.cpp	/^void vehicle::give_part_properties_to_item(game* g, int partnum, item& i){$/;"	f	class:vehicle
glare	weather.cpp	/^void weather_effect::glare(game *g)$/;"	f	class:weather_effect
global_part_at	vehicle.cpp	/^int vehicle::global_part_at(int x, int y)$/;"	f	class:vehicle
global_x	vehicle.cpp	/^int vehicle::global_x ()$/;"	f	class:vehicle
global_y	vehicle.cpp	/^int vehicle::global_y ()$/;"	f	class:vehicle
glow	trapfunc.cpp	/^void trapfunc::glow(game *g, int x, int y)$/;"	f	class:trapfunc
glow	trapfunc.cpp	/^void trapfuncm::glow(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
go_to_destination	npcmove.cpp	/^void npc::go_to_destination(game *g)$/;"	f	class:npc
goal	faction.h	/^ faction_goal goal;$/;"	m	struct:faction
goal	mission.h	/^ mission_goal goal;	\/\/ The basic goal type$/;"	m	struct:mission_type
goalx	npc.h	/^ int goalx, goaly, goalz;\/\/ Which mapx:mapy square we want to get to$/;"	m	class:npc
goaly	npc.h	/^ int goalx, goaly, goalz;\/\/ Which mapx:mapy square we want to get to$/;"	m	class:npc
goalz	npc.h	/^ int goalx, goaly, goalz;\/\/ Which mapx:mapy square we want to get to$/;"	m	class:npc
goes_bad	item.cpp	/^bool item::goes_bad()$/;"	f	class:item
goes_down	mapdata.h	/^ goes_down,    \/\/ Can '>' to go down a level$/;"	e	enum:t_flag
goes_up	mapdata.h	/^ goes_up,      \/\/ Can '<' to go up a level$/;"	e	enum:t_flag
goo	trapfunc.cpp	/^void trapfunc::goo(game *g, int x, int y)$/;"	f	class:trapfunc
goo	trapfunc.cpp	/^void trapfuncm::goo(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
good	facdata.h	/^ int good;	\/\/ A measure of how "good" the value is (naming purposes &c)$/;"	m	struct:faction_value_datum
good	faction.h	/^ int strength, sneak, crime, cult, good;	\/\/ Defining values$/;"	m	struct:faction
good_fac_id	mission.h	/^ int good_fac_id, bad_fac_id;	\/\/ IDs of the protagonist\/antagonist factions$/;"	m	struct:mission
good_river	overmap.cpp	/^void overmap::good_river(int x, int y, int z)$/;"	f	class:overmap
good_road	overmap.cpp	/^void overmap::good_road(oter_id base, int x, int y, int z)$/;"	f	class:overmap
grack	iuse.cpp	/^void iuse::grack(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
graf	mapdata.h	/^ graffiti graf[SEEX][SEEY]; \/\/ Graffiti on each square$/;"	m	struct:submap
graffiti	graffiti.cpp	/^graffiti::graffiti()$/;"	f	class:graffiti
graffiti	graffiti.cpp	/^graffiti::graffiti(std::string newstr)$/;"	f	class:graffiti
graffiti	graffiti.h	/^class graffiti$/;"	c
graffiti_at	map.cpp	/^graffiti map::graffiti_at(int x, int y)$/;"	f	class:map
grass_or_dirt	mapgen.cpp	/^ter_id grass_or_dirt()$/;"	f
grenade	iuse.cpp	/^void iuse::grenade(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
grenade_act	iuse.cpp	/^void iuse::grenade_act(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
grid	map.h	/^ submap* grid[4];$/;"	m	class:tinymap
grid	map.h	/^ submap* grid[MAPSIZE * MAPSIZE];$/;"	m	class:map
groupdebug	game.cpp	/^void game::groupdebug()$/;"	f	class:game
grow_vine	monattack.cpp	/^void mattack::grow_vine(game *g, monster *z)$/;"	f	class:mattack
growplants	monattack.cpp	/^void mattack::growplants(game *g, monster *z)$/;"	f	class:mattack
grscent	game.h	/^  int grscent[SEEX * MAPSIZE][SEEY * MAPSIZE];	\/\/ The scent map$/;"	m	class:game
guilt	mondeath.cpp	/^void mdeath::guilt(game *g, monster *z)$/;"	f	class:mdeath
gun_damage	item.cpp	/^int item::gun_damage(bool with_ammo)$/;"	f	class:item
h_black	color.h	/^h_black   = COLOR_PAIR(20),$/;"	e	enum:nc_color
h_blue	color.h	/^h_blue    = COLOR_PAIR(20),$/;"	e	enum:nc_color
h_brown	color.h	/^h_brown   = COLOR_PAIR(22),$/;"	e	enum:nc_color
h_cyan	color.h	/^h_cyan    = COLOR_PAIR(19),$/;"	e	enum:nc_color
h_dkgray	color.h	/^h_dkgray  = COLOR_PAIR(20) | A_BOLD,$/;"	e	enum:nc_color
h_green	color.h	/^h_green   = COLOR_PAIR(17),$/;"	e	enum:nc_color
h_ltblue	color.h	/^h_ltblue  = COLOR_PAIR(18) | A_BOLD,$/;"	e	enum:nc_color
h_ltcyan	color.h	/^h_ltcyan  = COLOR_PAIR(19) | A_BOLD,$/;"	e	enum:nc_color
h_ltgray	color.h	/^h_ltgray  = COLOR_PAIR(15),$/;"	e	enum:nc_color
h_ltgreen	color.h	/^h_ltgreen = COLOR_PAIR(17) | A_BOLD,$/;"	e	enum:nc_color
h_ltred	color.h	/^h_ltred   = COLOR_PAIR(16) | A_BOLD,$/;"	e	enum:nc_color
h_magenta	color.h	/^h_magenta = COLOR_PAIR(21),$/;"	e	enum:nc_color
h_pink	color.h	/^h_pink    = COLOR_PAIR(21) | A_BOLD,$/;"	e	enum:nc_color
h_red	color.h	/^h_red     = COLOR_PAIR(16),$/;"	e	enum:nc_color
h_white	color.h	/^h_white   = COLOR_PAIR(15) | A_BOLD,$/;"	e	enum:nc_color
h_yellow	color.h	/^h_yellow  = COLOR_PAIR(22) | A_BOLD,$/;"	e	enum:nc_color
hack_attempt	computer.cpp	/^bool computer::hack_attempt(player *p, int Security)$/;"	f	class:computer
hacksaw	iuse.cpp	/^void iuse::hacksaw(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
halfheight	catacurse.cpp	/^int halfheight;          \/\/half of the font height, used for centering lines$/;"	v
halflife	mapdata.h	/^ int halflife;	\/\/ In turns$/;"	m	struct:field_t
halfwidth	catacurse.cpp	/^int halfwidth;          \/\/half of the font width, used for centering lines$/;"	v
hallu	iuse.cpp	/^void iuse::hallu(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
hallucinate	game.cpp	/^void game::hallucinate(const int x, const int y)$/;"	f	class:game
hammer	iuse.cpp	/^void iuse::hammer(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
handbrake	game.cpp	/^void game::handbrake ()$/;"	f	class:game
handle_action	game.cpp	/^bool game::handle_action()$/;"	f	class:game
handle_liquid	game.cpp	/^bool game::handle_liquid(item &liquid, bool from_ground, bool infinite)$/;"	f	class:game
handle_trap	vehicle.cpp	/^void vehicle::handle_trap (int x, int y, int part)$/;"	f	class:vehicle
has_active_bionic	player.cpp	/^bool player::has_active_bionic(bionic_id b)$/;"	f	class:player
has_active_item	player.cpp	/^bool player::has_active_item(itype_id id)$/;"	f	class:player
has_addiction	player.cpp	/^bool player::has_addiction(add_type type)$/;"	f	class:player
has_adjacent_furniture	map.cpp	/^bool map::has_adjacent_furniture(const int x, const int y)$/;"	f	class:map
has_ammo	player.cpp	/^std::vector<int> player::has_ammo(ammotype at)$/;"	f	class:player
has_amount	inventory.cpp	/^bool inventory::has_amount(itype_id it, int quantity)$/;"	f	class:inventory
has_amount	player.cpp	/^bool player::has_amount(itype_id it, int quantity)$/;"	f	class:player
has_artifact_with	player.cpp	/^bool player::has_artifact_with(art_effect_passive effect)$/;"	f	class:player
has_bionic	player.cpp	/^bool player::has_bionic(bionic_id b)$/;"	f	class:player
has_charges	inventory.cpp	/^bool inventory::has_charges(itype_id it, int quantity)$/;"	f	class:inventory
has_charges	player.cpp	/^bool player::has_charges(itype_id it, int quantity)$/;"	f	class:player
has_child_flag	mutation.cpp	/^bool player::has_child_flag(game *g, pl_flag flag)$/;"	f	class:player
has_destination	npcmove.cpp	/^bool npc::has_destination()$/;"	f	class:npc
has_disease	player.cpp	/^bool player::has_disease(dis_type type)$/;"	f	class:player
has_effect	monster.cpp	/^bool monster::has_effect(monster_effect_type effect)$/;"	f	class:monster
has_flag	item.cpp	/^bool item::has_flag(item_flag f)$/;"	f	class:item
has_flag	map.cpp	/^bool map::has_flag(const t_flag flag, const int x, const int y)$/;"	f	class:map
has_flag	monster.cpp	/^bool monster::has_flag(m_flag f)$/;"	f	class:monster
has_flag	mtype.h	/^ bool has_flag(m_flag flag)$/;"	f	struct:mtype
has_flag	vehicle.h	/^    bool has_flag( int flag ) { return flag & flags; }$/;"	f	struct:vehicle_part
has_flag_ter_only	map.cpp	/^bool map::has_flag_ter_only(const t_flag flag, const int x, const int y)$/;"	f	class:map
has_fuel	veh_interact.h	/^    bool has_fuel;$/;"	m	class:veh_interact
has_gametype	game.h	/^  bool has_gametype() const { return gamemode && gamemode->id() != SGAME_NULL; }$/;"	f	class:game
has_gunmod	item.cpp	/^int item::has_gunmod(itype_id type)$/;"	f	class:item
has_hacksaw	veh_interact.h	/^    bool has_hacksaw;$/;"	m	class:veh_interact
has_healing_item	npc.cpp	/^bool npc::has_healing_item()$/;"	f	class:npc
has_item	inventory.cpp	/^bool inventory::has_item(item *it)$/;"	f	class:inventory
has_item	player.cpp	/^bool player::has_item(char let)$/;"	f	class:player
has_item	player.cpp	/^bool player::has_item(item *it)$/;"	f	class:player
has_job	faction.cpp	/^bool faction::has_job(faction_job j)$/;"	f	class:faction
has_key	texthash.cpp	/^bool text_hash::has_key(std::string key)$/;"	f	class:text_hash
has_matching_liquid	player.cpp	/^bool player::has_matching_liquid(itype_id it)$/;"	f	class:player
has_mats	veh_interact.h	/^    std::vector<bool> has_mats;$/;"	m	class:veh_interact
has_mission_item	player.cpp	/^bool player::has_mission_item(int mission_id)$/;"	f	class:player
has_mutation	player.cpp	/^bool player::has_mutation(int flag)$/;"	f	class:player
has_new_items	npc.h	/^ bool has_new_items; \/\/ If true, we have something new and should re-equip$/;"	m	class:npc
has_note	overmap.cpp	/^bool overmap::has_note(int const x, int const y, int const z) const$/;"	f	class:overmap
has_painkiller	npc.cpp	/^bool npc::has_painkiller()$/;"	f	class:npc
has_technique	item.cpp	/^bool item::has_technique(technique_id tech, player *p)$/;"	f	class:item
has_trait	player.cpp	/^bool player::has_trait(int flag)$/;"	f	class:player
has_two_arms	player.cpp	/^bool player::has_two_arms()$/;"	f	class:player
has_value	faction.cpp	/^bool faction::has_value(faction_value v)$/;"	f	class:faction
has_watertight_container	player.cpp	/^bool player::has_watertight_container()$/;"	f	class:player
has_weapon_or_armor	player.cpp	/^bool player::has_weapon_or_armor(char let)$/;"	f	class:player
has_welder	veh_interact.h	/^    bool has_welder;$/;"	m	class:veh_interact
has_wrench	veh_interact.h	/^    bool has_wrench;$/;"	m	class:veh_interact
heal	player.cpp	/^void player::heal(body_part healed, int side, int dam)$/;"	f	class:player
heal	player.cpp	/^void player::heal(hp_part healed, int dam)$/;"	f	class:player
heal_infection	mission_end.cpp	/^void mission_end::heal_infection(game *g, mission *miss)$/;"	f	class:mission_end
heal_player	npcmove.cpp	/^void npc::heal_player(game *g, player &patient)$/;"	f	class:npc
heal_self	npcmove.cpp	/^void npc::heal_self(game *g)$/;"	f	class:npc
healall	player.cpp	/^void player::healall(int dam)$/;"	f	class:player
health	player.h	/^ int hunger, thirst, fatigue, health;$/;"	m	class:player
healthy	itype.h	/^    signed char healthy;$/;"	m	struct:it_comest
heatpack	iuse.cpp	/^void iuse::heatpack(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
height	catacurse.h	/^  int height;\/\/height of the curses window$/;"	m	struct:__anon3
help	help.cpp	/^void game::help()$/;"	f	class:game
hilite	output.cpp	/^nc_color hilite(nc_color c)$/;"	f
hint_rating	item.h	/^enum hint_rating {$/;"	g
history	dialogue.h	/^ std::vector<std::string> history;$/;"	m	struct:dialogue
hit	monster.cpp	/^int monster::hit(game *g, player &p, body_part &bp_hit) {$/;"	f	class:monster
hit	player.cpp	/^void player::hit(game *g, body_part bphurt, int side, int dam, int cut)$/;"	f	class:player
hit_animation	output.cpp	/^void hit_animation(int iX, int iY, nc_color cColor, char cTile, int iTimeout)$/;"	f
hit_message	melee.cpp	/^void hit_message(game *g, std::string subject, std::string verb,$/;"	f
hit_mon	melee.cpp	/^int player::hit_mon(game *g, monster *z, bool allow_grab) \/\/ defaults to true$/;"	f	class:player
hit_monster	monster.cpp	/^void monster::hit_monster(game *g, int i)$/;"	f	class:monster
hit_monster_with_flags	ranged.cpp	/^void game::hit_monster_with_flags(monster &z, unsigned int effects)$/;"	f	class:game
hit_player	melee.cpp	/^void player::hit_player(game *g, player &p, bool allow_grab)$/;"	f	class:player
hit_player	monmove.cpp	/^void monster::hit_player(game *g, player &p, bool can_grab)$/;"	f	class:monster
hit_roll	melee.cpp	/^int player::hit_roll()$/;"	f	class:player
hit_with_acid	map.cpp	/^bool map::hit_with_acid(game *g, const int x, const int y)$/;"	f	class:map
hitall	player.cpp	/^void player::hitall(game *g, int dam, int vary)$/;"	f	class:player
honeycomb	iuse.cpp	/^void iuse::honeycomb(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
hostile	npctalk.cpp	/^void talk_function::hostile(game *g, npc *p)$/;"	f	class:talk_function
hostile_anger_level	npc.cpp	/^int npc::hostile_anger_level()$/;"	f	class:npc
hour	calendar.h	/^  int hour;$/;"	m	class:calendar
house	overmap.cpp	/^oter_id house(int dir)$/;"	f
house_room	mapgen.cpp	/^void house_room(map *m, room_type type, int x1, int y1, int x2, int y2)$/;"	f
hp	monster.h	/^ int hp;$/;"	m	class:monster
hp	mtype.h	/^ int hp;$/;"	m	struct:mtype
hp	vehicle.h	/^    int hp;                 \/\/ current durability, if 0, then broken$/;"	m	struct:vehicle_part
hp_arm_l	pldata.h	/^ hp_arm_l,$/;"	e	enum:hp_part
hp_arm_r	pldata.h	/^ hp_arm_r,$/;"	e	enum:hp_part
hp_cur	player.h	/^ int hp_cur[num_hp_parts], hp_max[num_hp_parts];$/;"	m	class:player
hp_head	pldata.h	/^ hp_head = 0,$/;"	e	enum:hp_part
hp_leg_l	pldata.h	/^ hp_leg_l,$/;"	e	enum:hp_part
hp_leg_r	pldata.h	/^ hp_leg_r,$/;"	e	enum:hp_part
hp_max	player.h	/^ int hp_cur[num_hp_parts], hp_max[num_hp_parts];$/;"	m	class:player
hp_part	pldata.h	/^enum hp_part {$/;"	g
hp_percentage	player.cpp	/^int player::hp_percentage()$/;"	f	class:player
hp_torso	pldata.h	/^ hp_torso,$/;"	e	enum:hp_part
hum	trapfunc.cpp	/^void trapfunc::hum(game *g, int x, int y)$/;"	f	class:trapfunc
hum	trapfunc.cpp	/^void trapfuncm::hum(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
hunger	gamemode.h	/^ bool hunger;		\/\/ Do we hunger?$/;"	m	struct:defense_game
hunger	player.h	/^ int hunger, thirst, fatigue, health;$/;"	m	class:player
hurt	monster.cpp	/^bool monster::hurt(int dam)$/;"	f	class:monster
hurt	player.cpp	/^void player::hurt(game *g, body_part bphurt, int side, int dam)$/;"	f	class:player
hurtall	player.cpp	/^void player::hurtall(int dam)$/;"	f	class:player
i	map.h	/^ int i; \/\/ submap col$/;"	m	struct:wrapped_vehicle
iCategorieNum	inventory_ui.cpp	/^const int iCategorieNum = 11;$/;"	v
iValue	item.h	/^  int iValue; \/\/Set to -999 if no compare value is present$/;"	m	struct:iteminfo
i_add	player.cpp	/^void player::i_add(item it, game *g)$/;"	f	class:player
i_at	map.cpp	/^std::vector<item>& map::i_at(const int x, const int y)$/;"	f	class:map
i_at	player.cpp	/^item& player::i_at(char let)$/;"	f	class:player
i_black	color.h	/^i_black   = COLOR_PAIR(30),$/;"	e	enum:nc_color
i_blue	color.h	/^i_blue    = COLOR_PAIR(11),$/;"	e	enum:nc_color
i_brown	color.h	/^i_brown   = COLOR_PAIR(14),$/;"	e	enum:nc_color
i_clear	map.cpp	/^void map::i_clear(const int x, const int y)$/;"	f	class:map
i_cyan	color.h	/^i_cyan    = COLOR_PAIR(12),$/;"	e	enum:nc_color
i_dkgray	color.h	/^i_dkgray  = COLOR_PAIR(30) | A_BLINK,$/;"	e	enum:nc_color
i_green	color.h	/^i_green   = COLOR_PAIR(10),$/;"	e	enum:nc_color
i_ltblue	color.h	/^i_ltblue  = COLOR_PAIR(11) | A_BLINK,$/;"	e	enum:nc_color
i_ltcyan	color.h	/^i_ltcyan  = COLOR_PAIR(12) | A_BLINK,$/;"	e	enum:nc_color
i_ltgray	color.h	/^i_ltgray  = COLOR_PAIR(8),$/;"	e	enum:nc_color
i_ltgreen	color.h	/^i_ltgreen = COLOR_PAIR(10) | A_BLINK,$/;"	e	enum:nc_color
i_ltred	color.h	/^i_ltred   = COLOR_PAIR(9)  | A_BLINK,$/;"	e	enum:nc_color
i_magenta	color.h	/^i_magenta = COLOR_PAIR(13),$/;"	e	enum:nc_color
i_of_type	player.cpp	/^item& player::i_of_type(itype_id type)$/;"	f	class:player
i_pink	color.h	/^i_pink    = COLOR_PAIR(13) | A_BLINK,$/;"	e	enum:nc_color
i_red	color.h	/^i_red     = COLOR_PAIR(9),$/;"	e	enum:nc_color
i_rem	map.cpp	/^void map::i_rem(const int x, const int y, const int index)$/;"	f	class:map
i_rem	player.cpp	/^item player::i_rem(char let)$/;"	f	class:player
i_rem	player.cpp	/^item player::i_rem(itype_id type)$/;"	f	class:player
i_remn	player.cpp	/^item player::i_remn(int index)$/;"	f	class:player
i_white	color.h	/^i_white   = COLOR_PAIR(8)  | A_BLINK,$/;"	e	enum:nc_color
i_yellow	color.h	/^i_yellow  = COLOR_PAIR(14) | A_BLINK,$/;"	e	enum:nc_color
id	bionics.h	/^ bionic_id id;$/;"	m	struct:bionic
id	construction.h	/^ int id;$/;"	m	struct:constructable
id	crafting.h	/^  int id;$/;"	m	struct:recipe
id	faction.h	/^ int id;$/;"	m	struct:faction
id	gamemode.h	/^ virtual special_game_id id() { return SGAME_DEFENSE; };$/;"	f	struct:defense_game
id	gamemode.h	/^ virtual special_game_id id() { return SGAME_NULL; };$/;"	f	struct:special_game
id	gamemode.h	/^ virtual special_game_id id() { return SGAME_TUTORIAL; };$/;"	f	struct:tutorial_game
id	itype.h	/^ itype_id id;		\/\/ ID # that matches its place in master itype list$/;"	m	struct:itype
id	mission.h	/^ int id;		\/\/ Matches it to a mission_id above$/;"	m	struct:mission_type
id	mtype.h	/^ int id;$/;"	m	struct:mtype
id	player.h	/^ int id;	\/\/ A unique ID number, assigned by the game class$/;"	m	class:player
id	skill.h	/^  size_t id() { return _id; }$/;"	f	class:Skill
id	trap.h	/^ int id;$/;"	m	struct:trap
id	vehicle.h	/^    vpart_id id;            \/\/ id in list of parts (vpart_list index)$/;"	m	struct:vehicle_part
ident	skill.h	/^  std::string ident() { return _ident; }$/;"	f	class:Skill
iexamine	iexamine.h	/^class iexamine$/;"	c
illness	player.h	/^ std::vector <disease> illness;$/;"	m	class:player
imp	vehicle.h	/^ int imp; \/\/ impulse$/;"	m	struct:veh_collision
in_category	mtype.h	/^ bool in_category(m_category category)$/;"	f	struct:mtype
in_inventory	veh_interact.cpp	/^   bool in_inventory;$/;"	m	struct:candidate_vpart	file:
in_its_container	item.cpp	/^item item::in_its_container(std::map<std::string, itype*> *itypes)$/;"	f	class:item
in_vehicle	player.h	/^ bool in_vehicle;       \/\/ Means player sit inside vehicle on the tile he is now$/;"	m	class:player
inbounds	map.cpp	/^bool map::inbounds(const int x, const int y)$/;"	f	class:map
increment	calendar.cpp	/^void calendar::increment()$/;"	f	class:calendar
index	npcmove.cpp	/^ int index;$/;"	m	struct:ratio_index	file:
index	pldata.h	/^ int index;$/;"	m	struct:player_activity
index	veh_interact.cpp	/^   int index;$/;"	m	struct:candidate_vpart	file:
index_by_letter	inventory.cpp	/^int inventory::index_by_letter(char ch)$/;"	f	class:inventory
infect	player.cpp	/^void player::infect(dis_type type, body_part vector, int strength,$/;"	f	class:player
infect_npc	mission_start.cpp	/^void mission_start::infect_npc(game *g, mission *miss)$/;"	f	class:mission_start
infinite	tileray.h	/^    bool infinite;  \/\/ ray is infinite (end will always return true)$/;"	m	class:tileray
info	item.cpp	/^std::string item::info(bool showtext)$/;"	f	class:item
info	item.cpp	/^std::string item::info(bool showtext, std::vector<iteminfo> *dump)$/;"	f	class:item
inhaler	iuse.cpp	/^void iuse::inhaler(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
init	defense.cpp	/^bool defense_game::init(game *g)$/;"	f	class:defense_game
init	gamemode.h	/^ virtual bool init(game *g) { return true; };$/;"	f	struct:special_game
init	item_manager.cpp	/^void Item_manager::init(){$/;"	f	class:Item_manager
init	item_manager.cpp	/^void Item_manager::init(game* main_game){$/;"	f	class:Item_manager
init	tileray.cpp	/^void tileray::init (int adir)$/;"	f	class:tileray
init	tileray.cpp	/^void tileray::init (int adx, int ady)$/;"	f	class:tileray
init	tutorial.cpp	/^bool tutorial_game::init(game *g)$/;"	f	class:tutorial_game
init_autosave	game.cpp	/^void game::init_autosave()$/;"	f	class:game
init_bionics	bionics.cpp	/^void game::init_bionics(){$/;"	f	class:game
init_buying	npc.cpp	/^void npc::init_buying(inventory you, std::vector<int> &indices,$/;"	f	class:npc
init_colors	color.cpp	/^void init_colors()$/;"	f
init_construction	construction.cpp	/^void game::init_construction()$/;"	f	class:game
init_constructions	defense.cpp	/^void defense_game::init_constructions(game *g)$/;"	f	class:defense_game
init_itypes	defense.cpp	/^void defense_game::init_itypes(game *g)$/;"	f	class:defense_game
init_itypes	itypedef.cpp	/^void game::init_itypes ()$/;"	f	class:game
init_layers	overmap.cpp	/^void overmap::init_layers()$/;"	f	class:overmap
init_map	defense.cpp	/^void defense_game::init_map(game *g)$/;"	f	class:defense_game
init_mapitems	mapitemsdef.cpp	/^void game::init_mapitems()$/;"	f	class:game
init_missions	missiondef.cpp	/^void game::init_missions()$/;"	f	class:game
init_mongroups	mongroupdef.cpp	/^void game::init_mongroups() { MonsterGroupManager::LoadJSONGroups(); }$/;"	f	class:game
init_monitems	monitemsdef.cpp	/^void game::init_monitems()$/;"	f	class:game
init_mtypes	defense.cpp	/^void defense_game::init_mtypes(game *g)$/;"	f	class:defense_game
init_mtypes	mtypedef.cpp	/^void game::init_mtypes ()$/;"	f	class:game
init_mutations	mutation_data.cpp	/^void game::init_mutations()$/;"	f	class:game
init_pair	catacurse.cpp	/^int init_pair(short pair, short f, short b)$/;"	f
init_recipes	crafting.cpp	/^void game::init_recipes()$/;"	f	class:game
init_recipes	defense.cpp	/^void defense_game::init_recipes(game *g)$/;"	f	class:defense_game
init_selling	npc.cpp	/^void npc::init_selling(std::vector<int> &indices, std::vector<int> &prices)$/;"	f	class:npc
init_state	vehicle.cpp	/^void vehicle::init_state(game* g)$/;"	f	class:vehicle
init_to_style	defense.cpp	/^void defense_game::init_to_style(defense_style new_style)$/;"	f	class:defense_game
init_translation	mongroupdef.cpp	/^void init_translation()$/;"	f
init_traps	trapdef.cpp	/^void game::init_traps()$/;"	f	class:game
init_ui	game.cpp	/^void game::init_ui(){$/;"	f	class:game
init_vehicles	veh_typedef.cpp	/^void game::init_vehicles()$/;"	f	class:game
initial_cash	gamemode.h	/^ int initial_cash;	\/\/ How much cash do we start with?$/;"	m	struct:defense_game
initial_difficulty	gamemode.h	/^ int initial_difficulty; \/\/ Total "level" of monsters in first wave$/;"	m	struct:defense_game
initscr	catacurse.cpp	/^WINDOW *initscr(void)$/;"	f
input	keypress.cpp	/^long input(long ch)$/;"	f
input	picojson.h	/^    input(const Iter& first, const Iter& last) : cur_(first), end_(last), last_ch_(-1), ungot_(false), line_(1) {}$/;"	f	class:picojson::input
input	picojson.h	/^  template <typename Iter> class input {$/;"	c	namespace:picojson
input_ret	game.h	/^enum input_ret {$/;"	g
input_wait	keypress.cpp	/^bool input_wait(char & ret_ch, int delay_ms)$/;"	f
inputdelay	catacurse.cpp	/^int inputdelay;         \/\/How long getch will wait for a character to be typed$/;"	v
inside	vehicle.h	/^    bool inside;            \/\/ if tile provides cover. WARNING: do not read it directly, use vehicle::is_inside() instead$/;"	m	struct:vehicle_part
insides_dirty	vehicle.h	/^    bool insides_dirty; \/\/ if true, then parts' "inside" flags are outdated and need refreshing$/;"	m	class:vehicle
install_bionics	bionics.cpp	/^bool player::install_bionics(game *g, it_bionic* type)$/;"	f	class:player
install_part	vehicle.cpp	/^int vehicle::install_part (int dx, int dy, vpart_id id, int hp, bool force)$/;"	f	class:vehicle
int_cur	player.h	/^ int str_cur, dex_cur, int_cur, per_cur;$/;"	m	class:player
int_max	player.h	/^ int str_max, dex_max, int_max, per_max;$/;"	m	class:player
int_to_color	color.cpp	/^nc_color int_to_color(int key)$/;"	f
intel	itype.h	/^ unsigned char intel;	\/\/ Intelligence required to read, at all$/;"	m	struct:it_book
intensity	pldata.h	/^ int intensity;$/;"	m	struct:addiction
intensity	pldata.h	/^ int intensity;$/;"	m	struct:disease
internal_parts	vehicle.cpp	/^std::vector<int> vehicle::internal_parts (int p)$/;"	f	class:vehicle
intimidation	player.cpp	/^int player::intimidation()$/;"	f	class:player
intro	game.cpp	/^void intro()$/;"	f
inuse	catacurse.h	/^  bool inuse;\/\/ Does this window actually exist?$/;"	m	struct:__anon3
inv	inventory_ui.cpp	/^char game::inv(std::string title)$/;"	f	class:game
inv	monster.h	/^ std::vector<item> inv; \/\/ Inventory$/;"	m	class:monster
inv	player.h	/^ inventory inv;$/;"	m	class:player
inv_dump	player.cpp	/^std::vector<item> player::inv_dump()$/;"	f	class:player
inv_sorted	player.h	/^ bool inv_sorted;$/;"	m	class:player
inv_type	inventory_ui.cpp	/^char game::inv_type(std::string title, int inv_item_type)$/;"	f	class:game
invent_adj	faction.cpp	/^std::string invent_adj()$/;"	f
invent_name	faction.cpp	/^std::string invent_name()$/;"	f
inventory	inventory.h	/^class inventory$/;"	c
invert_color	output.cpp	/^nc_color invert_color(nc_color c)$/;"	f
invlet	bionics.h	/^ char invlet;$/;"	m	struct:bionic
invlet	item.h	/^ char invlet;           \/\/ Inventory letter$/;"	m	class:item
invlet_is_okay	item.cpp	/^bool item::invlet_is_okay()$/;"	f	class:item
iodine	iuse.cpp	/^void iuse::iodine(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
is	picojson.h	/^template <typename T> void is(const T& x, const T& y, const char* name = "")$/;"	f
isBetween	game.cpp	/^bool game::isBetween(int test, int down, int up)$/;"	f	class:game
isTraining	skill.h	/^  bool isTraining() const { return _isTraining; }$/;"	f	class:SkillLevel
is_ammo	item.cpp	/^bool item::is_ammo()$/;"	f	class:item
is_ammo	itype.h	/^ virtual bool is_ammo()          { return false; }$/;"	f	struct:itype
is_ammo	itype.h	/^ virtual bool is_ammo() { return true; }$/;"	f	struct:it_ammo
is_ammo_container	item.cpp	/^bool item::is_ammo_container()$/;"	f	class:item
is_armed	melee.cpp	/^bool player::is_armed()$/;"	f	class:player
is_armor	item.cpp	/^bool item::is_armor()$/;"	f	class:item
is_armor	itype.h	/^ virtual bool is_armor()         { return false; }$/;"	f	struct:itype
is_armor	itype.h	/^ virtual bool is_armor() { return true; }$/;"	f	struct:it_armor
is_artifact	item.cpp	/^bool item::is_artifact()$/;"	f	class:item
is_artifact	itype.h	/^ virtual bool is_artifact()      { return false; }$/;"	f	struct:it_tool
is_artifact	itype.h	/^ virtual bool is_artifact()      { return false; }$/;"	f	struct:itype
is_artifact	itype.h	/^ virtual bool is_artifact()  { return true; }$/;"	f	struct:it_artifact_armor
is_artifact	itype.h	/^ virtual bool is_artifact()  { return true; }$/;"	f	struct:it_artifact_tool
is_artifact	itype.h	/^ virtual bool is_artifact() { return false; }$/;"	f	struct:it_armor
is_bashing_weapon	item.cpp	/^bool item::is_bashing_weapon()$/;"	f	class:item
is_benign	trapfunc.cpp	/^bool trap::is_benign()$/;"	f	class:trap
is_bionic	item.cpp	/^bool item::is_bionic()$/;"	f	class:item
is_bionic	itype.h	/^ virtual bool is_bionic()        { return false; }$/;"	f	struct:itype
is_bionic	itype.h	/^ virtual bool is_bionic()    { return true; }$/;"	f	struct:it_bionic
is_book	item.cpp	/^bool item::is_book()$/;"	f	class:item
is_book	itype.h	/^ virtual bool is_book()          { return false; }$/;"	f	struct:itype
is_book	itype.h	/^ virtual bool is_book() { return true; }$/;"	f	struct:it_book
is_container	item.cpp	/^bool item::is_container()$/;"	f	class:item
is_container	itype.h	/^ virtual bool is_container()     { return false; }$/;"	f	struct:itype
is_container	itype.h	/^ virtual bool is_container() { return true; }$/;"	f	struct:it_container
is_cutting_weapon	item.cpp	/^bool item::is_cutting_weapon()$/;"	f	class:item
is_dangerous	mapdata.h	/^ bool is_dangerous()$/;"	f	struct:field
is_defending	npc.cpp	/^bool npc::is_defending()$/;"	f	class:npc
is_destructable	map.cpp	/^bool map::is_destructable(const int x, const int y)$/;"	f	class:map
is_destructable_ter_only	map.cpp	/^bool map::is_destructable_ter_only(const int x, const int y)$/;"	f	class:map
is_drink	item.cpp	/^bool item::is_drink()$/;"	f	class:item
is_empty	game.cpp	/^bool game::is_empty(int x, int y)$/;"	f	class:game
is_enemy	npc.cpp	/^bool npc::is_enemy()$/;"	f	class:npc
is_engine	itype.h	/^ virtual bool is_engine()         { return false; }$/;"	f	struct:itype
is_engine	itype.h	/^ virtual bool is_engine() {$/;"	f	struct:it_var_veh_part
is_flammable	item.cpp	/^bool is_flammable(material m)$/;"	f
is_fleeing	monster.cpp	/^bool monster::is_fleeing(player &u)$/;"	f	class:monster
is_following	npc.cpp	/^bool npc::is_following()$/;"	f	class:npc
is_food	item.cpp	/^bool item::is_food()$/;"	f	class:item
is_food	item.cpp	/^bool item::is_food(player *u)$/;"	f	class:item
is_food	itype.h	/^    virtual bool is_food() { return true; }$/;"	f	struct:it_comest
is_food	itype.h	/^ virtual bool is_food()          { return false; }$/;"	f	struct:itype
is_food_container	item.cpp	/^bool item::is_food_container()$/;"	f	class:item
is_food_container	item.cpp	/^bool item::is_food_container(player *u)$/;"	f	class:item
is_friend	npc.cpp	/^bool npc::is_friend()$/;"	f	class:npc
is_game_over	game.cpp	/^bool game::is_game_over()$/;"	f	class:game
is_ground	overmap.cpp	/^bool is_ground(oter_id ter)$/;"	f
is_gun	item.cpp	/^bool item::is_gun()$/;"	f	class:item
is_gun	itype.h	/^ virtual bool is_gun()           { return false; }$/;"	f	struct:itype
is_gun	itype.h	/^ virtual bool is_gun() { return true; }$/;"	f	struct:it_gun
is_gunmod	item.cpp	/^bool item::is_gunmod()$/;"	f	class:item
is_gunmod	itype.h	/^ virtual bool is_gunmod()        { return false; }$/;"	f	struct:itype
is_gunmod	itype.h	/^ virtual bool is_gunmod() { return true; }$/;"	f	struct:it_gunmod
is_in_sunlight	game.cpp	/^bool game::is_in_sunlight(int x, int y)$/;"	f	class:game
is_indoor	map.cpp	/^bool map::is_indoor(const int x, const int y)$/;"	f	class:map
is_inside	vehicle.cpp	/^bool vehicle::is_inside (int p)$/;"	f	class:vehicle
is_leader	npc.cpp	/^bool npc::is_leader()$/;"	f	class:npc
is_macguffin	item.cpp	/^bool item::is_macguffin()$/;"	f	class:item
is_macguffin	itype.h	/^ virtual bool is_macguffin()     { return false; }$/;"	f	struct:itype
is_macguffin	itype.h	/^ virtual bool is_macguffin() { return true; }$/;"	f	struct:it_macguffin
is_night	calendar.cpp	/^bool calendar::is_night() const$/;"	f	class:calendar
is_npc	npc.h	/^ virtual bool is_npc() { return true; }$/;"	f	class:npc
is_npc	player.h	/^ virtual bool is_npc() { return false; }	\/\/ Overloaded for NPCs in npc.h$/;"	f	class:player
is_null	item.cpp	/^bool item::is_null()$/;"	f	class:item
is_null	line.cpp	/^bool rl_vec2d::is_null(){$/;"	f	class:rl_vec2d
is_null	mapdata.h	/^ bool is_null()$/;"	f	struct:field
is_other	item.cpp	/^bool item::is_other()$/;"	f	class:item
is_outside	map.cpp	/^bool map::is_outside(const int x, const int y)$/;"	f	class:map
is_power_armor	itype.h	/^ virtual bool is_power_armor()   { return false; }$/;"	f	struct:itype
is_power_armor	itype.h	/^ virtual bool is_power_armor() { return power_armor; }$/;"	f	struct:it_armor
is_river	overmap.cpp	/^bool is_river(oter_id ter)$/;"	f
is_road	overmap.cpp	/^bool overmap::is_road(int x, int y, int z)$/;"	f	class:overmap
is_road	overmap.cpp	/^bool overmap::is_road(oter_id base, int x, int y, int z)$/;"	f	class:overmap
is_safe	mongroup.h	/^ bool is_safe() { return (type == "GROUP_NULL" || type == "GROUP_FOREST"); };$/;"	f	struct:mongroup
is_safe	overmap.cpp	/^bool overmap::is_safe(int x, int y, int z)$/;"	f	class:overmap
is_silent	item.cpp	/^bool item::is_silent()$/;"	f	class:item
is_software	item.cpp	/^bool item::is_software()$/;"	f	class:item
is_software	itype.h	/^ virtual bool is_software()      { return false; }$/;"	f	struct:itype
is_software	itype.h	/^ virtual bool is_software()      { return true; }$/;"	f	struct:it_software
is_style	item.cpp	/^bool item::is_style()$/;"	f	class:item
is_style	itype.h	/^ virtual bool is_style()         { return false; }$/;"	f	struct:itype
is_style	itype.h	/^ virtual bool is_style()         { return true; }$/;"	f	struct:it_style
is_tiny	map.h	/^ virtual bool is_tiny() { return false; };$/;"	f	class:map
is_tiny	map.h	/^ virtual bool is_tiny() { return true; };$/;"	f	class:tinymap
is_tool	item.cpp	/^bool item::is_tool()$/;"	f	class:item
is_tool	itype.h	/^ virtual bool is_tool()          { return false; }$/;"	f	struct:itype
is_tool	itype.h	/^ virtual bool is_tool()          { return true; }$/;"	f	struct:it_tool
is_two_handed	item.cpp	/^bool item::is_two_handed(player *u)$/;"	f	class:item
is_valid	basecamp.h	/^	inline bool is_valid() const { return !name.empty(); }$/;"	f	class:basecamp
is_var_veh_part	item.cpp	/^bool item::is_var_veh_part()$/;"	f	class:item
is_var_veh_part	itype.h	/^ virtual bool is_var_veh_part()  { return false; }$/;"	f	struct:itype
is_var_veh_part	itype.h	/^ virtual bool is_var_veh_part(){return true;}$/;"	f	struct:it_var_veh_part
is_wall_material	overmap.cpp	/^bool is_wall_material(oter_id ter)$/;"	f
is_weap	item.cpp	/^bool item::is_weap()$/;"	f	class:item
is_wearing	player.cpp	/^bool player::is_wearing(itype_id it)$/;"	f	class:player
is_wheel	itype.h	/^ virtual bool is_wheel()          { return false; }$/;"	f	struct:it_var_veh_part
is_wheel	itype.h	/^ virtual bool is_wheel()          { return false; }$/;"	f	struct:itype
it_ammo	itype.h	/^ it_ammo(std::string pid, unsigned char prarity, unsigned int pprice,$/;"	f	struct:it_ammo
it_ammo	itype.h	/^struct it_ammo : public itype$/;"	s
it_armor	itype.h	/^ it_armor()$/;"	f	struct:it_armor
it_armor	itype.h	/^ it_armor(itype_id pid, unsigned char prarity, unsigned int pprice,$/;"	f	struct:it_armor
it_armor	itype.h	/^struct it_armor : public itype$/;"	s
it_artifact_armor	itype.h	/^ it_artifact_armor()$/;"	f	struct:it_artifact_armor
it_artifact_armor	itype.h	/^ it_artifact_armor(std::string pid, unsigned int pprice, std::string pname,$/;"	f	struct:it_artifact_armor
it_artifact_armor	itype.h	/^struct it_artifact_armor : public it_armor$/;"	s
it_artifact_tool	itype.h	/^ it_artifact_tool() {$/;"	f	struct:it_artifact_tool
it_artifact_tool	itype.h	/^ it_artifact_tool(std::string pid, unsigned int pprice, std::string pname,$/;"	f	struct:it_artifact_tool
it_artifact_tool	itype.h	/^struct it_artifact_tool : public it_tool$/;"	s
it_bionic	itype.h	/^ it_bionic(std::string pid, unsigned char prarity, unsigned int pprice,$/;"	f	struct:it_bionic
it_bionic	itype.h	/^struct it_bionic : public itype$/;"	s
it_book	itype.h	/^ it_book(std::string pid, unsigned char prarity, unsigned int pprice,$/;"	f	struct:it_book
it_book	itype.h	/^struct it_book : public itype$/;"	s
it_comest	itype.h	/^    it_comest(std::string pid, unsigned char prarity, unsigned int pprice,$/;"	f	struct:it_comest
it_comest	itype.h	/^struct it_comest : public itype$/;"	s
it_container	itype.h	/^ it_container(std::string pid, unsigned char prarity, unsigned int pprice,$/;"	f	struct:it_container
it_container	itype.h	/^struct it_container : public itype$/;"	s
it_gun	itype.h	/^ it_gun(std::string pid, unsigned char prarity, unsigned int pprice,$/;"	f	struct:it_gun
it_gun	itype.h	/^struct it_gun : public itype$/;"	s
it_gunmod	itype.h	/^ it_gunmod(std::string pid, unsigned char prarity, unsigned int pprice,$/;"	f	struct:it_gunmod
it_gunmod	itype.h	/^struct it_gunmod : public itype$/;"	s
it_macguffin	itype.h	/^ it_macguffin(std::string pid, unsigned char prarity, unsigned int pprice,$/;"	f	struct:it_macguffin
it_macguffin	itype.h	/^struct it_macguffin : public itype$/;"	s
it_software	itype.h	/^ it_software(std::string pid, unsigned char prarity, unsigned int pprice,$/;"	f	struct:it_software
it_software	itype.h	/^struct it_software : public itype$/;"	s
it_style	itype.h	/^ it_style(std::string pid, unsigned char prarity, unsigned int pprice,$/;"	f	struct:it_style
it_style	itype.h	/^struct it_style : public itype$/;"	s
it_tool	itype.h	/^ it_tool()$/;"	f	struct:it_tool
it_tool	itype.h	/^ it_tool(std::string pid, unsigned char prarity, unsigned int pprice,$/;"	f	struct:it_tool
it_tool	itype.h	/^struct it_tool : public itype$/;"	s
it_var_veh_part	itype.h	/^ it_var_veh_part(std::string pid, unsigned char prarity, unsigned int pprice,$/;"	f	struct:it_var_veh_part
it_var_veh_part	itype.h	/^struct it_var_veh_part: public itype$/;"	s
item	item.cpp	/^item::item()$/;"	f	class:item
item	item.cpp	/^item::item(itype *it, unsigned int turn, char let)$/;"	f	class:item
item	item.cpp	/^item::item(itype* it, unsigned int turn)$/;"	f	class:item
item	item.cpp	/^item::item(std::string itemdata, game *g)$/;"	f	class:item
item	item.h	/^class item$/;"	c
item	veh_type.h	/^    itype_id item;      \/\/ corresponding item$/;"	m	struct:vpart_info
item_by_letter	inventory.cpp	/^item& inventory::item_by_letter(char ch)$/;"	f	class:inventory
item_cat	itype.h	/^enum item_cat$/;"	g
item_chance	mtype.h	/^ signed char item_chance;	\/\/ Higher # means higher chance of loot$/;"	m	struct:mtype
item_controller	item_manager.cpp	/^Item_manager* item_controller = new Item_manager();$/;"	v
item_counter	item.h	/^ unsigned item_counter;	\/\/ generic counter to be used with item flags$/;"	m	class:item
item_exchanges_since_save	game.h	/^  int item_exchanges_since_save;$/;"	m	class:game
item_flag	itype.h	/^enum item_flag {$/;"	g
item_flags	itype.h	/^ unsigned item_flags : NUM_ITEM_FLAGS;$/;"	m	struct:itype
item_id	mission.h	/^ itype_id item_id;	\/\/ Item that needs to be found (or whatever)$/;"	m	struct:mission
item_id	mission.h	/^ itype_id item_id;$/;"	m	struct:mission_type
item_id	npc.h	/^ itype_id item_id;$/;"	m	struct:npc_favor
item_template_container	item_manager.h	/^typedef std::map<std::string, itype*> item_template_container;$/;"	t
item_type	morale.h	/^ itype* item_type;$/;"	m	struct:morale_point
iteminfo	item.h	/^  iteminfo(std::string sIn0, std::string sIn1, std::string sIn2 = "", int iIn0 = -999, std::string sIn3 = "", bool bIn0 = true, bool bIn1 = false) {$/;"	f	struct:iteminfo
iteminfo	item.h	/^struct iteminfo{$/;"	s
items	inventory.h	/^  std::vector< std::vector<item> > items;$/;"	m	class:inventory
items	vehicle.h	/^    std::vector<item> items;\/\/ inventory$/;"	m	struct:vehicle_part
items_dragged	game.h	/^  std::vector<item> items_dragged;$/;"	m	class:game
items_location	mapitems.h	/^enum items_location {$/;"	g
items_location_and_chance	mapitems.h	/^ items_location_and_chance (items_location l, int c) {$/;"	f	struct:items_location_and_chance
items_location_and_chance	mapitems.h	/^struct items_location_and_chance$/;"	s
itm	mapdata.h	/^ std::vector<item>	itm[SEEX][SEEY]; \/\/ Items on each square$/;"	m	struct:submap
itx	npc.h	/^ int itx, ity;	\/\/ The square containing an item we want$/;"	m	class:npc
ity	npc.h	/^ int itx, ity;	\/\/ The square containing an item we want$/;"	m	class:npc
itype	itype.h	/^ itype() {$/;"	f	struct:itype
itype	itype.h	/^ itype(std::string pid, unsigned char prarity, unsigned int pprice,$/;"	f	struct:itype
itype	itype.h	/^struct itype$/;"	s
itype_id	itype.h	/^typedef std::string itype_id;$/;"	t
itypes	game.h	/^  std::map<std::string, itype*> itypes;$/;"	m	class:game
itypes	map.h	/^ std::map<std::string, itype*>* itypes;$/;"	m	class:map
iuse	iuse.h	/^class iuse$/;"	c
j	map.h	/^ int j; \/\/ submap row$/;"	m	struct:wrapped_vehicle
jackhammer	iuse.cpp	/^void iuse::jackhammer(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
jacqueshammer	iuse.cpp	/^void iuse::jacqueshammer(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
job1	faction.h	/^ faction_job job1, job2;$/;"	m	struct:faction
job2	faction.h	/^ faction_job job1, job2;$/;"	m	struct:faction
k_dynamics	vehicle.cpp	/^float vehicle::k_dynamics ()$/;"	f	class:vehicle
k_mass	vehicle.cpp	/^float vehicle::k_mass ()$/;"	f	class:vehicle
k_mvel	vehicle.h	/^const int k_mvel = 200;$/;"	v
keymap	game.h	/^  std::map<char, action_id> keymap;$/;"	m	class:game
keypad	catacurse.cpp	/^int keypad(WINDOW *faux, bool bf)$/;"	f
keypad	catacurse.cpp	/^int keypad(int faux, bool bf)$/;"	f
keys	texthash.h	/^ std::vector<std::string> keys;$/;"	m	struct:text_hash
keys_bound_to	action.cpp	/^std::vector<char> game::keys_bound_to(action_id act)$/;"	f	class:game
kill_breathers	mondeath.cpp	/^void mdeath::kill_breathers(game *g, monster *z)$/;"	f	class:mdeath
kill_mon	game.cpp	/^void game::kill_mon(int index, bool u_did_it)$/;"	f	class:game
kill_npc	mission_fail.cpp	/^void mission_fail::kill_npc(game *g, mission *miss)$/;"	f	class:mission_fail
kill_vines	mondeath.cpp	/^void mdeath::kill_vines(game *g, monster *z)$/;"	f	class:mdeath
kills	game.h	/^  int kills[num_monsters];	        \/\/ Player's kill count$/;"	m	class:game
knife	iuse.cpp	/^ void iuse::knife(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
knock_back_from	monmove.cpp	/^void monster::knock_back_from(game *g, int x, int y)$/;"	f	class:monster
knock_back_from	player.cpp	/^void player::knock_back_from(game *g, int x, int y)$/;"	f	class:player
known_by_u	faction.h	/^ bool known_by_u;$/;"	m	struct:faction
known_down	omdata.h	/^ bool known_down;$/;"	m	struct:oter_t
known_up	omdata.h	/^ bool known_up;$/;"	m	struct:oter_t
l_flammable	mapdata.h	/^ l_flammable,  \/\/ Harder to light on fire, but still possible$/;"	e	enum:t_flag
land	overmap.cpp	/^bool omspec_place::land(overmap *om, tripoint p)$/;"	f	class:omspec_place
landmine	trapfunc.cpp	/^void trapfunc::landmine(game *g, int x, int y)$/;"	f	class:trapfunc
landmine	trapfunc.cpp	/^void trapfuncm::landmine(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
last_action	game.h	/^  std::string last_action;		\/\/ The keypresses of last turn$/;"	m	class:game
last_ch_	picojson.h	/^    int last_ch_;$/;"	m	class:picojson::input
last_dx	tileray.h	/^    int last_dx;    \/\/ dx of last advance$/;"	m	class:tileray
last_dy	tileray.h	/^    int last_dy;    \/\/ dy of last advance$/;"	m	class:tileray
last_error_t	picojson.h	/^  template <typename T> struct last_error_t {$/;"	s	namespace:picojson
last_item	player.h	/^ itype_id last_item;$/;"	m	class:player
last_target	game.h	/^  signed char last_target;\/\/ The last monster targeted$/;"	m	class:game
last_turn	vehicle.h	/^    int last_turn;      \/\/ amount of last turning (for calculate skidding due to handbrake)$/;"	m	class:vehicle
lastchar	catacurse.cpp	/^int lastchar;          \/\/the last character that was pressed, resets in getch$/;"	v
lastrecipe	player.h	/^ recipe* lastrecipe;$/;"	m	class:player
latest_lightlevel	game.h	/^  unsigned char latest_lightlevel;$/;"	m	class:game
latest_lightlevel_turn	game.h	/^  calendar latest_lightlevel_turn;$/;"	m	class:game
lava	trapfunc.cpp	/^void trapfunc::lava(game *g, int x, int y)$/;"	f	class:trapfunc
lava	trapfunc.cpp	/^void trapfuncm::lava(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
layer	overmap.h	/^  map_layer *layer;$/;"	m	class:overmap
lead_to_safety	npctalk.cpp	/^void talk_function::lead_to_safety(game *g, npc *p)$/;"	f	class:talk_function
leak_fuel	vehicle.cpp	/^void vehicle::leak_fuel (int p)$/;"	f	class:vehicle
leap	monattack.cpp	/^void mattack::leap(game *g, monster *z)$/;"	f	class:mattack
leave	npctalk.cpp	/^void talk_function::leave(game *g, npc *p)$/;"	f	class:talk_function
ledge	trapfunc.cpp	/^void trapfunc::ledge(game *g, int x, int y)$/;"	f	class:trapfunc
ledge	trapfunc.cpp	/^void trapfuncm::ledge(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
leftover	tileray.h	/^    int leftover;   \/\/ counter to shift coords$/;"	m	class:tileray
level	itype.h	/^ int level;$/;"	m	struct:style_move
level	itype.h	/^ unsigned char level;	\/\/ The value it takes the skill to$/;"	m	struct:it_book
level	skill.h	/^  int level() const { return _level; }$/;"	f	class:SkillLevel
level	skill.h	/^  int level(int level) { _level = level; return level; }$/;"	f	class:SkillLevel
levx	game.h	/^  int levx, levy, levz;	\/\/ Placement inside the overmap$/;"	m	class:game
levy	game.h	/^  int levx, levy, levz;	\/\/ Placement inside the overmap$/;"	m	class:game
levz	game.h	/^  int levx, levy, levz;	\/\/ Placement inside the overmap$/;"	m	class:game
light_acid	weather.cpp	/^void weather_effect::light_acid(game *g)$/;"	f	class:weather_effect
light_at	lightmap.cpp	/^lit_level map::light_at(int dx, int dy)$/;"	f	class:map
light_level	game.cpp	/^unsigned char game::light_level()$/;"	f	class:game
light_modifier	weather.h	/^ int light_modifier; \/\/ Modification to ambient light$/;"	m	struct:weather_datum
light_off	iuse.cpp	/^void iuse::light_off(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
light_on	iuse.cpp	/^void iuse::light_on(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
light_transparency	map.cpp	/^const float map::light_transparency(const int x, const int y) const$/;"	f	class:map
lighter	iuse.cpp	/^void iuse::lighter(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
lightning	weather.cpp	/^void weather_effect::lightning(game *g)$/;"	f	class:weather_effect
lights_on	vehicle.h	/^    bool lights_on;     \/\/ lights on\/off$/;"	m	class:vehicle
likes_u	faction.h	/^ int likes_u;$/;"	m	struct:faction
limitDebugClass	debug.cpp	/^void limitDebugClass( int i )$/;"	f
limitDebugLevel	debug.cpp	/^void limitDebugLevel( int i )$/;"	f
line	catacurse.h	/^  curseline *line;$/;"	m	struct:__anon3
line	mapgen.cpp	/^void line(map *m, ter_id type, int x1, int y1, int x2, int y2)$/;"	f
line	picojson.h	/^    int line() const { return line_; }$/;"	f	class:picojson::input
line_	picojson.h	/^    int line_;$/;"	m	class:picojson::input
line_to	line.cpp	/^std::vector <point> line_to(int x1, int y1, int x2, int y2, int t)$/;"	f
liquid	mapdata.h	/^ liquid,       \/\/ Blocks movement but isn't a wall, e.g. lava or water$/;"	e	enum:t_flag
list_factions	game.cpp	/^faction* game::list_factions(std::string title)$/;"	f	class:game
list_items	game.cpp	/^void game::list_items()$/;"	f	class:game
list_items_match	game.cpp	/^bool game::list_items_match(std::string sText, std::string sPattern)$/;"	f	class:game
list_missions	game.cpp	/^void game::list_missions()$/;"	f	class:game
lit_level	lightmap.h	/^enum lit_level {$/;"	g
lm	map.h	/^ float lm[MAPSIZE*SEEX][MAPSIZE*SEEY];$/;"	m	class:map
load	game.cpp	/^void game::load(std::string name)$/;"	f	class:game
load	map.cpp	/^void map::load(game *g, const int wx, const int wy, const int wz, const bool update_vehicle)$/;"	f	class:map
load	mapbuffer.cpp	/^void mapbuffer::load()$/;"	f	class:mapbuffer
load	vehicle.cpp	/^void vehicle::load (std::ifstream &stin)$/;"	f	class:vehicle
loadSkills	skill.cpp	/^std::vector<Skill*> Skill::loadSkills() {$/;"	f	class:Skill
load_data	basecamp.cpp	/^void basecamp::load_data(std::string const& data)$/;"	f	class:basecamp
load_data	computer.cpp	/^void computer::load_data(std::string data)$/;"	f	class:computer
load_info	faction.cpp	/^void faction::load_info(std::string data)$/;"	f	class:faction
load_info	item.cpp	/^void item::load_info(std::string data, game *g)$/;"	f	class:item
load_info	mission.cpp	/^void mission::load_info(game *g, std::ifstream &data)$/;"	f	class:mission
load_info	monster.cpp	/^void monster::load_info(std::string data, std::vector <mtype*> *mtypes)$/;"	f	class:monster
load_info	npc.cpp	/^void npc::load_info(game *g, std::string data)$/;"	f	class:npc
load_info	npc.h	/^ void load_info(std::istream &data)$/;"	f	struct:npc_combat_rules
load_info	npc.h	/^ void load_info(std::stringstream &info)$/;"	f	struct:npc_chatbin
load_info	npc.h	/^ void load_info(std::stringstream &info)$/;"	f	struct:npc_opinion
load_info	player.cpp	/^void player::load_info(game *g, std::string data)$/;"	f	class:player
load_info	pldata.h	/^ void load_info(std::stringstream &dump)$/;"	f	struct:player_activity
load_keyboard_settings	action.cpp	/^void game::load_keyboard_settings()$/;"	f	class:game
load_master	game.cpp	/^bool game::load_master()$/;"	f	class:game
load_options	options.cpp	/^void load_options()$/;"	f
loadn	map.cpp	/^bool map::loadn(game *g, const int worldx, const int worldy, const int worldz, const int gridx, const int gridy,$/;"	f	class:map
loc	mapitems.h	/^ items_location loc;$/;"	m	struct:items_location_and_chance
loc	overmap.h	/^  point loc;$/;"	m	class:overmap
location	gamemode.h	/^ defense_location location; \/\/ Where are we?$/;"	m	struct:defense_game
long_craft	crafting.cpp	/^void game::long_craft()$/;"	f	class:game
long_term_goal_action	npcmove.cpp	/^npc_action npc::long_term_goal_action(game *g)$/;"	f	class:npc
look_around	game.cpp	/^point game::look_around()$/;"	f	class:game
look_for_player	npcmove.cpp	/^void npc::look_for_player(game *g, player &sought)$/;"	f	class:npc
look_up_action	action.cpp	/^action_id look_up_action(std::string ident)$/;"	f
lookup_item	player.cpp	/^int player::lookup_item(char let)$/;"	f	class:player
lookup_option_key	options.cpp	/^option_key lookup_option_key(std::string id)$/;"	f
lookup_submap	mapbuffer.cpp	/^submap* mapbuffer::lookup_submap(int x, int y, int z)$/;"	f	class:mapbuffer
loudness	itype.h	/^ signed char accuracy, damage, loudness, clip, recoil, burst;$/;"	m	struct:it_gunmod
lumber	iuse.cpp	/^void iuse::lumber(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
m	game.h	/^  map m;$/;"	m	class:game
m1	artifactdata.h	/^ material m1;$/;"	m	struct:artifact_armor_form_datum
m1	artifactdata.h	/^ material m1;$/;"	m	struct:artifact_tool_form_datum
m1	itype.h	/^ material m1;		\/\/ Main material$/;"	m	struct:itype
m2	artifactdata.h	/^ material m2;$/;"	m	struct:artifact_armor_form_datum
m2	artifactdata.h	/^ material m2;$/;"	m	struct:artifact_tool_form_datum
m2	itype.h	/^ material m2;		\/\/ Secondary material -- MNULL if made of just 1 thing$/;"	m	struct:itype
m_category	mtype.h	/^enum m_category {$/;"	g
m_flag	mtype.h	/^enum m_flag {$/;"	g
m_missing_item	item_manager.h	/^    itype*  m_missing_item;$/;"	m	class:Item_manager
m_size	mtype.h	/^enum m_size {$/;"	g
m_templates	item_manager.h	/^    item_template_container  m_templates;$/;"	m	class:Item_manager
m_to_hit	itype.h	/^ signed char m_to_hit;	\/\/ To-hit bonus for melee combat; -5 to 5 is reasonable$/;"	m	struct:itype
made_footstep	monster.h	/^ bool made_footstep;$/;"	m	class:monster
made_of	item.cpp	/^bool item::made_of(material mat)$/;"	f	class:item
made_of	monster.cpp	/^bool monster::made_of(material m)$/;"	f	class:monster
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f
main	picojson.h	/^int main(void)$/;"	f
mainwin	catacurse.cpp	/^WINDOW *mainwin;$/;"	v
make	item.cpp	/^void item::make(itype* it)$/;"	f	class:item
make_all_craft	crafting.cpp	/^void game::make_all_craft(recipe *making)$/;"	f	class:game
make_angry	npc.cpp	/^void npc::make_angry()$/;"	f	class:npc
make_army	faction.cpp	/^void faction::make_army()$/;"	f	class:faction
make_corpse	item.cpp	/^void item::make_corpse(itype* it, mtype* mt, unsigned int turn)$/;"	f	class:item
make_craft	crafting.cpp	/^void game::make_craft(recipe *making)$/;"	f	class:game
make_friendly	monster.cpp	/^void monster::make_friendly()$/;"	f	class:monster
make_fungus	monster.cpp	/^bool monster::make_fungus(game *g)$/;"	f	class:monster
make_gun_sound_effect	ranged.cpp	/^void make_gun_sound_effect(game *g, player &p, bool burst, item* weapon)$/;"	f
make_hiway	overmap.cpp	/^void overmap::make_hiway(int x1, int y1, int x2, int y2, int z, oter_id base)$/;"	f	class:overmap
make_road	overmap.cpp	/^void overmap::make_road(int cx, int cy, int cs, int dir, city town)$/;"	f	class:overmap
make_tutorial	overmap.cpp	/^void overmap::make_tutorial()$/;"	f	class:overmap
make_volatile	mapbuffer.cpp	/^void mapbuffer::make_volatile()$/;"	f	class:mapbuffer
makemound	iuse.cpp	/^void iuse::makemound(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
making_would_work	crafting.cpp	/^bool game::making_would_work(recipe *making)$/;"	f	class:game
male	player.h	/^ bool male;$/;"	m	class:player
manhack	iuse.cpp	/^void iuse::manhack(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
mansion_room	mapgen.cpp	/^void mansion_room(map *m, int x1, int y1, int x2, int y2)$/;"	f
map	map.cpp	/^map::map()$/;"	f	class:map
map	map.cpp	/^map::map(std::map<std::string, itype*>* itptr, std::vector<itype_id> (*miptr)[num_itloc],$/;"	f	class:map
map	map.h	/^class map$/;"	c
mapRain	game.h	/^  std::map<int, std::map<int, bool> > mapRain;$/;"	m	class:game
map_extra	mapdata.h	/^enum map_extra {$/;"	g
map_extra_chance	mapdata.h	/^const int map_extra_chance[num_map_extras + 1] = {$/;"	v
map_extras	mapdata.h	/^ map_extras(unsigned int embellished, int helicopter = 0, int mili = 0,$/;"	f	struct:map_extras
map_extras	mapdata.h	/^struct map_extras {$/;"	s
map_layer	overmap.h	/^ map_layer() : terrain(), visible(), notes() {}$/;"	f	struct:map_layer
map_layer	overmap.h	/^struct map_layer {$/;"	s
map_point	event.h	/^ point map_point;$/;"	m	struct:event
mapbuffer	mapbuffer.cpp	/^mapbuffer::mapbuffer()$/;"	f	class:mapbuffer
mapbuffer	mapbuffer.h	/^class mapbuffer$/;"	c
mapitems	game.h	/^  std::vector <itype_id> mapitems[num_itloc]; \/\/ Items at various map types$/;"	m	class:game
mapitems	map.h	/^ std::vector <itype_id> (*mapitems)[num_itloc];$/;"	m	class:map::std
mapx	faction.h	/^ int mapx, mapy;\/\/ Where in that overmap are we?$/;"	m	struct:faction
mapx	npc.h	/^ int mapx, mapy;\/\/ Which square in that overmap (e.g., m.0.0)$/;"	m	class:npc
mapx	veh_interact.cpp	/^   int mapx;$/;"	m	struct:candidate_vpart	file:
mapy	faction.h	/^ int mapx, mapy;\/\/ Where in that overmap are we?$/;"	m	struct:faction
mapy	npc.h	/^ int mapx, mapy;\/\/ Which square in that overmap (e.g., m.0.0)$/;"	m	class:npc
mapy	veh_interact.cpp	/^   int mapy;$/;"	m	struct:candidate_vpart	file:
marked_for_death	npc.h	/^ bool marked_for_death; \/\/ If true, we die as soon as we respawn!$/;"	m	class:npc
marloss	iuse.cpp	/^void iuse::marloss(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
marlossify	map.cpp	/^void map::marlossify(const int x, const int y)$/;"	f	class:map
martial_arts_itype_ids	itypedef.cpp	/^std::vector<std::string> martial_arts_itype_ids;$/;"	v
master_game	mapbuffer.h	/^  game *master_game;$/;"	m	class:mapbuffer
mat	mtype.h	/^ material mat;	\/\/ See enums.h for material list.  Generally, flesh; veggy?$/;"	m	struct:mtype
match	picojson.h	/^    bool match(const std::string& pattern) {$/;"	f	class:picojson::input
matches_us	faction.cpp	/^bool faction::matches_us(faction_value v)$/;"	f	class:faction
material	enums.h	/^enum material {$/;"	g
mattack	monattack.h	/^class mattack$/;"	c
max_appearances	omdata.h	/^ int max_appearances;   \/\/ Max number in an overmap$/;"	m	struct:overmap_special
max_bigness	itype.h	/^ unsigned int max_bigness;$/;"	m	struct:it_var_veh_part
max_charges	itype.h	/^ unsigned int max_charges;$/;"	m	struct:it_tool
max_dist_from_city	omdata.h	/^ int max_dist_from_city;\/\/ Max distance from city limits$/;"	m	struct:overmap_special
max_power_level	player.h	/^ int power_level, max_power_level;$/;"	m	class:player
max_velocity	vehicle.cpp	/^int vehicle::max_velocity (bool fueled)$/;"	f	class:vehicle
maxtime	weather.h	/^ int mintime, maxtime; \/\/ min\/max time it lasts, in minutes$/;"	m	struct:weather_datum
mcg_note	iuse.cpp	/^void iuse::mcg_note(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
mdeath	mondeath.h	/^class mdeath$/;"	c
melee_bash	artifactdata.h	/^ int melee_bash, melee_cut, melee_hit;$/;"	m	struct:artifact_armor_form_datum
melee_cut	artifactdata.h	/^ int melee_bash, melee_cut, melee_hit;$/;"	m	struct:artifact_armor_form_datum
melee_cut	itype.h	/^ signed char melee_cut;	\/\/ Cutting damage in melee$/;"	m	struct:itype
melee_cut	mtype.h	/^ unsigned char melee_cut;	\/\/ Bonus cutting damage$/;"	m	struct:mtype
melee_dam	itype.h	/^ signed char melee_dam;	\/\/ Bonus for melee damage; may be a penalty$/;"	m	struct:itype
melee_dice	mtype.h	/^ unsigned char melee_dice;	\/\/ Number of dice on melee hit$/;"	m	struct:mtype
melee_hit	artifactdata.h	/^ int melee_bash, melee_cut, melee_hit;$/;"	m	struct:artifact_armor_form_datum
melee_monster	npcmove.cpp	/^void npc::melee_monster(game *g, int target)$/;"	f	class:npc
melee_player	npcmove.cpp	/^void npc::melee_player(game *g, player &foe)$/;"	f	class:npc
melee_practice	melee.cpp	/^void melee_practice(player &u, bool hit, bool unarmed, bool bashing,$/;"	f
melee_sides	mtype.h	/^ unsigned char melee_sides;	\/\/ Number of sides those dice have$/;"	m	struct:mtype
melee_skill	mtype.h	/^ unsigned char melee_skill;	\/\/ Melee skill; should be 0 to 5$/;"	m	struct:mtype
melee_special_effects	melee.cpp	/^void player::melee_special_effects(game *g, monster *z, player *p, bool crit,$/;"	f	class:player
melee_value	item.cpp	/^int item::melee_value(int skills[num_skill_types])$/;"	f	class:item
melee_verb	melee.cpp	/^std::string melee_verb(technique_id tech, std::string your, player &p,$/;"	f
melt	mondeath.cpp	/^void mdeath::melt(game *g, monster *z)$/;"	f	class:mdeath
menu	output.cpp	/^int menu(const char *mes, ...)$/;"	f
menu_vec	output.cpp	/^int menu_vec(const char *mes, std::vector<std::string> options)$/;"	f
mercenaries	gamemode.h	/^ bool mercenaries;	\/\/ Do caravans offer the option of hiring a mercenary?$/;"	m	struct:defense_game
message	game.h	/^ std::string message;$/;"	m	struct:game_message
message	overmap.h	/^ std::string message;$/;"	m	struct:radio_tower
messages	game.h	/^  std::vector <game_message> messages;   \/\/ Messages to be printed$/;"	m	class:game
meth	iuse.cpp	/^void iuse::meth(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
method_of_attack	npcmove.cpp	/^npc_action npc::method_of_attack(game *g, int target, int danger)$/;"	f	class:npc
method_of_fleeing	npcmove.cpp	/^npc_action npc::method_of_fleeing(game *g, int enemy)$/;"	f	class:npc
mfb	faction.h	11;"	d
mfb	item.cpp	12;"	d	file:
mfb	itype.h	18;"	d
mfb	iuse.cpp	15;"	d	file:
mfb	mapdata.h	32;"	d
mfb	mtype.h	119;"	d
mfb	veh_type.h	8;"	d
mi_alcohol	mapitems.h	/^ mi_alcohol,$/;"	e	enum:items_location
mi_allclothes	mapitems.h	/^ mi_shoes, mi_pants, mi_shirts, mi_jackets, mi_winter, mi_bags, mi_allclothes,$/;"	e	enum:items_location
mi_allguns	mapitems.h	/^ mi_ammo, mi_pistols, mi_shotguns, mi_rifles, mi_smg, mi_assault, mi_allguns,$/;"	e	enum:items_location
mi_allsporting	mapitems.h	/^ mi_sports, mi_camping, mi_allsporting,$/;"	e	enum:items_location
mi_ammo	mapitems.h	/^ mi_ammo, mi_pistols, mi_shotguns, mi_rifles, mi_smg, mi_assault, mi_allguns,$/;"	e	enum:items_location
mi_ant_egg	mapitems.h	/^ mi_ant_food, mi_ant_egg,$/;"	e	enum:items_location
mi_ant_food	mapitems.h	/^ mi_ant_food, mi_ant_egg,$/;"	e	enum:items_location
mi_art	mapitems.h	/^ mi_art, mi_pawn, mi_mil_surplus,$/;"	e	enum:items_location
mi_assault	mapitems.h	/^ mi_ammo, mi_pistols, mi_shotguns, mi_rifles, mi_smg, mi_assault, mi_allguns,$/;"	e	enum:items_location
mi_bags	mapitems.h	/^ mi_shoes, mi_pants, mi_shirts, mi_jackets, mi_winter, mi_bags, mi_allclothes,$/;"	e	enum:items_location
mi_bedroom	mapitems.h	/^ mi_livingroom, mi_kitchen, mi_knifeblock, mi_fridge, mi_home_hw, mi_bedroom, mi_homeguns,$/;"	e	enum:items_location
mi_bees	mapitems.h	/^ mi_biollante, mi_bugs, mi_bees, mi_wasps, mi_robots, mi_eyebot,$/;"	e	enum:items_location
mi_behindcounter	mapitems.h	/^ mi_snacks, mi_fridgesnacks, mi_behindcounter, mi_magazines,$/;"	e	enum:items_location
mi_bigtools	mapitems.h	/^ mi_hardware, mi_tools, mi_bigtools, mi_mischw,$/;"	e	enum:items_location
mi_biollante	mapitems.h	/^ mi_biollante, mi_bugs, mi_bees, mi_wasps, mi_robots, mi_eyebot,$/;"	e	enum:items_location
mi_bionics	mapitems.h	/^ mi_hydro, mi_electronics, mi_monparts, mi_bionics, mi_bionics_common,$/;"	e	enum:items_location
mi_bionics_common	mapitems.h	/^ mi_hydro, mi_electronics, mi_monparts, mi_bionics, mi_bionics_common,$/;"	e	enum:items_location
mi_bionics_mil	mapitems.h	/^  mi_mil_food_nodrugs, mi_bionics_mil,$/;"	e	enum:items_location
mi_bots	mapitems.h	/^ mi_bots, mi_launchers, mi_mil_rifles, mi_grenades, mi_mil_armor, mi_mil_food,$/;"	e	enum:items_location
mi_bugs	mapitems.h	/^ mi_biollante, mi_bugs, mi_bees, mi_wasps, mi_robots, mi_eyebot,$/;"	e	enum:items_location
mi_camping	mapitems.h	/^ mi_sports, mi_camping, mi_allsporting,$/;"	e	enum:items_location
mi_cannedfood	mapitems.h	/^ mi_cannedfood, mi_pasta, mi_produce,$/;"	e	enum:items_location
mi_cavern	mapitems.h	/^ mi_cavern,$/;"	e	enum:items_location
mi_chemistry	mapitems.h	/^ mi_chemistry, mi_teleport, mi_goo, mi_cloning_vat, mi_dissection,$/;"	e	enum:items_location
mi_chickenbot	mapitems.h	/^ mi_tripod, mi_chickenbot, mi_tankbot, mi_turret,$/;"	e	enum:items_location
mi_child_items	mapitems.h	/^ mi_none, mi_child_items,$/;"	e	enum:items_location
mi_cleaning	mapitems.h	/^ mi_cleaning,$/;"	e	enum:items_location
mi_cloning_vat	mapitems.h	/^ mi_chemistry, mi_teleport, mi_goo, mi_cloning_vat, mi_dissection,$/;"	e	enum:items_location
mi_consumer_electronics	mapitems.h	/^ mi_consumer_electronics,$/;"	e	enum:items_location
mi_cop_evidence	mapitems.h	/^ mi_cop_weapons, mi_cop_evidence,$/;"	e	enum:items_location
mi_cop_weapons	mapitems.h	/^ mi_cop_weapons, mi_cop_evidence,$/;"	e	enum:items_location
mi_copbot	mapitems.h	/^ mi_manhack, mi_skitterbot, mi_secubot, mi_copbot, mi_molebot,$/;"	e	enum:items_location
mi_dining	mapitems.h	/^  mi_dresser, mi_dining,$/;"	e	enum:items_location
mi_dissection	mapitems.h	/^ mi_chemistry, mi_teleport, mi_goo, mi_cloning_vat, mi_dissection,$/;"	e	enum:items_location
mi_dresser	mapitems.h	/^  mi_dresser, mi_dining,$/;"	e	enum:items_location
mi_drugdealer	mapitems.h	/^ mi_stash_wood, mi_stash_drugs, mi_drugdealer, mi_wreckage,$/;"	e	enum:items_location
mi_electronics	mapitems.h	/^ mi_hydro, mi_electronics, mi_monparts, mi_bionics, mi_bionics_common,$/;"	e	enum:items_location
mi_eyebot	mapitems.h	/^ mi_biollante, mi_bugs, mi_bees, mi_wasps, mi_robots, mi_eyebot,$/;"	e	enum:items_location
mi_field	mapitems.h	/^ mi_field, mi_forest, mi_hive, mi_hive_center,$/;"	e	enum:items_location
mi_forest	mapitems.h	/^ mi_field, mi_forest, mi_hive, mi_hive_center,$/;"	e	enum:items_location
mi_fridge	mapitems.h	/^ mi_livingroom, mi_kitchen, mi_knifeblock, mi_fridge, mi_home_hw, mi_bedroom, mi_homeguns,$/;"	e	enum:items_location
mi_fridgesnacks	mapitems.h	/^ mi_snacks, mi_fridgesnacks, mi_behindcounter, mi_magazines,$/;"	e	enum:items_location
mi_goo	mapitems.h	/^ mi_chemistry, mi_teleport, mi_goo, mi_cloning_vat, mi_dissection,$/;"	e	enum:items_location
mi_grenades	mapitems.h	/^ mi_bots, mi_launchers, mi_mil_rifles, mi_grenades, mi_mil_armor, mi_mil_food,$/;"	e	enum:items_location
mi_gunxtras	mapitems.h	/^  mi_gunxtras,$/;"	e	enum:items_location
mi_harddrugs	mapitems.h	/^ mi_softdrugs, mi_harddrugs,$/;"	e	enum:items_location
mi_hardware	mapitems.h	/^ mi_hardware, mi_tools, mi_bigtools, mi_mischw,$/;"	e	enum:items_location
mi_helicopter	mapitems.h	/^ mi_helicopter, mi_military, mi_science, mi_rare, mi_stash_food, mi_stash_ammo,$/;"	e	enum:items_location
mi_hive	mapitems.h	/^ mi_field, mi_forest, mi_hive, mi_hive_center,$/;"	e	enum:items_location
mi_hive_center	mapitems.h	/^ mi_field, mi_forest, mi_hive, mi_hive_center,$/;"	e	enum:items_location
mi_home_hw	mapitems.h	/^ mi_livingroom, mi_kitchen, mi_knifeblock, mi_fridge, mi_home_hw, mi_bedroom, mi_homeguns,$/;"	e	enum:items_location
mi_homeguns	mapitems.h	/^ mi_livingroom, mi_kitchen, mi_knifeblock, mi_fridge, mi_home_hw, mi_bedroom, mi_homeguns,$/;"	e	enum:items_location
mi_hospital_lab	mapitems.h	/^ mi_hospital_lab, mi_hospital_samples, mi_surgery,$/;"	e	enum:items_location
mi_hospital_samples	mapitems.h	/^ mi_hospital_lab, mi_hospital_samples, mi_surgery,$/;"	e	enum:items_location
mi_hydro	mapitems.h	/^ mi_hydro, mi_electronics, mi_monparts, mi_bionics, mi_bionics_common,$/;"	e	enum:items_location
mi_jackets	mapitems.h	/^ mi_shoes, mi_pants, mi_shirts, mi_jackets, mi_winter, mi_bags, mi_allclothes,$/;"	e	enum:items_location
mi_kitchen	mapitems.h	/^ mi_livingroom, mi_kitchen, mi_knifeblock, mi_fridge, mi_home_hw, mi_bedroom, mi_homeguns,$/;"	e	enum:items_location
mi_knifeblock	mapitems.h	/^ mi_livingroom, mi_kitchen, mi_knifeblock, mi_fridge, mi_home_hw, mi_bedroom, mi_homeguns,$/;"	e	enum:items_location
mi_launchers	mapitems.h	/^ mi_bots, mi_launchers, mi_mil_rifles, mi_grenades, mi_mil_armor, mi_mil_food,$/;"	e	enum:items_location
mi_livingroom	mapitems.h	/^ mi_livingroom, mi_kitchen, mi_knifeblock, mi_fridge, mi_home_hw, mi_bedroom, mi_homeguns,$/;"	e	enum:items_location
mi_magazines	mapitems.h	/^ mi_snacks, mi_fridgesnacks, mi_behindcounter, mi_magazines,$/;"	e	enum:items_location
mi_manhack	mapitems.h	/^ mi_manhack, mi_skitterbot, mi_secubot, mi_copbot, mi_molebot,$/;"	e	enum:items_location
mi_manuals	mapitems.h	/^ mi_novels, mi_manuals, mi_textbooks,$/;"	e	enum:items_location
mi_mechanics	mapitems.h	/^ mi_shelter, mi_mechanics,$/;"	e	enum:items_location
mi_mil_armor	mapitems.h	/^ mi_bots, mi_launchers, mi_mil_rifles, mi_grenades, mi_mil_armor, mi_mil_food,$/;"	e	enum:items_location
mi_mil_food	mapitems.h	/^ mi_bots, mi_launchers, mi_mil_rifles, mi_grenades, mi_mil_armor, mi_mil_food,$/;"	e	enum:items_location
mi_mil_food_nodrugs	mapitems.h	/^  mi_mil_food_nodrugs, mi_bionics_mil,$/;"	e	enum:items_location
mi_mil_rifles	mapitems.h	/^ mi_bots, mi_launchers, mi_mil_rifles, mi_grenades, mi_mil_armor, mi_mil_food,$/;"	e	enum:items_location
mi_mil_surplus	mapitems.h	/^ mi_art, mi_pawn, mi_mil_surplus,$/;"	e	enum:items_location
mi_military	mapitems.h	/^ mi_helicopter, mi_military, mi_science, mi_rare, mi_stash_food, mi_stash_ammo,$/;"	e	enum:items_location
mi_mine_equipment	mapitems.h	/^ mi_mine_storage, mi_mine_equipment,$/;"	e	enum:items_location
mi_mine_storage	mapitems.h	/^ mi_mine_storage, mi_mine_equipment,$/;"	e	enum:items_location
mi_mischw	mapitems.h	/^ mi_hardware, mi_tools, mi_bigtools, mi_mischw,$/;"	e	enum:items_location
mi_molebot	mapitems.h	/^ mi_manhack, mi_skitterbot, mi_secubot, mi_copbot, mi_molebot,$/;"	e	enum:items_location
mi_monparts	mapitems.h	/^ mi_hydro, mi_electronics, mi_monparts, mi_bionics, mi_bionics_common,$/;"	e	enum:items_location
mi_none	mapitems.h	/^ mi_none, mi_child_items,$/;"	e	enum:items_location
mi_novels	mapitems.h	/^ mi_novels, mi_manuals, mi_textbooks,$/;"	e	enum:items_location
mi_npc_hacker	mapitems.h	/^ mi_npc_hacker,$/;"	e	enum:items_location
mi_office	mapitems.h	/^ mi_office, mi_vault,$/;"	e	enum:items_location
mi_pants	mapitems.h	/^ mi_shoes, mi_pants, mi_shirts, mi_jackets, mi_winter, mi_bags, mi_allclothes,$/;"	e	enum:items_location
mi_pasta	mapitems.h	/^ mi_cannedfood, mi_pasta, mi_produce,$/;"	e	enum:items_location
mi_pawn	mapitems.h	/^ mi_art, mi_pawn, mi_mil_surplus,$/;"	e	enum:items_location
mi_pistols	mapitems.h	/^ mi_ammo, mi_pistols, mi_shotguns, mi_rifles, mi_smg, mi_assault, mi_allguns,$/;"	e	enum:items_location
mi_pool_table	mapitems.h	/^ mi_pool_table,$/;"	e	enum:items_location
mi_produce	mapitems.h	/^ mi_cannedfood, mi_pasta, mi_produce,$/;"	e	enum:items_location
mi_radio	mapitems.h	/^ mi_radio,$/;"	e	enum:items_location
mi_rare	mapitems.h	/^ mi_helicopter, mi_military, mi_science, mi_rare, mi_stash_food, mi_stash_ammo,$/;"	e	enum:items_location
mi_rifles	mapitems.h	/^ mi_ammo, mi_pistols, mi_shotguns, mi_rifles, mi_smg, mi_assault, mi_allguns,$/;"	e	enum:items_location
mi_road	mapitems.h	/^ mi_road,$/;"	e	enum:items_location
mi_robots	mapitems.h	/^ mi_biollante, mi_bugs, mi_bees, mi_wasps, mi_robots, mi_eyebot,$/;"	e	enum:items_location
mi_science	mapitems.h	/^ mi_helicopter, mi_military, mi_science, mi_rare, mi_stash_food, mi_stash_ammo,$/;"	e	enum:items_location
mi_secubot	mapitems.h	/^ mi_manhack, mi_skitterbot, mi_secubot, mi_copbot, mi_molebot,$/;"	e	enum:items_location
mi_sewage_plant	mapitems.h	/^ mi_sewage_plant,$/;"	e	enum:items_location
mi_sewer	mapitems.h	/^ mi_subway, mi_sewer,$/;"	e	enum:items_location
mi_shelter	mapitems.h	/^ mi_shelter, mi_mechanics,$/;"	e	enum:items_location
mi_shirts	mapitems.h	/^ mi_shoes, mi_pants, mi_shirts, mi_jackets, mi_winter, mi_bags, mi_allclothes,$/;"	e	enum:items_location
mi_shoes	mapitems.h	/^ mi_shoes, mi_pants, mi_shirts, mi_jackets, mi_winter, mi_bags, mi_allclothes,$/;"	e	enum:items_location
mi_shotguns	mapitems.h	/^ mi_ammo, mi_pistols, mi_shotguns, mi_rifles, mi_smg, mi_assault, mi_allguns,$/;"	e	enum:items_location
mi_skitterbot	mapitems.h	/^ mi_manhack, mi_skitterbot, mi_secubot, mi_copbot, mi_molebot,$/;"	e	enum:items_location
mi_smg	mapitems.h	/^ mi_ammo, mi_pistols, mi_shotguns, mi_rifles, mi_smg, mi_assault, mi_allguns,$/;"	e	enum:items_location
mi_snacks	mapitems.h	/^ mi_snacks, mi_fridgesnacks, mi_behindcounter, mi_magazines,$/;"	e	enum:items_location
mi_softdrugs	mapitems.h	/^ mi_softdrugs, mi_harddrugs,$/;"	e	enum:items_location
mi_spider	mapitems.h	/^ mi_spider,$/;"	e	enum:items_location
mi_spiral	mapitems.h	/^ mi_spiral,$/;"	e	enum:items_location
mi_sports	mapitems.h	/^ mi_sports, mi_camping, mi_allsporting,$/;"	e	enum:items_location
mi_stash_ammo	mapitems.h	/^ mi_helicopter, mi_military, mi_science, mi_rare, mi_stash_food, mi_stash_ammo,$/;"	e	enum:items_location
mi_stash_drugs	mapitems.h	/^ mi_stash_wood, mi_stash_drugs, mi_drugdealer, mi_wreckage,$/;"	e	enum:items_location
mi_stash_food	mapitems.h	/^ mi_helicopter, mi_military, mi_science, mi_rare, mi_stash_food, mi_stash_ammo,$/;"	e	enum:items_location
mi_stash_wood	mapitems.h	/^ mi_stash_wood, mi_stash_drugs, mi_drugdealer, mi_wreckage,$/;"	e	enum:items_location
mi_subway	mapitems.h	/^ mi_subway, mi_sewer,$/;"	e	enum:items_location
mi_surgery	mapitems.h	/^ mi_hospital_lab, mi_hospital_samples, mi_surgery,$/;"	e	enum:items_location
mi_survival_armor	mapitems.h	/^ mi_weapons, mi_survival_armor, mi_survival_tools,$/;"	e	enum:items_location
mi_survival_tools	mapitems.h	/^ mi_weapons, mi_survival_armor, mi_survival_tools,$/;"	e	enum:items_location
mi_tankbot	mapitems.h	/^ mi_tripod, mi_chickenbot, mi_tankbot, mi_turret,$/;"	e	enum:items_location
mi_teleport	mapitems.h	/^ mi_chemistry, mi_teleport, mi_goo, mi_cloning_vat, mi_dissection,$/;"	e	enum:items_location
mi_textbooks	mapitems.h	/^ mi_novels, mi_manuals, mi_textbooks,$/;"	e	enum:items_location
mi_tools	mapitems.h	/^ mi_hardware, mi_tools, mi_bigtools, mi_mischw,$/;"	e	enum:items_location
mi_toxic_dump_equipment	mapitems.h	/^ mi_toxic_dump_equipment,$/;"	e	enum:items_location
mi_trader_avoid	mapitems.h	/^ mi_trader_avoid,$/;"	e	enum:items_location
mi_trash	mapitems.h	/^ mi_trash,$/;"	e	enum:items_location
mi_tripod	mapitems.h	/^ mi_tripod, mi_chickenbot, mi_tankbot, mi_turret,$/;"	e	enum:items_location
mi_turret	mapitems.h	/^ mi_tripod, mi_chickenbot, mi_tankbot, mi_turret,$/;"	e	enum:items_location
mi_vault	mapitems.h	/^ mi_office, mi_vault,$/;"	e	enum:items_location
mi_wasps	mapitems.h	/^ mi_biollante, mi_bugs, mi_bees, mi_wasps, mi_robots, mi_eyebot,$/;"	e	enum:items_location
mi_weapons	mapitems.h	/^ mi_weapons, mi_survival_armor, mi_survival_tools,$/;"	e	enum:items_location
mi_winter	mapitems.h	/^ mi_shoes, mi_pants, mi_shirts, mi_jackets, mi_winter, mi_bags, mi_allclothes,$/;"	e	enum:items_location
mi_wreckage	mapitems.h	/^ mi_stash_wood, mi_stash_drugs, mi_drugdealer, mi_wreckage,$/;"	e	enum:items_location
min_appearances	omdata.h	/^ int min_appearances;	\/\/ Min number in an overmap$/;"	m	struct:overmap_special
min_bigness	itype.h	/^ unsigned int min_bigness; \/\/CC's$/;"	m	struct:it_var_veh_part
min_dist_from_city	omdata.h	/^ int min_dist_from_city;\/\/ Min distance from city limits$/;"	m	struct:overmap_special
minimum_item_value	npc.cpp	/^int npc::minimum_item_value()$/;"	f	class:npc
mininuke	iuse.cpp	/^void iuse::mininuke(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
mininuke_act	iuse.cpp	/^void iuse::mininuke_act(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
mintime	weather.h	/^ int mintime, maxtime; \/\/ min\/max time it lasts, in minutes$/;"	m	struct:weather_datum
minute	calendar.h	/^  int minute;$/;"	m	class:calendar
minutes_past_midnight	calendar.cpp	/^int calendar::minutes_past_midnight() const$/;"	f	class:calendar
minutes_to_u	npc.cpp	/^int npc::minutes_to_u(game *g)$/;"	f	class:npc
miss	dialogue.h	/^ mission_id miss;	\/\/ If it generates a new mission$/;"	m	struct:talk_response
mission	mission.h	/^ mission()$/;"	f	struct:mission
mission	mission.h	/^struct mission {$/;"	s
mission	npc.h	/^ npc_mission mission;$/;"	m	class:npc
mission_complete	game.cpp	/^bool game::mission_complete(int id, int npc_id)$/;"	f	class:game
mission_dialogue	mission.cpp	/^std::string mission_dialogue (mission_id id, talk_topic state)$/;"	f
mission_end	mission.h	/^struct mission_end {	\/\/ These functions are run when a mission ends$/;"	s
mission_fail	mission.h	/^struct mission_fail {$/;"	s
mission_failed	game.cpp	/^bool game::mission_failed(int id)$/;"	f	class:game
mission_failure	npctalk.cpp	/^void talk_function::mission_failure(game *g, npc *p)$/;"	f	class:talk_function
mission_goal	mission.h	/^enum mission_goal {$/;"	g
mission_id	computer.h	/^ int mission_id; \/\/ Linked to a mission?$/;"	m	class:computer
mission_id	item.h	/^ int mission_id;\/\/ Refers to a mission in game's master list$/;"	m	class:item
mission_id	mapdata.h	/^ int mission_id;$/;"	m	struct:spawn_point
mission_id	mission.h	/^enum mission_id {$/;"	g
mission_id	monster.h	/^ int mission_id; \/\/ If we're related to a mission$/;"	m	class:monster
mission_index	dialogue.h	/^ int mission_index;$/;"	m	struct:talk_response
mission_origin	mission.h	/^enum mission_origin {$/;"	g
mission_place	mission.h	/^struct mission_place {	\/\/ Return true if [posx,posy] is valid in overmap$/;"	s
mission_reward	npctalk.cpp	/^void talk_function::mission_reward(game *g, npc *p)$/;"	f	class:talk_function
mission_selected	npc.h	/^ int mission_selected;$/;"	m	struct:npc_chatbin
mission_start	mission.h	/^struct mission_start {$/;"	s
mission_step_complete	game.cpp	/^void game::mission_step_complete(int id, int step)$/;"	f	class:game
mission_success	npctalk.cpp	/^void talk_function::mission_success(game *g, npc *p)$/;"	f	class:talk_function
mission_type	mission.h	/^ mission_type(int ID, std::string NAME, mission_goal GOAL, int DIF, int VAL,$/;"	f	struct:mission_type
mission_type	mission.h	/^struct mission_type {$/;"	s
mission_types	game.h	/^  std::vector <mission_type> mission_types; \/\/ The list of mission templates$/;"	m	class:game
missions	npc.h	/^ std::vector<int> missions;$/;"	m	struct:npc_chatbin
missions_assigned	npc.h	/^ std::vector<int> missions_assigned;$/;"	m	struct:npc_chatbin
mode	item.h	/^ int mode;              \/\/ Mode of operation, can be changed by the player.$/;"	m	class:item
molotov	iuse.cpp	/^void iuse::molotov(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
molotov_lit	iuse.cpp	/^void iuse::molotov_lit(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
mon	game.h	/^ monster mon;$/;"	m	struct:monster_and_count
mon	mtypedef.cpp	22;"	d	file:
monGroupFilePath	mongroupdef.cpp	/^const char *monGroupFilePath = "data\/raw\/monstergroups.json";$/;"	v
monStr2monId	mongroupdef.cpp	/^std::map<std::string, mon_id> monStr2monId;$/;"	v
mon_amigara_horror	mtype.h	/^mon_dark_wyrm, mon_amigara_horror, mon_dog_thing, mon_headless_dog_thing,$/;"	e	enum:mon_id
mon_ant	mtype.h	/^mon_ant_larva, mon_ant, mon_ant_soldier, mon_ant_queen, mon_ant_fungus,$/;"	e	enum:mon_id
mon_ant_fungus	mtype.h	/^mon_ant_larva, mon_ant, mon_ant_soldier, mon_ant_queen, mon_ant_fungus,$/;"	e	enum:mon_id
mon_ant_larva	mtype.h	/^mon_ant_larva, mon_ant, mon_ant_soldier, mon_ant_queen, mon_ant_fungus,$/;"	e	enum:mon_id
mon_ant_queen	mtype.h	/^mon_ant_larva, mon_ant, mon_ant_soldier, mon_ant_queen, mon_ant_fungus,$/;"	e	enum:mon_id
mon_ant_soldier	mtype.h	/^mon_ant_larva, mon_ant, mon_ant_soldier, mon_ant_queen, mon_ant_fungus,$/;"	e	enum:mon_id
mon_at	game.cpp	/^int game::mon_at(int x, int y)$/;"	f	class:game
mon_bear	mtype.h	/^mon_squirrel, mon_rabbit, mon_deer, mon_wolf, mon_bear, mon_cougar, mon_crow,$/;"	e	enum:mon_id
mon_bee	mtype.h	/^mon_fly, mon_bee, mon_wasp,$/;"	e	enum:mon_id
mon_beekeeper	mtype.h	/^ mon_zombie_master,  mon_beekeeper, mon_zombie_child,$/;"	e	enum:mon_id
mon_biollante	mtype.h	/^ mon_creeper_vine, mon_biollante, mon_vinebeast, mon_triffid_heart,$/;"	e	enum:mon_id
mon_blank	mtype.h	/^ mon_flaming_eye, mon_kreck, mon_gracke, mon_blank, mon_gozu, mon_shadow, mon_breather_hub,$/;"	e	enum:mon_id
mon_blob	mtype.h	/^mon_blob, mon_blob_small,$/;"	e	enum:mon_id
mon_blob_small	mtype.h	/^mon_blob, mon_blob_small,$/;"	e	enum:mon_id
mon_boomer	mtype.h	/^ mon_boomer, mon_boomer_fungus, mon_skeleton, mon_zombie_necro,$/;"	e	enum:mon_id
mon_boomer_fungus	mtype.h	/^ mon_boomer, mon_boomer_fungus, mon_skeleton, mon_zombie_necro,$/;"	e	enum:mon_id
mon_breather	mtype.h	/^ mon_breather, mon_shadow_snake,$/;"	e	enum:mon_id
mon_breather_hub	mtype.h	/^ mon_flaming_eye, mon_kreck, mon_gracke, mon_blank, mon_gozu, mon_shadow, mon_breather_hub,$/;"	e	enum:mon_id
mon_cat	mtype.h	/^mon_dog, mon_cat,$/;"	e	enum:mon_id
mon_centipede	mtype.h	/^mon_mosquito, mon_dragonfly, mon_centipede, mon_frog, mon_slug,$/;"	e	enum:mon_id
mon_chickenbot	mtype.h	/^ mon_tripod, mon_chickenbot, mon_tankbot, mon_turret, mon_exploder,$/;"	e	enum:mon_id
mon_chud	mtype.h	/^mon_chud, mon_one_eye, mon_crawler,$/;"	e	enum:mon_id
mon_copbot	mtype.h	/^mon_eyebot, mon_manhack, mon_skitterbot, mon_secubot, mon_copbot, mon_molebot,$/;"	e	enum:mon_id
mon_cougar	mtype.h	/^mon_squirrel, mon_rabbit, mon_deer, mon_wolf, mon_bear, mon_cougar, mon_crow,$/;"	e	enum:mon_id
mon_crawler	mtype.h	/^mon_chud, mon_one_eye, mon_crawler,$/;"	e	enum:mon_id
mon_creeper_hub	mtype.h	/^mon_triffid, mon_triffid_young, mon_triffid_queen, mon_creeper_hub,$/;"	e	enum:mon_id
mon_creeper_vine	mtype.h	/^ mon_creeper_vine, mon_biollante, mon_vinebeast, mon_triffid_heart,$/;"	e	enum:mon_id
mon_crow	mtype.h	/^mon_squirrel, mon_rabbit, mon_deer, mon_wolf, mon_bear, mon_cougar, mon_crow,$/;"	e	enum:mon_id
mon_dark_wyrm	mtype.h	/^mon_dark_wyrm, mon_amigara_horror, mon_dog_thing, mon_headless_dog_thing,$/;"	e	enum:mon_id
mon_deer	mtype.h	/^mon_squirrel, mon_rabbit, mon_deer, mon_wolf, mon_bear, mon_cougar, mon_crow,$/;"	e	enum:mon_id
mon_dermatik	mtype.h	/^ mon_dermatik_larva, mon_dermatik,$/;"	e	enum:mon_id
mon_dermatik_larva	mtype.h	/^ mon_dermatik_larva, mon_dermatik,$/;"	e	enum:mon_id
mon_dog	mtype.h	/^mon_dog, mon_cat,$/;"	e	enum:mon_id
mon_dog_thing	mtype.h	/^mon_dark_wyrm, mon_amigara_horror, mon_dog_thing, mon_headless_dog_thing,$/;"	e	enum:mon_id
mon_dragonfly	mtype.h	/^mon_mosquito, mon_dragonfly, mon_centipede, mon_frog, mon_slug,$/;"	e	enum:mon_id
mon_exploder	mtype.h	/^ mon_tripod, mon_chickenbot, mon_tankbot, mon_turret, mon_exploder,$/;"	e	enum:mon_id
mon_eyebot	mtype.h	/^mon_eyebot, mon_manhack, mon_skitterbot, mon_secubot, mon_copbot, mon_molebot,$/;"	e	enum:mon_id
mon_flaming_eye	mtype.h	/^ mon_flaming_eye, mon_kreck, mon_gracke, mon_blank, mon_gozu, mon_shadow, mon_breather_hub,$/;"	e	enum:mon_id
mon_fly	mtype.h	/^mon_fly, mon_bee, mon_wasp,$/;"	e	enum:mon_id
mon_flying_polyp	mtype.h	/^mon_flying_polyp, mon_hunting_horror, mon_mi_go, mon_yugg, mon_gelatin,$/;"	e	enum:mon_id
mon_frog	mtype.h	/^mon_mosquito, mon_dragonfly, mon_centipede, mon_frog, mon_slug,$/;"	e	enum:mon_id
mon_fungal_wall	mtype.h	/^ mon_fungaloid_queen, mon_fungal_wall,$/;"	e	enum:mon_id
mon_fungaloid	mtype.h	/^mon_fungaloid, mon_fungaloid_dormant, mon_fungaloid_young, mon_spore,$/;"	e	enum:mon_id
mon_fungaloid_dormant	mtype.h	/^mon_fungaloid, mon_fungaloid_dormant, mon_fungaloid_young, mon_spore,$/;"	e	enum:mon_id
mon_fungaloid_queen	mtype.h	/^ mon_fungaloid_queen, mon_fungal_wall,$/;"	e	enum:mon_id
mon_fungaloid_young	mtype.h	/^mon_fungaloid, mon_fungaloid_dormant, mon_fungaloid_young, mon_spore,$/;"	e	enum:mon_id
mon_gelatin	mtype.h	/^mon_flying_polyp, mon_hunting_horror, mon_mi_go, mon_yugg, mon_gelatin,$/;"	e	enum:mon_id
mon_generator	mtype.h	/^mon_generator,$/;"	e	enum:mon_id
mon_gozu	mtype.h	/^ mon_flaming_eye, mon_kreck, mon_gracke, mon_blank, mon_gozu, mon_shadow, mon_breather_hub,$/;"	e	enum:mon_id
mon_graboid	mtype.h	/^mon_graboid, mon_worm, mon_halfworm,$/;"	e	enum:mon_id
mon_gracke	mtype.h	/^ mon_flaming_eye, mon_kreck, mon_gracke, mon_blank, mon_gozu, mon_shadow, mon_breather_hub,$/;"	e	enum:mon_id
mon_halfworm	mtype.h	/^mon_graboid, mon_worm, mon_halfworm,$/;"	e	enum:mon_id
mon_hallu_ant	mtype.h	/^mon_hallu_zom, mon_hallu_bee, mon_hallu_ant, mon_hallu_mom,$/;"	e	enum:mon_id
mon_hallu_bee	mtype.h	/^mon_hallu_zom, mon_hallu_bee, mon_hallu_ant, mon_hallu_mom,$/;"	e	enum:mon_id
mon_hallu_mom	mtype.h	/^mon_hallu_zom, mon_hallu_bee, mon_hallu_ant, mon_hallu_mom,$/;"	e	enum:mon_id
mon_hallu_zom	mtype.h	/^mon_hallu_zom, mon_hallu_bee, mon_hallu_ant, mon_hallu_mom,$/;"	e	enum:mon_id
mon_headless_dog_thing	mtype.h	/^mon_dark_wyrm, mon_amigara_horror, mon_dog_thing, mon_headless_dog_thing,$/;"	e	enum:mon_id
mon_human_snail	mtype.h	/^mon_human_snail, mon_twisted_body, mon_vortex,$/;"	e	enum:mon_id
mon_hunting_horror	mtype.h	/^mon_flying_polyp, mon_hunting_horror, mon_mi_go, mon_yugg, mon_gelatin,$/;"	e	enum:mon_id
mon_id	mtype.h	/^enum mon_id {$/;"	g
mon_in_field	field.cpp	/^void map::mon_in_field(int x, int y, game *g, monster *z)$/;"	f	class:map
mon_info	game.cpp	/^void game::mon_info()$/;"	f	class:game
mon_kreck	mtype.h	/^ mon_flaming_eye, mon_kreck, mon_gracke, mon_blank, mon_gozu, mon_shadow, mon_breather_hub,$/;"	e	enum:mon_id
mon_manhack	mtype.h	/^mon_eyebot, mon_manhack, mon_skitterbot, mon_secubot, mon_copbot, mon_molebot,$/;"	e	enum:mon_id
mon_mi_go	mtype.h	/^mon_flying_polyp, mon_hunting_horror, mon_mi_go, mon_yugg, mon_gelatin,$/;"	e	enum:mon_id
mon_molebot	mtype.h	/^mon_eyebot, mon_manhack, mon_skitterbot, mon_secubot, mon_copbot, mon_molebot,$/;"	e	enum:mon_id
mon_mosquito	mtype.h	/^mon_mosquito, mon_dragonfly, mon_centipede, mon_frog, mon_slug,$/;"	e	enum:mon_id
mon_null	mtype.h	/^mon_null = 0,$/;"	e	enum:mon_id
mon_one_eye	mtype.h	/^mon_chud, mon_one_eye, mon_crawler,$/;"	e	enum:mon_id
mon_rabbit	mtype.h	/^mon_squirrel, mon_rabbit, mon_deer, mon_wolf, mon_bear, mon_cougar, mon_crow,$/;"	e	enum:mon_id
mon_rat_king	mtype.h	/^mon_sewer_fish, mon_sewer_snake, mon_sewer_rat, mon_rat_king,$/;"	e	enum:mon_id
mon_secubot	mtype.h	/^mon_eyebot, mon_manhack, mon_skitterbot, mon_secubot, mon_copbot, mon_molebot,$/;"	e	enum:mon_id
mon_sewer_fish	mtype.h	/^mon_sewer_fish, mon_sewer_snake, mon_sewer_rat, mon_rat_king,$/;"	e	enum:mon_id
mon_sewer_rat	mtype.h	/^mon_sewer_fish, mon_sewer_snake, mon_sewer_rat, mon_rat_king,$/;"	e	enum:mon_id
mon_sewer_snake	mtype.h	/^mon_sewer_fish, mon_sewer_snake, mon_sewer_rat, mon_rat_king,$/;"	e	enum:mon_id
mon_shadow	mtype.h	/^ mon_flaming_eye, mon_kreck, mon_gracke, mon_blank, mon_gozu, mon_shadow, mon_breather_hub,$/;"	e	enum:mon_id
mon_shadow_snake	mtype.h	/^ mon_breather, mon_shadow_snake,$/;"	e	enum:mon_id
mon_skeleton	mtype.h	/^ mon_boomer, mon_boomer_fungus, mon_skeleton, mon_zombie_necro,$/;"	e	enum:mon_id
mon_skitterbot	mtype.h	/^mon_eyebot, mon_manhack, mon_skitterbot, mon_secubot, mon_copbot, mon_molebot,$/;"	e	enum:mon_id
mon_slug	mtype.h	/^mon_mosquito, mon_dragonfly, mon_centipede, mon_frog, mon_slug,$/;"	e	enum:mon_id
mon_spider_jumping	mtype.h	/^mon_spider_wolf, mon_spider_web, mon_spider_jumping, mon_spider_trapdoor,$/;"	e	enum:mon_id
mon_spider_trapdoor	mtype.h	/^mon_spider_wolf, mon_spider_web, mon_spider_jumping, mon_spider_trapdoor,$/;"	e	enum:mon_id
mon_spider_web	mtype.h	/^mon_spider_wolf, mon_spider_web, mon_spider_jumping, mon_spider_trapdoor,$/;"	e	enum:mon_id
mon_spider_widow	mtype.h	/^ mon_spider_widow,$/;"	e	enum:mon_id
mon_spider_wolf	mtype.h	/^mon_spider_wolf, mon_spider_web, mon_spider_jumping, mon_spider_trapdoor,$/;"	e	enum:mon_id
mon_spore	mtype.h	/^mon_fungaloid, mon_fungaloid_dormant, mon_fungaloid_young, mon_spore,$/;"	e	enum:mon_id
mon_squirrel	mtype.h	/^mon_squirrel, mon_rabbit, mon_deer, mon_wolf, mon_bear, mon_cougar, mon_crow,$/;"	e	enum:mon_id
mon_tankbot	mtype.h	/^ mon_tripod, mon_chickenbot, mon_tankbot, mon_turret, mon_exploder,$/;"	e	enum:mon_id
mon_thing	mtype.h	/^ mon_thing,$/;"	e	enum:mon_id
mon_triffid	mtype.h	/^mon_triffid, mon_triffid_young, mon_triffid_queen, mon_creeper_hub,$/;"	e	enum:mon_id
mon_triffid_heart	mtype.h	/^ mon_creeper_vine, mon_biollante, mon_vinebeast, mon_triffid_heart,$/;"	e	enum:mon_id
mon_triffid_queen	mtype.h	/^mon_triffid, mon_triffid_young, mon_triffid_queen, mon_creeper_hub,$/;"	e	enum:mon_id
mon_triffid_young	mtype.h	/^mon_triffid, mon_triffid_young, mon_triffid_queen, mon_creeper_hub,$/;"	e	enum:mon_id
mon_tripod	mtype.h	/^ mon_tripod, mon_chickenbot, mon_tankbot, mon_turret, mon_exploder,$/;"	e	enum:mon_id
mon_turret	mtype.h	/^ mon_tripod, mon_chickenbot, mon_tankbot, mon_turret, mon_exploder,$/;"	e	enum:mon_id
mon_twisted_body	mtype.h	/^mon_human_snail, mon_twisted_body, mon_vortex,$/;"	e	enum:mon_id
mon_vinebeast	mtype.h	/^ mon_creeper_vine, mon_biollante, mon_vinebeast, mon_triffid_heart,$/;"	e	enum:mon_id
mon_vortex	mtype.h	/^mon_human_snail, mon_twisted_body, mon_vortex,$/;"	e	enum:mon_id
mon_wasp	mtype.h	/^mon_fly, mon_bee, mon_wasp,$/;"	e	enum:mon_id
mon_wolf	mtype.h	/^mon_squirrel, mon_rabbit, mon_deer, mon_wolf, mon_bear, mon_cougar, mon_crow,$/;"	e	enum:mon_id
mon_worm	mtype.h	/^mon_graboid, mon_worm, mon_halfworm,$/;"	e	enum:mon_id
mon_yugg	mtype.h	/^mon_flying_polyp, mon_hunting_horror, mon_mi_go, mon_yugg, mon_gelatin,$/;"	e	enum:mon_id
mon_zombie	mtype.h	/^ mon_zombie, mon_zombie_cop, mon_zombie_shrieker, mon_zombie_spitter, mon_zombie_electric,$/;"	e	enum:mon_id
mon_zombie_brute	mtype.h	/^ mon_zombie_fast, mon_zombie_brute, mon_zombie_hulk, mon_zombie_fungus,$/;"	e	enum:mon_id
mon_zombie_child	mtype.h	/^ mon_zombie_master,  mon_beekeeper, mon_zombie_child,$/;"	e	enum:mon_id
mon_zombie_cop	mtype.h	/^ mon_zombie, mon_zombie_cop, mon_zombie_shrieker, mon_zombie_spitter, mon_zombie_electric,$/;"	e	enum:mon_id
mon_zombie_electric	mtype.h	/^ mon_zombie, mon_zombie_cop, mon_zombie_shrieker, mon_zombie_spitter, mon_zombie_electric,$/;"	e	enum:mon_id
mon_zombie_fast	mtype.h	/^ mon_zombie_fast, mon_zombie_brute, mon_zombie_hulk, mon_zombie_fungus,$/;"	e	enum:mon_id
mon_zombie_fungus	mtype.h	/^ mon_zombie_fast, mon_zombie_brute, mon_zombie_hulk, mon_zombie_fungus,$/;"	e	enum:mon_id
mon_zombie_grabber	mtype.h	/^ mon_zombie_scientist, mon_zombie_soldier, mon_zombie_grabber,$/;"	e	enum:mon_id
mon_zombie_hulk	mtype.h	/^ mon_zombie_fast, mon_zombie_brute, mon_zombie_hulk, mon_zombie_fungus,$/;"	e	enum:mon_id
mon_zombie_master	mtype.h	/^ mon_zombie_master,  mon_beekeeper, mon_zombie_child,$/;"	e	enum:mon_id
mon_zombie_necro	mtype.h	/^ mon_boomer, mon_boomer_fungus, mon_skeleton, mon_zombie_necro,$/;"	e	enum:mon_id
mon_zombie_scientist	mtype.h	/^ mon_zombie_scientist, mon_zombie_soldier, mon_zombie_grabber,$/;"	e	enum:mon_id
mon_zombie_shrieker	mtype.h	/^ mon_zombie, mon_zombie_cop, mon_zombie_shrieker, mon_zombie_spitter, mon_zombie_electric,$/;"	e	enum:mon_id
mon_zombie_smoker	mtype.h	/^ mon_zombie_smoker,$/;"	e	enum:mon_id
mon_zombie_soldier	mtype.h	/^ mon_zombie_scientist, mon_zombie_soldier, mon_zombie_grabber,$/;"	e	enum:mon_id
mon_zombie_spitter	mtype.h	/^ mon_zombie, mon_zombie_cop, mon_zombie_shrieker, mon_zombie_spitter, mon_zombie_electric,$/;"	e	enum:mon_id
mondebug	game.cpp	/^void game::mondebug()$/;"	f	class:game
mongroup	mongroup.h	/^ mongroup(std::string ptype, int pposx, int pposy, int pposz, unsigned char prad,$/;"	f	struct:mongroup
mongroup	mongroup.h	/^struct mongroup {$/;"	s
monitems	game.h	/^  std::vector <items_location_and_chance> monitems[num_monsters];$/;"	m	class:game
monmove	game.cpp	/^void game::monmove()$/;"	f	class:game
monstairx	game.h	/^  int monstairx, monstairy, monstairz;$/;"	m	class:game
monstairy	game.h	/^  int monstairx, monstairy, monstairz;$/;"	m	class:game
monstairz	game.h	/^  int monstairx, monstairy, monstairz;$/;"	m	class:game
monster	monster.cpp	/^monster::monster()$/;"	f	class:monster
monster	monster.cpp	/^monster::monster(mtype *t)$/;"	f	class:monster
monster	monster.cpp	/^monster::monster(mtype *t, int x, int y)$/;"	f	class:monster
monster	monster.h	/^class monster {$/;"	c
monsterGroupMap	mongroup.h	/^        static std::map<std::string, MonsterGroup> monsterGroupMap;$/;"	m	class:MonsterGroupManager
monsterGroupMap	mongroupdef.cpp	/^std::map<std::string, MonsterGroup> MonsterGroupManager::monsterGroupMap;$/;"	m	class:MonsterGroupManager	file:
monster_and_count	game.h	/^ monster_and_count(monster M, int C) : mon (M), count (C) {};$/;"	f	struct:monster_and_count
monster_and_count	game.h	/^struct monster_and_count$/;"	s
monster_attitude	monster.h	/^enum monster_attitude {$/;"	g
monster_effect	monster.h	/^ monster_effect(monster_effect_type T, int D) : type (T), duration (D) {}$/;"	f	struct:monster_effect
monster_effect	monster.h	/^struct monster_effect$/;"	s
monster_effect_type	monster.h	/^enum monster_effect_type {$/;"	g
monster_pop_max	omdata.h	/^ int monster_pop_max;   \/\/ Maximum monster population$/;"	m	struct:overmap_special
monster_pop_min	omdata.h	/^ int monster_pop_min;   \/\/ Minimum monster population$/;"	m	struct:overmap_special
monster_rad_max	omdata.h	/^ int monster_rad_max;   \/\/ Maximum monster radius$/;"	m	struct:overmap_special
monster_rad_min	omdata.h	/^ int monster_rad_min;   \/\/ Minimum monster radius$/;"	m	struct:overmap_special
monster_species	mtype.h	/^enum monster_species {$/;"	g
monster_trigger	mtype.h	/^enum monster_trigger {$/;"	g
monster_wish	wish.cpp	/^void game::monster_wish()$/;"	f	class:game
monsters	mongroup.h	/^    FreqDef  monsters;$/;"	m	struct:MonsterGroup
monsters	omdata.h	/^ std::string monsters;    \/\/ Type of monsters that appear here$/;"	m	struct:overmap_special
monsters_at	overmap.cpp	/^std::vector<mongroup*> overmap::monsters_at(int x, int y, int z)$/;"	f	class:overmap
moon	calendar.cpp	/^moon_phase calendar::moon() const$/;"	f	class:calendar
moon_phase	calendar.h	/^enum moon_phase {$/;"	g
mop	iuse.cpp	/^void iuse::mop(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
mop_spills	map.cpp	/^void map::mop_spills(const int x, const int y) {$/;"	f	class:map
moppable_items_at	map.cpp	/^bool map::moppable_items_at(const int x, const int y)$/;"	f	class:map
morale	monster.h	/^ int anger, morale;$/;"	m	class:monster
morale	mtype.h	/^ int morale;	\/\/ Default morale level$/;"	m	struct:mtype
morale	player.h	/^ std::vector<morale_point> morale;$/;"	m	class:player
morale_data	moraledata.h	/^std::string morale_data[NUM_MORALE_TYPES] = {$/;"	v
morale_level	player.cpp	/^int player::morale_level()$/;"	f	class:player
morale_point	morale.h	/^ morale_point(morale_type T = MORALE_NULL, itype* I = NULL, int B = 0) :$/;"	f	struct:morale_point
morale_point	morale.h	/^struct morale_point$/;"	s
morale_type	morale.h	/^enum morale_type$/;"	g
mostly_vertical	tileray.cpp	/^bool tileray::mostly_vertical ()$/;"	f	class:tileray
mostseen	game.h	/^  int mostseen;	 \/\/ # of mons seen last turn; if this increases, run_mode++$/;"	m	class:game
mount_dx	vehicle.h	/^    int mount_dx;           \/\/ mount point on the forward\/backward axis$/;"	m	struct:vehicle_part
mount_dy	vehicle.h	/^    int mount_dy;           \/\/ mount point on the left\/right axis$/;"	m	struct:vehicle_part
move	catacurse.cpp	/^int move(int y, int x)$/;"	f
move	monmove.cpp	/^void monster::move(game *g)$/;"	f	class:monster
move	npcmove.cpp	/^void npc::move(game *g)$/;"	f	class:npc
move	vehicle.h	/^    tileray move;       \/\/ direction we are moving$/;"	m	class:vehicle
move_away_from	npcmove.cpp	/^void npc::move_away_from(game *g, int x, int y)$/;"	f	class:npc
move_cost	map.cpp	/^int map::move_cost(const int x, const int y)$/;"	f	class:map
move_cost_ter_only	map.cpp	/^int map::move_cost_ter_only(const int x, const int y)$/;"	f	class:map
move_cursor	veh_interact.cpp	/^void veh_interact::move_cursor (int dx, int dy)$/;"	f	class:veh_interact
move_pause	npcmove.cpp	/^void npc::move_pause()$/;"	f	class:npc
move_to	monmove.cpp	/^void monster::move_to(game *g, int x, int y)$/;"	f	class:monster
move_to	npcmove.cpp	/^void npc::move_to(game *g, int x, int y)$/;"	f	class:npc
move_to_next	npcmove.cpp	/^void npc::move_to_next(game *g)$/;"	f	class:npc
move_vec	vehicle.cpp	/^rl_vec2d vehicle::move_vec(){$/;"	f	class:vehicle
movecost	mapdata.h	/^ unsigned char movecost;$/;"	m	struct:ter_t
moves	itype.h	/^ std::vector<style_move> moves;$/;"	m	struct:it_style
moves	monster.h	/^ int moves, speed;$/;"	m	class:monster
moves	player.h	/^ int moves;$/;"	m	class:player
moves_left	pldata.h	/^ int moves_left;$/;"	m	struct:player_activity
moves_since_last_save	game.h	/^  int moves_since_last_save;$/;"	m	class:game
mp3	iuse.cpp	/^void iuse::mp3(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
mp3_on	iuse.cpp	/^void iuse::mp3_on(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
msg_buffer	game.cpp	/^void game::msg_buffer()$/;"	f	class:game
mtype	mtype.h	/^ mtype () {$/;"	f	struct:mtype
mtype	mtype.h	/^ mtype (int pid, std::string pname, monster_species pspecies, char psym,$/;"	f	struct:mtype
mtype	mtype.h	/^struct mtype {$/;"	s
mtypes	game.h	/^  std::vector <mtype*> mtypes;$/;"	m	class:game
mug_player	npcmove.cpp	/^void npc::mug_player(game *g, player &mark)$/;"	f	class:npc
multi_robot	monattack.cpp	/^void mattack::multi_robot(game *g, monster *z)$/;"	f	class:mattack
multidrop	inventory_ui.cpp	/^std::vector<item> game::multidrop()$/;"	f	class:game
mutagen	iuse.cpp	/^void iuse::mutagen(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
mutagen_3	iuse.cpp	/^void iuse::mutagen_3(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
mutate	mutation.cpp	/^void player::mutate(game *g)$/;"	f	class:player
mutate_towards	mutation.cpp	/^void player::mutate_towards(game *g, pl_flag mut)$/;"	f	class:player
mutation_attacks	melee.cpp	/^std::vector<special_attack> player::mutation_attacks(monster *z, player *p)$/;"	f	class:player
mutation_branch	mutation.h	/^ mutation_branch() { valid = false; };$/;"	f	struct:mutation_branch
mutation_branch	mutation.h	/^struct mutation_branch$/;"	s
mutation_category	mutation.h	/^enum mutation_category$/;"	g
mutation_category_level	player.h	/^ int mutation_category_level[NUM_MUTATION_CATEGORIES];$/;"	m	class:player
mutation_data	game.h	/^  mutation_branch mutation_data[PF_MAX2]; \/\/ Mutation data$/;"	m	class:game
mutation_effect	mutation.cpp	/^void mutation_effect(game *g, player &p, pl_flag mut)$/;"	f
mutation_loss_effect	mutation.cpp	/^void mutation_loss_effect(game *g, player &p, pl_flag mut)$/;"	f
mutation_wish	wish.cpp	/^void game::mutation_wish()$/;"	f	class:game
mutations_from_category	mutation_data.cpp	/^std::vector<pl_flag> mutations_from_category(mutation_category cat)$/;"	f
mvaddch	catacurse.cpp	/^int mvaddch(int y, int x, const chtype ch)$/;"	f
mvprintw	catacurse.cpp	/^int mvprintw(int y, int x, const char *fmt, ...)$/;"	f
mvprintz	output.cpp	/^void mvprintz(int y, int x, nc_color FG, const char *mes, ...)$/;"	f
mvputch	output.cpp	/^void mvputch(int y, int x, nc_color FG, long ch)$/;"	f
mvputch_hi	output.cpp	/^void mvputch_hi(int y, int x, nc_color FG, long ch)$/;"	f
mvputch_inv	output.cpp	/^void mvputch_inv(int y, int x, nc_color FG, long ch)$/;"	f
mvwaddch	catacurse.cpp	/^int mvwaddch(WINDOW *win, int y, int x, const chtype ch)$/;"	f
mvwprintw	catacurse.cpp	/^int mvwprintw(WINDOW *win, int y, int x, const char *fmt, ...)$/;"	f
mvwprintz	output.cpp	/^void mvwprintz(WINDOW* w, int y, int x, nc_color FG, const char *mes, ...)$/;"	f
mvwputch	output.cpp	/^void mvwputch(WINDOW *w, int y, int x, nc_color FG, long ch)$/;"	f
mvwputch_hi	output.cpp	/^void mvwputch_hi(WINDOW* w, int y, int x, nc_color FG, long ch)$/;"	f
mvwputch_inv	output.cpp	/^void mvwputch_inv(WINDOW* w, int y, int x, nc_color FG, long ch)$/;"	f
mx_anomaly	mapdata.h	/^ mx_anomaly,$/;"	e	enum:map_extra
mx_cougar	mapdata.h	/^ mx_cougar,$/;"	e	enum:map_extra
mx_crater	mapdata.h	/^ mx_crater,$/;"	e	enum:map_extra
mx_drugdeal	mapdata.h	/^ mx_drugdeal,$/;"	e	enum:map_extra
mx_fumarole	mapdata.h	/^ mx_fumarole,$/;"	e	enum:map_extra
mx_helicopter	mapdata.h	/^ mx_helicopter,$/;"	e	enum:map_extra
mx_military	mapdata.h	/^ mx_military,$/;"	e	enum:map_extra
mx_minefield	mapdata.h	/^ mx_minefield,$/;"	e	enum:map_extra
mx_null	mapdata.h	/^ mx_null = 0,$/;"	e	enum:map_extra
mx_portal	mapdata.h	/^ mx_portal,$/;"	e	enum:map_extra
mx_portal_in	mapdata.h	/^ mx_portal_in,$/;"	e	enum:map_extra
mx_puddle	mapdata.h	/^ mx_puddle,$/;"	e	enum:map_extra
mx_science	mapdata.h	/^ mx_science,$/;"	e	enum:map_extra
mx_stash	mapdata.h	/^ mx_stash,$/;"	e	enum:map_extra
mx_supplydrop	mapdata.h	/^ mx_supplydrop,$/;"	e	enum:map_extra
mx_wolfpack	mapdata.h	/^ mx_wolfpack,$/;"	e	enum:map_extra
my_MAPSIZE	map.h	/^ int my_MAPSIZE;$/;"	m	class:map
my_bionics	player.h	/^ std::vector<bionic> my_bionics;$/;"	m	class:player
my_fac	npc.h	/^ faction *my_fac;$/;"	m	class:npc
my_mutations	player.h	/^ bool my_mutations[PF_MAX2];$/;"	m	class:player
my_traits	player.h	/^ bool my_traits[PF_MAX2];$/;"	m	class:player
myclass	npc.h	/^ npc_class myclass; \/\/ What's our archetype?$/;"	m	class:npc
name	artifactdata.h	/^ std::string name;$/;"	m	struct:artifact_armor_form_datum
name	artifactdata.h	/^ std::string name;$/;"	m	struct:artifact_property_datum
name	artifactdata.h	/^ std::string name;$/;"	m	struct:artifact_shape_datum
name	artifactdata.h	/^ std::string name;$/;"	m	struct:artifact_tool_form_datum
name	basecamp.h	/^	std::string name;$/;"	m	class:basecamp
name	bionics.h	/^     std::string name;$/;"	m	class:bionic_data
name	computer.h	/^ std::string name; \/\/ "Jon's Computer", "Lab 6E77-B Terminal Omega"$/;"	m	class:computer
name	computer.h	/^ std::string name;$/;"	m	struct:computer_option
name	construction.h	/^ std::string name; \/\/ Name as displayed$/;"	m	struct:constructable
name	facdata.h	/^ std::string name;$/;"	m	struct:faction_value_datum
name	faction.h	/^ std::string name;$/;"	m	struct:faction
name	item.h	/^ std::string name;$/;"	m	class:item
name	itype.h	/^ std::string name;	\/\/ Proper name$/;"	m	struct:itype
name	itype.h	/^ std::string name;$/;"	m	struct:style_move
name	mapdata.h	/^ std::string name()$/;"	f	struct:field
name	mapdata.h	/^ std::string name;$/;"	m	struct:spawn_point
name	mapdata.h	/^ std::string name;$/;"	m	struct:ter_t
name	mapdata.h	/^ std::string name[3];$/;"	m	struct:field_t
name	mission.cpp	/^std::string mission::name()$/;"	f	class:mission
name	mission.h	/^ std::string name;	\/\/ The name the mission is given in menus$/;"	m	struct:mission_type
name	mongroup.h	/^    std::string name;$/;"	m	struct:MonsterGroup
name	monster.cpp	/^std::string monster::name()$/;"	f	class:monster
name	morale.h	/^ std::string name(std::string morale_data[])$/;"	f	struct:morale_point
name	mtype.h	/^ std::string name;$/;"	m	struct:mtype
name	omdata.h	/^ std::string name;$/;"	m	struct:oter_t
name	overmap.h	/^  std::string name;$/;"	m	class:overmap
name	player.h	/^ std::string name;$/;"	m	class:player
name	pldata.h	/^ std::string name;$/;"	m	struct:trait
name	skill.h	/^  std::string name() { return _name; }$/;"	f	class:Skill
name	trap.h	/^ std::string name;$/;"	m	struct:trap
name	veh_type.h	/^    const char *name;       \/\/ part name$/;"	m	struct:vpart_info
name	vehicle.h	/^    std::string name;   \/\/ vehicle name$/;"	m	class:vehicle
name	weather.h	/^ std::string name;$/;"	m	struct:weather_datum
nameFlags	name.h	/^} nameFlags;$/;"	t	typeref:enum:__anon5
nameIsFamilyName	name.h	/^  nameIsFamilyName = 8$/;"	e	enum:__anon5
nameIsFemaleName	name.h	/^  nameIsFemaleName = 2,$/;"	e	enum:__anon5
nameIsGivenName	name.h	/^  nameIsGivenName = 4,$/;"	e	enum:__anon5
nameIsMaleName	name.h	/^  nameIsMaleName = 1,$/;"	e	enum:__anon5
nameIsUnisexName	name.h	/^  nameIsUnisexName = 3,$/;"	e	enum:__anon5
name_with_armor	monster.cpp	/^std::string monster::name_with_armor()$/;"	f	class:monster
names	name.h	/^  std::vector<Name> names;$/;"	m	class:NameGenerator
nanosleep	posix_time.cpp	/^nanosleep (const struct timespec *requested_delay,$/;"	f
natural_light_level	game.cpp	/^float game::natural_light_level() const$/;"	f	class:game
nc_color	color.h	/^enum nc_color {$/;"	g
near_town	mission_place.cpp	/^bool mission_place::near_town(game *g, int posx, int posy)$/;"	f	class:mission_place
need_ammo	npc.h	/^ need_ammo, need_weapon, need_gun,$/;"	e	enum:npc_need
need_drink	npc.h	/^ need_food, need_drink,$/;"	e	enum:npc_need
need_food	npc.h	/^ need_food, need_drink,$/;"	e	enum:npc_need
need_gun	npc.h	/^ need_ammo, need_weapon, need_gun,$/;"	e	enum:npc_need
need_none	npc.h	/^ need_none,$/;"	e	enum:npc_need
need_repair	veh_interact.h	/^    std::vector<int> need_repair;$/;"	m	class:veh_interact
need_to_reload	npcmove.cpp	/^bool npc::need_to_reload()$/;"	f	class:npc
need_weapon	npc.h	/^ need_ammo, need_weapon, need_gun,$/;"	e	enum:npc_need
needs	npc.h	/^ std::vector<npc_need> needs;$/;"	m	class:npc
never	mission.h	/^ bool never		(game *g, int posx, int posy) { return false; }$/;"	f	struct:mission_place
never	omdata.h	/^ bool never      (overmap *om, tripoint p) { return false; }$/;"	f	struct:omspec_place
new_artifact	artifact.cpp	/^itype* game::new_artifact()$/;"	f	class:game
new_natural_artifact	artifact.cpp	/^itype* game::new_natural_artifact(artifact_natural_property prop)$/;"	f	class:game
newline	catacurse.cpp	/^inline int newline(WINDOW *win){$/;"	f
newtype	itype.h	/^ ammotype newtype;$/;"	m	struct:it_gunmod
newwin	catacurse.cpp	/^WINDOW *newwin(int nlines, int ncols, int begin_y, int begin_x)$/;"	f
next_faction_id	game.h	/^  int next_npc_id, next_faction_id, next_mission_id; \/\/ Keep track of UIDs$/;"	m	class:game
next_mission_id	game.h	/^  int next_npc_id, next_faction_id, next_mission_id; \/\/ Keep track of UIDs$/;"	m	class:game
next_mode	item.cpp	/^void item::next_mode()$/;"	f	class:item
next_npc_id	game.h	/^  int next_npc_id, next_faction_id, next_mission_id; \/\/ Keep track of UIDs$/;"	m	class:game
nextinv	game.h	/^  char nextinv;	\/\/ Determines which letter the next inv item will have$/;"	m	class:game
nextspawn	game.h	/^  calendar nextspawn; \/\/ The turn on which monsters will spawn next.$/;"	m	class:game
nextweather	game.h	/^  calendar nextweather; \/\/ The turn on which weather will shift next.$/;"	m	class:game
no_npc	game.h	/^  bool no_npc;$/;"	m	class:game
noecho	catacurse.cpp	/^int noecho(void)$/;"	f
noise	item.cpp	/^int item::noise()$/;"	f	class:item
noise	vehicle.cpp	/^int vehicle::noise (bool fueled, bool gas_only)$/;"	f	class:vehicle
noitem	mapdata.h	/^ noitem,       \/\/ Items "fall off" this space$/;"	e	enum:t_flag
none	iexamine.cpp	/^void iexamine::none	(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
none	iuse.h	/^  void none		(game *g, player *p, item *it, bool t) { };$/;"	f	class:iuse
none	monattack.h	/^  void none		(game *g, monster *z) { };$/;"	f	class:mattack
none	trap.h	/^ void none		(game *g, int x, int y) { };$/;"	f	struct:trapfunc
none	trap.h	/^ void none	(game *g, monster *z, int x, int y) { };$/;"	f	struct:trapfuncm
none	weather.h	/^ void none		(game *) {};$/;"	f	struct:weather_effect
norm	line.cpp	/^float rl_vec2d::norm(){$/;"	f	class:rl_vec2d
normal	mondeath.cpp	/^void mdeath::normal(game *g, monster *z)$/;"	f	class:mdeath
normalize	player.cpp	/^void player::normalize(game *g)$/;"	f	class:player
normalized	line.cpp	/^rl_vec2d rl_vec2d::normalized(){$/;"	f	class:rl_vec2d
note	overmap.cpp	/^std::string const& overmap::note(int const x, int const y, int const z) const$/;"	f	class:std::overmap
notes	overmap.h	/^ std::vector<om_note> notes;$/;"	m	struct:map_layer
nothing	dialogue.h	/^ void nothing			(game *g, npc *p) {};$/;"	f	struct:talk_function
npc	npc.cpp	/^npc::npc()$/;"	f	class:npc
npc	npc.cpp	/^npc::npc(const npc &rhs) { *this = rhs; }$/;"	f	class:npc
npc	npc.h	/^class npc : public player {$/;"	c
npc_action	npc.h	/^enum npc_action {$/;"	g
npc_action_name	npcmove.cpp	/^std::string npc_action_name(npc_action action)$/;"	f
npc_alt_attack	npc.h	/^ npc_flee, npc_melee, npc_shoot, npc_shoot_burst, npc_alt_attack, \/\/ 13 - 17$/;"	e	enum:npc_action
npc_at	game.cpp	/^int game::npc_at(int x, int y)$/;"	f	class:game
npc_attitude	npc.h	/^enum npc_attitude {$/;"	g
npc_attitude_name	npc.cpp	/^std::string npc_attitude_name(npc_attitude att)$/;"	f
npc_avoid_friendly_fire	npc.h	/^ npc_goto_destination, npc_avoid_friendly_fire, \/\/ 24, 25$/;"	e	enum:npc_action
npc_base_idle	npc.h	/^ npc_base_idle, \/\/ 26$/;"	e	enum:npc_action
npc_by_id	game.cpp	/^int game::npc_by_id(int id)$/;"	f	class:game
npc_chatbin	npc.h	/^ npc_chatbin()$/;"	f	struct:npc_chatbin
npc_chatbin	npc.h	/^struct npc_chatbin$/;"	s
npc_class	npc.h	/^enum npc_class {$/;"	g
npc_class_name	npc.cpp	/^std::string npc_class_name(npc_class classtype)$/;"	f
npc_combat_rules	npc.h	/^ npc_combat_rules()$/;"	f	struct:npc_combat_rules
npc_combat_rules	npc.h	/^struct npc_combat_rules$/;"	s
npc_drop_items	npc.h	/^  npc_heal, npc_use_painkiller, npc_eat, npc_drop_items, \/\/ 5 - 12$/;"	e	enum:npc_action
npc_eat	npc.h	/^  npc_heal, npc_use_painkiller, npc_eat, npc_drop_items, \/\/ 5 - 12$/;"	e	enum:npc_action
npc_escape_item	npc.h	/^ npc_escape_item, npc_wield_melee, npc_wield_loaded_gun, npc_wield_empty_gun,$/;"	e	enum:npc_action
npc_favor	npc.h	/^ npc_favor() {$/;"	f	struct:npc_favor
npc_favor	npc.h	/^struct npc_favor$/;"	s
npc_favor_type	npc.h	/^enum npc_favor_type {$/;"	g
npc_flag	npc.h	/^enum npc_flag {$/;"	g
npc_flee	npc.h	/^ npc_flee, npc_melee, npc_shoot, npc_shoot_burst, npc_alt_attack, \/\/ 13 - 17$/;"	e	enum:npc_action
npc_follow_embarked	npc.h	/^ npc_look_for_player, npc_heal_player, npc_follow_player, npc_follow_embarked,$/;"	e	enum:npc_action
npc_follow_player	npc.h	/^ npc_look_for_player, npc_heal_player, npc_follow_player, npc_follow_embarked,$/;"	e	enum:npc_action
npc_goto_destination	npc.h	/^ npc_goto_destination, npc_avoid_friendly_fire, \/\/ 24, 25$/;"	e	enum:npc_action
npc_heal	npc.h	/^  npc_heal, npc_use_painkiller, npc_eat, npc_drop_items, \/\/ 5 - 12$/;"	e	enum:npc_action
npc_heal_player	npc.h	/^ npc_look_for_player, npc_heal_player, npc_follow_player, npc_follow_embarked,$/;"	e	enum:npc_action
npc_id	mission.h	/^ int npc_id;		\/\/ ID of a related npc$/;"	m	struct:mission
npc_look_for_player	npc.h	/^ npc_look_for_player, npc_heal_player, npc_follow_player, npc_follow_embarked,$/;"	e	enum:npc_action
npc_melee	npc.h	/^ npc_flee, npc_melee, npc_shoot, npc_shoot_burst, npc_alt_attack, \/\/ 13 - 17$/;"	e	enum:npc_action
npc_mission	npc.h	/^enum npc_mission {$/;"	g
npc_mug_player	npc.h	/^ npc_talk_to_player, npc_mug_player, \/\/ 18 - 23$/;"	e	enum:npc_action
npc_need	npc.h	/^enum npc_need {$/;"	g
npc_opinion	npc.h	/^ npc_opinion() {$/;"	f	struct:npc_opinion
npc_opinion	npc.h	/^ npc_opinion(const npc_opinion &copy)$/;"	f	struct:npc_opinion
npc_opinion	npc.h	/^ npc_opinion(signed char T, signed char F, signed char V, signed char A, int O):$/;"	f	struct:npc_opinion
npc_opinion	npc.h	/^struct npc_opinion$/;"	s
npc_pause	npc.h	/^ npc_pause, \/\/1$/;"	e	enum:npc_action
npc_personality	npc.h	/^ npc_personality() {$/;"	f	struct:npc_personality
npc_personality	npc.h	/^struct npc_personality {$/;"	s
npc_pickup	npc.h	/^ npc_pickup, \/\/ 4$/;"	e	enum:npc_action
npc_reload	npc.h	/^ npc_reload, npc_sleep, \/\/ 2, 3$/;"	e	enum:npc_action
npc_shoot	npc.h	/^ npc_flee, npc_melee, npc_shoot, npc_shoot_burst, npc_alt_attack, \/\/ 13 - 17$/;"	e	enum:npc_action
npc_shoot_burst	npc.h	/^ npc_flee, npc_melee, npc_shoot, npc_shoot_burst, npc_alt_attack, \/\/ 13 - 17$/;"	e	enum:npc_action
npc_sleep	npc.h	/^ npc_reload, npc_sleep, \/\/ 2, 3$/;"	e	enum:npc_action
npc_talk_to_player	npc.h	/^ npc_talk_to_player, npc_mug_player, \/\/ 18 - 23$/;"	e	enum:npc_action
npc_undecided	npc.h	/^ npc_undecided = 0,$/;"	e	enum:npc_action
npc_use_painkiller	npc.h	/^  npc_heal, npc_use_painkiller, npc_eat, npc_drop_items, \/\/ 5 - 12$/;"	e	enum:npc_action
npc_wield_empty_gun	npc.h	/^ npc_escape_item, npc_wield_melee, npc_wield_loaded_gun, npc_wield_empty_gun,$/;"	e	enum:npc_action
npc_wield_loaded_gun	npc.h	/^ npc_escape_item, npc_wield_melee, npc_wield_loaded_gun, npc_wield_empty_gun,$/;"	e	enum:npc_action
npc_wield_melee	npc.h	/^ npc_escape_item, npc_wield_melee, npc_wield_loaded_gun, npc_wield_empty_gun,$/;"	e	enum:npc_action
npcs	overmap.h	/^  std::vector<npc> npcs;$/;"	m	class:overmap
nuke	game.cpp	/^void game::nuke(int x, int y)$/;"	f	class:game
nulfield	map.h	/^ field nulfield; \/\/ Returned when &field_at() is asked for an OOB value$/;"	m	class:map
nulitems	map.h	/^ std::vector<item> nulitems; \/\/ Returned when &i_at() is asked for an OOB value$/;"	m	class:map
null	picojson.h	/^  struct null {};$/;"	s	namespace:picojson
nullBuf	debug.cpp	/^static NullBuf nullBuf;$/;"	v	file:
nullBuf	debug.cpp	/^static std::ostream nullStream(&nullBuf);$/;"	v	file:
null_parse_context	picojson.h	/^    null_parse_context() {}$/;"	f	class:picojson::null_parse_context
null_parse_context	picojson.h	/^  class null_parse_context {$/;"	c	namespace:picojson
null_type	picojson.h	/^    null_type,$/;"	e	enum:picojson::__anon6
nullbool	overmap.h	/^  bool nullbool;$/;"	m	class:overmap
nullitem	inventory.h	/^  item nullitem;$/;"	m	class:inventory
nullitem	item.cpp	/^itype * item::nullitem()$/;"	f	class:item
nullitem_m	item.cpp	/^itype * item::nullitem_m = new itype();$/;"	m	class:item	file:
nullitem_m	item.h	/^ static itype * nullitem_m;$/;"	m	class:item
nullret	overmap.h	/^  oter_id nullret;$/;"	m	class:overmap
nullstack	inventory.h	/^  std::vector<item> nullstack;$/;"	m	class:inventory
nullstr	overmap.h	/^  std::string nullstr;$/;"	m	class:overmap
nulrad	map.h	/^ int nulrad;	\/\/ OOB &radiation()$/;"	m	class:map
nulscent	game.h	/^  int nulscent;				\/\/ Returned for OOB scent checks$/;"	m	class:game
nulter	map.h	/^ ter_id nulter;	\/\/ Returned when &ter() is asked for an OOB value$/;"	m	class:map
nultrap	map.h	/^ trap_id nultrap; \/\/ Returned when &tr_at() is asked for an OOB value$/;"	m	class:map
nulveh	map.h	/^ vehicle nulveh; \/\/ Returned when &veh_at() is asked for an OOB value$/;"	m	class:map
num	overmap.h	/^ int num;$/;"	m	struct:om_note
num	settlement.cpp	/^int settlement::num(oter_id ter)$/;"	f	class:settlement
num_bp	bodypart.h	/^ num_bp$/;"	e	enum:body_part
num_charges	item.cpp	/^int item::num_charges()$/;"	f	class:item
num_con_flags	itype.h	/^ num_con_flags$/;"	e	enum:container_flags
num_fields	mapdata.h	/^ num_fields$/;"	e	enum:field_id
num_fuel_types	vehicle.h	/^const int num_fuel_types = 5;$/;"	v
num_hp_parts	pldata.h	/^ num_hp_parts$/;"	e	enum:hp_part
num_items	inventory.cpp	/^int inventory::num_items() const$/;"	f	class:inventory
num_itloc	mapitems.h	/^ num_itloc$/;"	e	enum:items_location
num_map_extras	mapdata.h	/^ num_map_extras$/;"	e	enum:map_extra
num_monsters	mtype.h	/^num_monsters$/;"	e	enum:mon_id
num_needs	npc.h	/^ num_needs$/;"	e	enum:npc_need
num_npc_actions	npc.h	/^ num_npc_actions$/;"	e	enum:npc_action
num_skill_types	skill.h	/^ num_skill_types	\/\/ MUST be last!$/;"	e	enum:skill
num_species	mtype.h	/^num_species$/;"	e	enum:monster_species
num_t_flags	mapdata.h	/^ num_t_flags   \/\/ MUST be last$/;"	e	enum:t_flag
num_ter_types	omdata.h	/^ num_ter_types$/;"	e	enum:oter_id
num_terrain_types	mapdata.h	/^num_terrain_types$/;"	e	enum:ter_id
num_trap_types	trap.h	/^ num_trap_types$/;"	e	enum:trap_id
num_veh_coll_types	vehicle.h	/^ num_veh_coll_types$/;"	e	enum:veh_coll_type
num_vehicles	veh_type.h	/^    num_vehicles$/;"	e	enum:vhtype_id
num_vparts	veh_type.h	/^    num_vparts$/;"	e	enum:vpart_id
num_vpflags	veh_type.h	/^    num_vpflags$/;"	e	enum:vpart_flags
number_	picojson.h	/^      double number_;$/;"	m	union:picojson::value::__anon7
number_type	picojson.h	/^    number_type,$/;"	e	enum:picojson::__anon6
nutr	itype.h	/^    unsigned char nutr;	\/\/ Nutrition imparted$/;"	m	struct:it_comest
object	picojson.h	/^    typedef std::map<std::string, value> object;$/;"	t	class:picojson::value
object	picojson.h	/^  typedef value::object object;$/;"	t	namespace:picojson
object_	picojson.h	/^      object* object_;$/;"	m	union:picojson::value::__anon7
object_type	picojson.h	/^    object_type$/;"	e	enum:picojson::__anon6
obstruct	veh_interact.h	/^    bool obstruct;$/;"	m	class:veh_interact
of_turn	vehicle.h	/^    float of_turn;      \/\/ goes from ~1 to ~0 while proceeding every turn$/;"	m	class:vehicle
of_turn_carry	vehicle.h	/^    float of_turn_carry;\/\/ leftover from prev. turn$/;"	m	class:vehicle
ok	picojson.h	/^static void ok(bool b, const char* name = "")$/;"	f
om_diag	game.h	/^  overmap *om_hori, *om_vert, *om_diag; \/\/ Adjacent overmaps$/;"	m	class:game
om_hori	game.h	/^  overmap *om_hori, *om_vert, *om_diag; \/\/ Adjacent overmaps$/;"	m	class:game
om_location	game.cpp	/^point game::om_location()$/;"	f	class:game
om_note	overmap.h	/^ om_note(int X = -1, int Y = -1, int N = -1, std::string T = "") :$/;"	f	struct:om_note
om_note	overmap.h	/^struct om_note {$/;"	s
om_vert	game.h	/^  overmap *om_hori, *om_vert, *om_diag; \/\/ Adjacent overmaps$/;"	m	class:game
omspec_flag	omdata.h	/^enum omspec_flag {$/;"	g
omspec_id	omdata.h	/^enum omspec_id$/;"	g
omspec_place	omdata.h	/^struct omspec_place$/;"	s
omx	faction.h	/^ int omx, omy;	\/\/ Which overmap are we based in?$/;"	m	struct:faction
omx	npc.h	/^ int omx, omy, omz;	\/\/ Which overmap (e.g., o.0.0.0)$/;"	m	class:npc
omy	faction.h	/^ int omx, omy;	\/\/ Which overmap are we based in?$/;"	m	struct:faction
omy	npc.h	/^ int omx, omy, omz;	\/\/ Which overmap (e.g., o.0.0.0)$/;"	m	class:npc
omz	npc.h	/^ int omx, omy, omz;	\/\/ Which overmap (e.g., o.0.0.0)$/;"	m	class:npc
one_in	rng.cpp	/^bool one_in(int chance)$/;"	f
op_of_u	npc.h	/^ npc_opinion op_of_u;$/;"	m	class:npc
open	game.cpp	/^void game::open()$/;"	f	class:game
open	overmap.cpp	/^void overmap::open(game *g)$/;"	f	class:overmap
open	vehicle.h	/^        int open;           \/\/ door is open$/;"	m	union:vehicle_part::__anon9
open_door	map.cpp	/^bool map::open_door(const int x, const int y, const bool inside)$/;"	f	class:map
open_gate	game.cpp	/^void game::open_gate( game *g, const int examx, const int examy, const enum ter_id handle_type ) {$/;"	f	class:game
opening_screen	main_menu.cpp	/^bool game::opening_screen()$/;"	f	class:game
operator !=	picojson.h	/^  inline bool operator!=(const value& x, const value& y) {$/;"	f	namespace:picojson
operator !=	skill.h	/^  bool operator!=(const Skill& b) const { return !(*this == b); }$/;"	f	class:Skill
operator !=	skill.h	/^  bool operator!=(const SkillLevel& b) const { return !(*this == b); }$/;"	f	class:SkillLevel
operator !=	skill.h	/^  bool operator!=(const int& b) const { return !(*this == b); }$/;"	f	class:SkillLevel
operator ()	mapbuffer.h	/^ bool operator() (const tripoint &lhs, const tripoint &rhs) const$/;"	f	struct:pointcomp
operator *	line.cpp	/^rl_vec2d rl_vec2d::operator* (const float rhs){$/;"	f	class:rl_vec2d
operator +	calendar.cpp	/^calendar calendar::operator +(calendar &rhs)$/;"	f	class:calendar
operator +	calendar.cpp	/^calendar calendar::operator +(int rhs)$/;"	f	class:calendar
operator +	inventory.cpp	/^inventory inventory::operator+ (const inventory &rhs)$/;"	f	class:inventory
operator +	inventory.cpp	/^inventory inventory::operator+ (const item &rhs)$/;"	f	class:inventory
operator +	inventory.cpp	/^inventory inventory::operator+ (const std::vector<item> &rhs)$/;"	f	class:inventory
operator +	line.cpp	/^rl_vec2d rl_vec2d::operator+ (const rl_vec2d &rhs){$/;"	f	class:rl_vec2d
operator +	npc.h	/^ npc_opinion& operator+ (npc_opinion &rhs)$/;"	f	struct:npc_opinion
operator +=	calendar.cpp	/^calendar& calendar::operator +=(calendar &rhs)$/;"	f	class:calendar
operator +=	calendar.cpp	/^calendar& calendar::operator +=(int rhs)$/;"	f	class:calendar
operator +=	inventory.cpp	/^inventory& inventory::operator+= (const inventory &rhs)$/;"	f	class:inventory
operator +=	inventory.cpp	/^inventory& inventory::operator+= (const item &rhs)$/;"	f	class:inventory
operator +=	inventory.cpp	/^inventory& inventory::operator+= (const std::vector<item> &rhs)$/;"	f	class:inventory
operator +=	npc.h	/^ npc_opinion& operator+= (npc_opinion &rhs)$/;"	f	struct:npc_opinion
operator -	calendar.cpp	/^calendar calendar::operator -(calendar &rhs)$/;"	f	class:calendar
operator -	calendar.cpp	/^calendar calendar::operator -(int rhs)$/;"	f	class:calendar
operator -	line.cpp	/^rl_vec2d rl_vec2d::operator- (){$/;"	f	class:rl_vec2d
operator -	line.cpp	/^rl_vec2d rl_vec2d::operator- (const rl_vec2d &rhs){$/;"	f	class:rl_vec2d
operator -=	calendar.cpp	/^calendar& calendar::operator -=(calendar &rhs)$/;"	f	class:calendar
operator -=	calendar.cpp	/^calendar& calendar::operator -=(int rhs)$/;"	f	class:calendar
operator /	line.cpp	/^rl_vec2d rl_vec2d::operator\/ (const float rhs){$/;"	f	class:rl_vec2d
operator <	skill.h	/^  bool operator< (const Skill& b) const { return this->_ident <  b._ident; } \/\/ Only here for the benefit of std::map<Skill,T>$/;"	f	class:Skill
operator <	skill.h	/^  bool operator< (const SkillLevel& b) const { return this->_level <  b._level || (this->_level == b._level && this->_exercise < b._exercise); }$/;"	f	class:SkillLevel
operator <	skill.h	/^  bool operator< (const int& b) const { return this->_level <  b; }$/;"	f	class:SkillLevel
operator <<	debug.cpp	/^std::ostream & operator<<(std::ostream & out, DebugClass cl)$/;"	f
operator <<	debug.cpp	/^std::ostream & operator<<(std::ostream & out, DebugLevel lev)$/;"	f
operator <<	debug.h	/^	DebugLog& operator<<(T& t) {$/;"	f	struct:DebugLog
operator <<	debug.h	/^DebugVoid operator<< ( const DebugVoid & dv, const T & )$/;"	f
operator <<	debug.h	/^std::ostream & operator<<(std::ostream & out, const std::vector<C,A> & elm)$/;"	f
operator <<	item.cpp	/^std::ostream & operator<<(std::ostream & out, const item & it)$/;"	f
operator <<	item.cpp	/^std::ostream & operator<<(std::ostream & out, const item * it)$/;"	f
operator <<	mapdata.cpp	/^std::ostream & operator<<(std::ostream & out, const submap & sm)$/;"	f
operator <<	mapdata.cpp	/^std::ostream & operator<<(std::ostream & out, const submap * sm)$/;"	f
operator <<	picojson.h	/^inline std::ostream& operator<<(std::ostream& os, const picojson::value& x)$/;"	f
operator <<	settlement.cpp	/^std::ostream & operator<<(std::ostream & out, const settlement & s)$/;"	f
operator <<	skill.cpp	/^std::ostream& operator<<(std::ostream& os, const SkillLevel& obj) {$/;"	f
operator <=	skill.h	/^  bool operator<=(const SkillLevel& b) const { return !(*this >  b); }$/;"	f	class:SkillLevel
operator <=	skill.h	/^  bool operator<=(const int& b) const { return !(*this >  b); }$/;"	f	class:SkillLevel
operator =	calendar.cpp	/^calendar& calendar::operator =(calendar &rhs)$/;"	f	class:calendar
operator =	calendar.cpp	/^calendar& calendar::operator =(int rhs)$/;"	f	class:calendar
operator =	computer.cpp	/^computer& computer::operator=(const computer &rhs)$/;"	f	class:computer
operator =	graffiti.cpp	/^graffiti graffiti::operator=(graffiti rhs)$/;"	f	class:graffiti
operator =	inventory.cpp	/^inventory& inventory::operator= (const inventory &rhs)$/;"	f	class:inventory
operator =	inventory.cpp	/^inventory& inventory::operator= (inventory &rhs)$/;"	f	class:inventory
operator =	npc.cpp	/^npc& npc::operator= (const npc & rhs)$/;"	f	class:npc
operator =	overmap.cpp	/^overmap& overmap::operator=(overmap const& o)$/;"	f	class:overmap
operator =	picojson.h	/^  inline value& value::operator=(const value& x) {$/;"	f	class:picojson::value
operator =	player.cpp	/^player& player::operator= (const player & rhs)$/;"	f	class:player
operator ==	calendar.cpp	/^bool calendar::operator ==(calendar &rhs)$/;"	f	class:calendar
operator ==	calendar.cpp	/^bool calendar::operator ==(int rhs)$/;"	f	class:calendar
operator ==	picojson.h	/^  inline bool operator==(const value& x, const value& y) {$/;"	f	namespace:picojson
operator ==	skill.h	/^  bool operator==(const Skill& b) const { return this->_ident == b._ident; }$/;"	f	class:Skill
operator ==	skill.h	/^  bool operator==(const SkillLevel& b) const { return this->_level == b._level && this->_exercise == b._exercise; }$/;"	f	class:SkillLevel
operator ==	skill.h	/^  bool operator==(const int& b) const { return this->_level == b; }$/;"	f	class:SkillLevel
operator >	skill.h	/^  bool operator> (const SkillLevel& b) const { return this->_level >  b._level || (this->_level == b._level && this->_exercise > b._exercise); }$/;"	f	class:SkillLevel
operator >	skill.h	/^  bool operator> (const int& b) const { return this->_level >  b; }$/;"	f	class:SkillLevel
operator >=	skill.h	/^  bool operator>=(const SkillLevel& b) const { return !(*this <  b); }$/;"	f	class:SkillLevel
operator >=	skill.h	/^  bool operator>=(const int& b) const { return !(*this <  b); }$/;"	f	class:SkillLevel
operator >>	picojson.h	/^inline std::istream& operator>>(std::istream& is, picojson::value& x)$/;"	f
operator >>	skill.cpp	/^std::istream& operator>>(std::istream& is, SkillLevel& obj) {$/;"	f
operator []	inventory.cpp	/^item& inventory::operator[] (int i)$/;"	f	class:inventory
operator []	options.h	/^    double& operator[] (int i) { return options[i]; };$/;"	f	struct:option_table
operator []	options.h	/^    double& operator[] (option_key i) { return options[i]; };$/;"	f	struct:option_table
operator int	calendar.cpp	/^calendar::operator int() const$/;"	f	class:calendar
operator int	skill.h	/^  operator int() const { return _level; }$/;"	f	class:SkillLevel
opinion_failure	dialogue.h	/^ npc_opinion opinion_failure;$/;"	m	struct:talk_response
opinion_of	faction.h	/^ std::vector<int> opinion_of;$/;"	m	struct:faction
opinion_success	dialogue.h	/^ npc_opinion opinion_success;$/;"	m	struct:talk_response
opinion_text	npc.cpp	/^std::string npc::opinion_text()$/;"	f	class:npc
opt	npctalk.cpp	/^talk_topic dialogue::opt(talk_topic topic, game *g)$/;"	f	class:dialogue
option_desc	options.cpp	/^std::string option_desc(option_key key)$/;"	f
option_is_bool	options.cpp	/^bool option_is_bool(option_key id)$/;"	f
option_key	options.h	/^enum option_key {$/;"	g
option_max_options	options.cpp	/^char option_max_options(option_key id)$/;"	f
option_name	options.cpp	/^std::string option_name(option_key key)$/;"	f
option_string	options.cpp	/^std::string option_string(option_key key)$/;"	f
option_table	options.h	/^    option_table()$/;"	f	struct:option_table
option_table	options.h	/^struct option_table$/;"	s
options	computer.h	/^ std::vector<computer_option> options;   \/\/ Things we can do$/;"	m	class:computer
options	itype.h	/^ std::vector<bionic_id> options;$/;"	m	struct:it_bionic
options	options.h	/^    double options[NUM_OPTION_KEYS];$/;"	m	struct:option_table
options_header	options.cpp	/^std::string options_header()$/;"	f
origins	mission.h	/^ std::vector<mission_origin> origins;	\/\/ Points of origin$/;"	m	struct:mission_type
ortho_dx	tileray.cpp	/^int tileray::ortho_dx (int od)$/;"	f	class:tileray
ortho_dy	tileray.cpp	/^int tileray::ortho_dy (int od)$/;"	f	class:tileray
ot_anthill	omdata.h	/^ ot_anthill,$/;"	e	enum:oter_id
ot_ants_es	omdata.h	/^ ot_ants_ne, ot_ants_es, ot_ants_sw, ot_ants_wn,$/;"	e	enum:oter_id
ot_ants_esw	omdata.h	/^ ot_ants_nes, ot_ants_new, ot_ants_nsw, ot_ants_esw, ot_ants_nesw,$/;"	e	enum:oter_id
ot_ants_ew	omdata.h	/^ ot_ants_ns, ot_ants_ew,$/;"	e	enum:oter_id
ot_ants_food	omdata.h	/^ ot_ants_food, ot_ants_larvae, ot_ants_queen,$/;"	e	enum:oter_id
ot_ants_larvae	omdata.h	/^ ot_ants_food, ot_ants_larvae, ot_ants_queen,$/;"	e	enum:oter_id
ot_ants_ne	omdata.h	/^ ot_ants_ne, ot_ants_es, ot_ants_sw, ot_ants_wn,$/;"	e	enum:oter_id
ot_ants_nes	omdata.h	/^ ot_ants_nes, ot_ants_new, ot_ants_nsw, ot_ants_esw, ot_ants_nesw,$/;"	e	enum:oter_id
ot_ants_nesw	omdata.h	/^ ot_ants_nes, ot_ants_new, ot_ants_nsw, ot_ants_esw, ot_ants_nesw,$/;"	e	enum:oter_id
ot_ants_new	omdata.h	/^ ot_ants_nes, ot_ants_new, ot_ants_nsw, ot_ants_esw, ot_ants_nesw,$/;"	e	enum:oter_id
ot_ants_ns	omdata.h	/^ ot_ants_ns, ot_ants_ew,$/;"	e	enum:oter_id
ot_ants_nsw	omdata.h	/^ ot_ants_nes, ot_ants_new, ot_ants_nsw, ot_ants_esw, ot_ants_nesw,$/;"	e	enum:oter_id
ot_ants_queen	omdata.h	/^ ot_ants_food, ot_ants_larvae, ot_ants_queen,$/;"	e	enum:oter_id
ot_ants_sw	omdata.h	/^ ot_ants_ne, ot_ants_es, ot_ants_sw, ot_ants_wn,$/;"	e	enum:oter_id
ot_ants_wn	omdata.h	/^ ot_ants_ne, ot_ants_es, ot_ants_sw, ot_ants_wn,$/;"	e	enum:oter_id
ot_bank_east	omdata.h	/^ ot_bank_north, ot_bank_east, ot_bank_south, ot_bank_west,$/;"	e	enum:oter_id
ot_bank_north	omdata.h	/^ ot_bank_north, ot_bank_east, ot_bank_south, ot_bank_west,$/;"	e	enum:oter_id
ot_bank_south	omdata.h	/^ ot_bank_north, ot_bank_east, ot_bank_south, ot_bank_west,$/;"	e	enum:oter_id
ot_bank_west	omdata.h	/^ ot_bank_north, ot_bank_east, ot_bank_south, ot_bank_west,$/;"	e	enum:oter_id
ot_bar_east	omdata.h	/^ ot_bar_north, ot_bar_east, ot_bar_south, ot_bar_west,$/;"	e	enum:oter_id
ot_bar_north	omdata.h	/^ ot_bar_north, ot_bar_east, ot_bar_south, ot_bar_west,$/;"	e	enum:oter_id
ot_bar_south	omdata.h	/^ ot_bar_north, ot_bar_east, ot_bar_south, ot_bar_west,$/;"	e	enum:oter_id
ot_bar_west	omdata.h	/^ ot_bar_north, ot_bar_east, ot_bar_south, ot_bar_west,$/;"	e	enum:oter_id
ot_basement	omdata.h	/^ ot_basement,$/;"	e	enum:oter_id
ot_bridge_ew	omdata.h	/^ ot_bridge_ns, ot_bridge_ew,$/;"	e	enum:oter_id
ot_bridge_ns	omdata.h	/^ ot_bridge_ns, ot_bridge_ew,$/;"	e	enum:oter_id
ot_bunker	omdata.h	/^ ot_bunker, ot_outpost,$/;"	e	enum:oter_id
ot_cabin	omdata.h	/^ ot_s_garage_north, ot_s_garage_east, ot_s_garage_south, ot_s_garage_west, ot_cabin, ot_farm, ot_farm_field,$/;"	e	enum:oter_id
ot_cave	omdata.h	/^ ot_cave, ot_cave_rat,$/;"	e	enum:oter_id
ot_cave_rat	omdata.h	/^ ot_cave, ot_cave_rat,$/;"	e	enum:oter_id
ot_cavern	omdata.h	/^ ot_cavern,$/;"	e	enum:oter_id
ot_crater	omdata.h	/^ ot_crater,$/;"	e	enum:oter_id
ot_dirtlot	omdata.h	/^ ot_field, ot_dirtlot, ot_forest, ot_forest_thick, ot_forest_water, ot_hive, ot_spider_pit,$/;"	e	enum:oter_id
ot_farm	omdata.h	/^ ot_s_garage_north, ot_s_garage_east, ot_s_garage_south, ot_s_garage_west, ot_cabin, ot_farm, ot_farm_field,$/;"	e	enum:oter_id
ot_farm_field	omdata.h	/^ ot_s_garage_north, ot_s_garage_east, ot_s_garage_south, ot_s_garage_west, ot_cabin, ot_farm, ot_farm_field,$/;"	e	enum:oter_id
ot_fema	omdata.h	/^ ot_mansion_entrance, ot_mansion, ot_fema_entrance, ot_fema,$/;"	e	enum:oter_id
ot_fema_entrance	omdata.h	/^ ot_mansion_entrance, ot_mansion, ot_fema_entrance, ot_fema,$/;"	e	enum:oter_id
ot_field	omdata.h	/^ ot_field, ot_dirtlot, ot_forest, ot_forest_thick, ot_forest_water, ot_hive, ot_spider_pit,$/;"	e	enum:oter_id
ot_forest	omdata.h	/^ ot_field, ot_dirtlot, ot_forest, ot_forest_thick, ot_forest_water, ot_hive, ot_spider_pit,$/;"	e	enum:oter_id
ot_forest_thick	omdata.h	/^ ot_field, ot_dirtlot, ot_forest, ot_forest_thick, ot_forest_water, ot_hive, ot_spider_pit,$/;"	e	enum:oter_id
ot_forest_water	omdata.h	/^ ot_field, ot_dirtlot, ot_forest, ot_forest_thick, ot_forest_water, ot_hive, ot_spider_pit,$/;"	e	enum:oter_id
ot_fungal_bloom	omdata.h	/^  ot_fungal_bloom,$/;"	e	enum:oter_id
ot_hellmouth	omdata.h	/^ ot_rock, ot_rift, ot_hellmouth,$/;"	e	enum:oter_id
ot_hive	omdata.h	/^ ot_field, ot_dirtlot, ot_forest, ot_forest_thick, ot_forest_water, ot_hive, ot_spider_pit,$/;"	e	enum:oter_id
ot_hiway_ew	omdata.h	/^ ot_hiway_ns, ot_hiway_ew,$/;"	e	enum:oter_id
ot_hiway_ns	omdata.h	/^ ot_hiway_ns, ot_hiway_ew,$/;"	e	enum:oter_id
ot_hospital	omdata.h	/^ ot_hospital_entrance, ot_hospital,$/;"	e	enum:oter_id
ot_hospital_entrance	omdata.h	/^ ot_hospital_entrance, ot_hospital,$/;"	e	enum:oter_id
ot_house_base_east	omdata.h	/^ ot_house_base_north, ot_house_base_east, ot_house_base_south,$/;"	e	enum:oter_id
ot_house_base_north	omdata.h	/^ ot_house_base_north, ot_house_base_east, ot_house_base_south,$/;"	e	enum:oter_id
ot_house_base_south	omdata.h	/^ ot_house_base_north, ot_house_base_east, ot_house_base_south,$/;"	e	enum:oter_id
ot_house_base_west	omdata.h	/^  ot_house_base_west,$/;"	e	enum:oter_id
ot_house_east	omdata.h	/^ ot_house_north, ot_house_east, ot_house_south, ot_house_west,$/;"	e	enum:oter_id
ot_house_north	omdata.h	/^ ot_house_north, ot_house_east, ot_house_south, ot_house_west,$/;"	e	enum:oter_id
ot_house_south	omdata.h	/^ ot_house_north, ot_house_east, ot_house_south, ot_house_west,$/;"	e	enum:oter_id
ot_house_west	omdata.h	/^ ot_house_north, ot_house_east, ot_house_south, ot_house_west,$/;"	e	enum:oter_id
ot_lab	omdata.h	/^ ot_lab, ot_lab_stairs, ot_lab_core, ot_lab_finale,$/;"	e	enum:oter_id
ot_lab_core	omdata.h	/^ ot_lab, ot_lab_stairs, ot_lab_core, ot_lab_finale,$/;"	e	enum:oter_id
ot_lab_finale	omdata.h	/^ ot_lab, ot_lab_stairs, ot_lab_core, ot_lab_finale,$/;"	e	enum:oter_id
ot_lab_stairs	omdata.h	/^ ot_lab, ot_lab_stairs, ot_lab_core, ot_lab_finale,$/;"	e	enum:oter_id
ot_lmoe	omdata.h	/^ ot_shelter, ot_shelter_under, ot_lmoe, ot_lmoe_under,$/;"	e	enum:oter_id
ot_lmoe_under	omdata.h	/^ ot_shelter, ot_shelter_under, ot_lmoe, ot_lmoe_under,$/;"	e	enum:oter_id
ot_mansion	omdata.h	/^ ot_mansion_entrance, ot_mansion, ot_fema_entrance, ot_fema,$/;"	e	enum:oter_id
ot_mansion_entrance	omdata.h	/^ ot_mansion_entrance, ot_mansion, ot_fema_entrance, ot_fema,$/;"	e	enum:oter_id
ot_megastore	omdata.h	/^ ot_megastore_entrance, ot_megastore,$/;"	e	enum:oter_id
ot_megastore_entrance	omdata.h	/^ ot_megastore_entrance, ot_megastore,$/;"	e	enum:oter_id
ot_mil_surplus_east	omdata.h	/^ ot_mil_surplus_north, ot_mil_surplus_east, ot_mil_surplus_south,$/;"	e	enum:oter_id
ot_mil_surplus_north	omdata.h	/^ ot_mil_surplus_north, ot_mil_surplus_east, ot_mil_surplus_south,$/;"	e	enum:oter_id
ot_mil_surplus_south	omdata.h	/^ ot_mil_surplus_north, ot_mil_surplus_east, ot_mil_surplus_south,$/;"	e	enum:oter_id
ot_mil_surplus_west	omdata.h	/^  ot_mil_surplus_west,$/;"	e	enum:oter_id
ot_mine	omdata.h	/^ ot_mine_entrance, ot_mine_shaft, ot_mine, ot_mine_down, ot_mine_finale,$/;"	e	enum:oter_id
ot_mine_down	omdata.h	/^ ot_mine_entrance, ot_mine_shaft, ot_mine, ot_mine_down, ot_mine_finale,$/;"	e	enum:oter_id
ot_mine_entrance	omdata.h	/^ ot_mine_entrance, ot_mine_shaft, ot_mine, ot_mine_down, ot_mine_finale,$/;"	e	enum:oter_id
ot_mine_finale	omdata.h	/^ ot_mine_entrance, ot_mine_shaft, ot_mine, ot_mine_down, ot_mine_finale,$/;"	e	enum:oter_id
ot_mine_shaft	omdata.h	/^ ot_mine_entrance, ot_mine_shaft, ot_mine, ot_mine_down, ot_mine_finale,$/;"	e	enum:oter_id
ot_nuke_plant	omdata.h	/^ ot_nuke_plant_entrance, ot_nuke_plant, \/\/ TODO$/;"	e	enum:oter_id
ot_nuke_plant_entrance	omdata.h	/^ ot_nuke_plant_entrance, ot_nuke_plant, \/\/ TODO$/;"	e	enum:oter_id
ot_null	omdata.h	/^ ot_null = 0,$/;"	e	enum:oter_id
ot_outpost	omdata.h	/^ ot_bunker, ot_outpost,$/;"	e	enum:oter_id
ot_park	omdata.h	/^ ot_s_lot, ot_park,$/;"	e	enum:oter_id
ot_pawn_east	omdata.h	/^ ot_pawn_north, ot_pawn_east, ot_pawn_south, ot_pawn_west,$/;"	e	enum:oter_id
ot_pawn_north	omdata.h	/^ ot_pawn_north, ot_pawn_east, ot_pawn_south, ot_pawn_west,$/;"	e	enum:oter_id
ot_pawn_south	omdata.h	/^ ot_pawn_north, ot_pawn_east, ot_pawn_south, ot_pawn_west,$/;"	e	enum:oter_id
ot_pawn_west	omdata.h	/^ ot_pawn_north, ot_pawn_east, ot_pawn_south, ot_pawn_west,$/;"	e	enum:oter_id
ot_police_east	omdata.h	/^ ot_police_north, ot_police_east, ot_police_south, ot_police_west,$/;"	e	enum:oter_id
ot_police_north	omdata.h	/^ ot_police_north, ot_police_east, ot_police_south, ot_police_west,$/;"	e	enum:oter_id
ot_police_south	omdata.h	/^ ot_police_north, ot_police_east, ot_police_south, ot_police_west,$/;"	e	enum:oter_id
ot_police_west	omdata.h	/^ ot_police_north, ot_police_east, ot_police_south, ot_police_west,$/;"	e	enum:oter_id
ot_radio_tower	omdata.h	/^ ot_radio_tower,$/;"	e	enum:oter_id
ot_rift	omdata.h	/^ ot_rock, ot_rift, ot_hellmouth,$/;"	e	enum:oter_id
ot_river_c_not_ne	omdata.h	/^ ot_river_c_not_ne, ot_river_c_not_nw, ot_river_c_not_se, ot_river_c_not_sw,$/;"	e	enum:oter_id
ot_river_c_not_nw	omdata.h	/^ ot_river_c_not_ne, ot_river_c_not_nw, ot_river_c_not_se, ot_river_c_not_sw,$/;"	e	enum:oter_id
ot_river_c_not_se	omdata.h	/^ ot_river_c_not_ne, ot_river_c_not_nw, ot_river_c_not_se, ot_river_c_not_sw,$/;"	e	enum:oter_id
ot_river_c_not_sw	omdata.h	/^ ot_river_c_not_ne, ot_river_c_not_nw, ot_river_c_not_se, ot_river_c_not_sw,$/;"	e	enum:oter_id
ot_river_center	omdata.h	/^ ot_river_center,$/;"	e	enum:oter_id
ot_river_east	omdata.h	/^ ot_river_north, ot_river_east, ot_river_south, ot_river_west,$/;"	e	enum:oter_id
ot_river_ne	omdata.h	/^ ot_river_ne, ot_river_se, ot_river_sw, ot_river_nw,$/;"	e	enum:oter_id
ot_river_north	omdata.h	/^ ot_river_north, ot_river_east, ot_river_south, ot_river_west,$/;"	e	enum:oter_id
ot_river_nw	omdata.h	/^ ot_river_ne, ot_river_se, ot_river_sw, ot_river_nw,$/;"	e	enum:oter_id
ot_river_se	omdata.h	/^ ot_river_ne, ot_river_se, ot_river_sw, ot_river_nw,$/;"	e	enum:oter_id
ot_river_south	omdata.h	/^ ot_river_north, ot_river_east, ot_river_south, ot_river_west,$/;"	e	enum:oter_id
ot_river_sw	omdata.h	/^ ot_river_ne, ot_river_se, ot_river_sw, ot_river_nw,$/;"	e	enum:oter_id
ot_river_west	omdata.h	/^ ot_river_north, ot_river_east, ot_river_south, ot_river_west,$/;"	e	enum:oter_id
ot_road_es	omdata.h	/^ ot_road_ne, ot_road_es, ot_road_sw, ot_road_wn,$/;"	e	enum:oter_id
ot_road_esw	omdata.h	/^ ot_road_nes, ot_road_new, ot_road_nsw, ot_road_esw, ot_road_nesw,$/;"	e	enum:oter_id
ot_road_ew	omdata.h	/^ ot_road_ns, ot_road_ew,$/;"	e	enum:oter_id
ot_road_ne	omdata.h	/^ ot_road_ne, ot_road_es, ot_road_sw, ot_road_wn,$/;"	e	enum:oter_id
ot_road_nes	omdata.h	/^ ot_road_nes, ot_road_new, ot_road_nsw, ot_road_esw, ot_road_nesw,$/;"	e	enum:oter_id
ot_road_nesw	omdata.h	/^ ot_road_nes, ot_road_new, ot_road_nsw, ot_road_esw, ot_road_nesw,$/;"	e	enum:oter_id
ot_road_nesw_manhole	omdata.h	/^ ot_road_nesw_manhole,$/;"	e	enum:oter_id
ot_road_new	omdata.h	/^ ot_road_nes, ot_road_new, ot_road_nsw, ot_road_esw, ot_road_nesw,$/;"	e	enum:oter_id
ot_road_ns	omdata.h	/^ ot_road_ns, ot_road_ew,$/;"	e	enum:oter_id
ot_road_nsw	omdata.h	/^ ot_road_nes, ot_road_new, ot_road_nsw, ot_road_esw, ot_road_nesw,$/;"	e	enum:oter_id
ot_road_null	omdata.h	/^ ot_road_null,$/;"	e	enum:oter_id
ot_road_sw	omdata.h	/^ ot_road_ne, ot_road_es, ot_road_sw, ot_road_wn,$/;"	e	enum:oter_id
ot_road_wn	omdata.h	/^ ot_road_ne, ot_road_es, ot_road_sw, ot_road_wn,$/;"	e	enum:oter_id
ot_rock	omdata.h	/^ ot_rock, ot_rift, ot_hellmouth,$/;"	e	enum:oter_id
ot_s_clothes_east	omdata.h	/^ ot_s_clothes_north, ot_s_clothes_east, ot_s_clothes_south, ot_s_clothes_west,$/;"	e	enum:oter_id
ot_s_clothes_north	omdata.h	/^ ot_s_clothes_north, ot_s_clothes_east, ot_s_clothes_south, ot_s_clothes_west,$/;"	e	enum:oter_id
ot_s_clothes_south	omdata.h	/^ ot_s_clothes_north, ot_s_clothes_east, ot_s_clothes_south, ot_s_clothes_west,$/;"	e	enum:oter_id
ot_s_clothes_west	omdata.h	/^ ot_s_clothes_north, ot_s_clothes_east, ot_s_clothes_south, ot_s_clothes_west,$/;"	e	enum:oter_id
ot_s_electronics_east	omdata.h	/^ ot_s_electronics_north, ot_s_electronics_east, ot_s_electronics_south,$/;"	e	enum:oter_id
ot_s_electronics_north	omdata.h	/^ ot_s_electronics_north, ot_s_electronics_east, ot_s_electronics_south,$/;"	e	enum:oter_id
ot_s_electronics_south	omdata.h	/^ ot_s_electronics_north, ot_s_electronics_east, ot_s_electronics_south,$/;"	e	enum:oter_id
ot_s_electronics_west	omdata.h	/^  ot_s_electronics_west,$/;"	e	enum:oter_id
ot_s_garage_east	omdata.h	/^ ot_s_garage_north, ot_s_garage_east, ot_s_garage_south, ot_s_garage_west, ot_cabin, ot_farm, ot_farm_field,$/;"	e	enum:oter_id
ot_s_garage_north	omdata.h	/^ ot_s_garage_north, ot_s_garage_east, ot_s_garage_south, ot_s_garage_west, ot_cabin, ot_farm, ot_farm_field,$/;"	e	enum:oter_id
ot_s_garage_south	omdata.h	/^ ot_s_garage_north, ot_s_garage_east, ot_s_garage_south, ot_s_garage_west, ot_cabin, ot_farm, ot_farm_field,$/;"	e	enum:oter_id
ot_s_garage_west	omdata.h	/^ ot_s_garage_north, ot_s_garage_east, ot_s_garage_south, ot_s_garage_west, ot_cabin, ot_farm, ot_farm_field,$/;"	e	enum:oter_id
ot_s_gas_east	omdata.h	/^ ot_s_gas_north, ot_s_gas_east, ot_s_gas_south, ot_s_gas_west,$/;"	e	enum:oter_id
ot_s_gas_north	omdata.h	/^ ot_s_gas_north, ot_s_gas_east, ot_s_gas_south, ot_s_gas_west,$/;"	e	enum:oter_id
ot_s_gas_south	omdata.h	/^ ot_s_gas_north, ot_s_gas_east, ot_s_gas_south, ot_s_gas_west,$/;"	e	enum:oter_id
ot_s_gas_west	omdata.h	/^ ot_s_gas_north, ot_s_gas_east, ot_s_gas_south, ot_s_gas_west,$/;"	e	enum:oter_id
ot_s_grocery_east	omdata.h	/^ ot_s_grocery_north, ot_s_grocery_east, ot_s_grocery_south, ot_s_grocery_west,$/;"	e	enum:oter_id
ot_s_grocery_north	omdata.h	/^ ot_s_grocery_north, ot_s_grocery_east, ot_s_grocery_south, ot_s_grocery_west,$/;"	e	enum:oter_id
ot_s_grocery_south	omdata.h	/^ ot_s_grocery_north, ot_s_grocery_east, ot_s_grocery_south, ot_s_grocery_west,$/;"	e	enum:oter_id
ot_s_grocery_west	omdata.h	/^ ot_s_grocery_north, ot_s_grocery_east, ot_s_grocery_south, ot_s_grocery_west,$/;"	e	enum:oter_id
ot_s_gun_east	omdata.h	/^ ot_s_gun_north, ot_s_gun_east, ot_s_gun_south, ot_s_gun_west,$/;"	e	enum:oter_id
ot_s_gun_north	omdata.h	/^ ot_s_gun_north, ot_s_gun_east, ot_s_gun_south, ot_s_gun_west,$/;"	e	enum:oter_id
ot_s_gun_south	omdata.h	/^ ot_s_gun_north, ot_s_gun_east, ot_s_gun_south, ot_s_gun_west,$/;"	e	enum:oter_id
ot_s_gun_west	omdata.h	/^ ot_s_gun_north, ot_s_gun_east, ot_s_gun_south, ot_s_gun_west,$/;"	e	enum:oter_id
ot_s_hardware_east	omdata.h	/^ ot_s_hardware_north, ot_s_hardware_east, ot_s_hardware_south,$/;"	e	enum:oter_id
ot_s_hardware_north	omdata.h	/^ ot_s_hardware_north, ot_s_hardware_east, ot_s_hardware_south,$/;"	e	enum:oter_id
ot_s_hardware_south	omdata.h	/^ ot_s_hardware_north, ot_s_hardware_east, ot_s_hardware_south,$/;"	e	enum:oter_id
ot_s_hardware_west	omdata.h	/^  ot_s_hardware_west,$/;"	e	enum:oter_id
ot_s_library_east	omdata.h	/^ ot_s_library_north, ot_s_library_east, ot_s_library_south, ot_s_library_west,$/;"	e	enum:oter_id
ot_s_library_north	omdata.h	/^ ot_s_library_north, ot_s_library_east, ot_s_library_south, ot_s_library_west,$/;"	e	enum:oter_id
ot_s_library_south	omdata.h	/^ ot_s_library_north, ot_s_library_east, ot_s_library_south, ot_s_library_west,$/;"	e	enum:oter_id
ot_s_library_west	omdata.h	/^ ot_s_library_north, ot_s_library_east, ot_s_library_south, ot_s_library_west,$/;"	e	enum:oter_id
ot_s_liquor_east	omdata.h	/^ ot_s_liquor_north, ot_s_liquor_east, ot_s_liquor_south, ot_s_liquor_west,$/;"	e	enum:oter_id
ot_s_liquor_north	omdata.h	/^ ot_s_liquor_north, ot_s_liquor_east, ot_s_liquor_south, ot_s_liquor_west,$/;"	e	enum:oter_id
ot_s_liquor_south	omdata.h	/^ ot_s_liquor_north, ot_s_liquor_east, ot_s_liquor_south, ot_s_liquor_west,$/;"	e	enum:oter_id
ot_s_liquor_west	omdata.h	/^ ot_s_liquor_north, ot_s_liquor_east, ot_s_liquor_south, ot_s_liquor_west,$/;"	e	enum:oter_id
ot_s_lot	omdata.h	/^ ot_s_lot, ot_park,$/;"	e	enum:oter_id
ot_s_pharm_east	omdata.h	/^ ot_s_pharm_north, ot_s_pharm_east, ot_s_pharm_south, ot_s_pharm_west,$/;"	e	enum:oter_id
ot_s_pharm_north	omdata.h	/^ ot_s_pharm_north, ot_s_pharm_east, ot_s_pharm_south, ot_s_pharm_west,$/;"	e	enum:oter_id
ot_s_pharm_south	omdata.h	/^ ot_s_pharm_north, ot_s_pharm_east, ot_s_pharm_south, ot_s_pharm_west,$/;"	e	enum:oter_id
ot_s_pharm_west	omdata.h	/^ ot_s_pharm_north, ot_s_pharm_east, ot_s_pharm_south, ot_s_pharm_west,$/;"	e	enum:oter_id
ot_s_restaurant_east	omdata.h	/^ ot_s_restaurant_north, ot_s_restaurant_east, ot_s_restaurant_south,$/;"	e	enum:oter_id
ot_s_restaurant_north	omdata.h	/^ ot_s_restaurant_north, ot_s_restaurant_east, ot_s_restaurant_south,$/;"	e	enum:oter_id
ot_s_restaurant_south	omdata.h	/^ ot_s_restaurant_north, ot_s_restaurant_east, ot_s_restaurant_south,$/;"	e	enum:oter_id
ot_s_restaurant_west	omdata.h	/^  ot_s_restaurant_west,$/;"	e	enum:oter_id
ot_s_sports_east	omdata.h	/^ ot_s_sports_north, ot_s_sports_east, ot_s_sports_south, ot_s_sports_west,$/;"	e	enum:oter_id
ot_s_sports_north	omdata.h	/^ ot_s_sports_north, ot_s_sports_east, ot_s_sports_south, ot_s_sports_west,$/;"	e	enum:oter_id
ot_s_sports_south	omdata.h	/^ ot_s_sports_north, ot_s_sports_east, ot_s_sports_south, ot_s_sports_west,$/;"	e	enum:oter_id
ot_s_sports_west	omdata.h	/^ ot_s_sports_north, ot_s_sports_east, ot_s_sports_south, ot_s_sports_west,$/;"	e	enum:oter_id
ot_sewage_treatment	omdata.h	/^ ot_sewage_treatment, ot_sewage_treatment_hub, ot_sewage_treatment_under,$/;"	e	enum:oter_id
ot_sewage_treatment_hub	omdata.h	/^ ot_sewage_treatment, ot_sewage_treatment_hub, ot_sewage_treatment_under,$/;"	e	enum:oter_id
ot_sewage_treatment_under	omdata.h	/^ ot_sewage_treatment, ot_sewage_treatment_hub, ot_sewage_treatment_under,$/;"	e	enum:oter_id
ot_sewer_es	omdata.h	/^ ot_sewer_ne, ot_sewer_es, ot_sewer_sw, ot_sewer_wn,$/;"	e	enum:oter_id
ot_sewer_esw	omdata.h	/^ ot_sewer_nes, ot_sewer_new, ot_sewer_nsw, ot_sewer_esw, ot_sewer_nesw,$/;"	e	enum:oter_id
ot_sewer_ew	omdata.h	/^ ot_sewer_ns, ot_sewer_ew,$/;"	e	enum:oter_id
ot_sewer_ne	omdata.h	/^ ot_sewer_ne, ot_sewer_es, ot_sewer_sw, ot_sewer_wn,$/;"	e	enum:oter_id
ot_sewer_nes	omdata.h	/^ ot_sewer_nes, ot_sewer_new, ot_sewer_nsw, ot_sewer_esw, ot_sewer_nesw,$/;"	e	enum:oter_id
ot_sewer_nesw	omdata.h	/^ ot_sewer_nes, ot_sewer_new, ot_sewer_nsw, ot_sewer_esw, ot_sewer_nesw,$/;"	e	enum:oter_id
ot_sewer_new	omdata.h	/^ ot_sewer_nes, ot_sewer_new, ot_sewer_nsw, ot_sewer_esw, ot_sewer_nesw,$/;"	e	enum:oter_id
ot_sewer_ns	omdata.h	/^ ot_sewer_ns, ot_sewer_ew,$/;"	e	enum:oter_id
ot_sewer_nsw	omdata.h	/^ ot_sewer_nes, ot_sewer_new, ot_sewer_nsw, ot_sewer_esw, ot_sewer_nesw,$/;"	e	enum:oter_id
ot_sewer_sw	omdata.h	/^ ot_sewer_ne, ot_sewer_es, ot_sewer_sw, ot_sewer_wn,$/;"	e	enum:oter_id
ot_sewer_wn	omdata.h	/^ ot_sewer_ne, ot_sewer_es, ot_sewer_sw, ot_sewer_wn,$/;"	e	enum:oter_id
ot_shelter	omdata.h	/^ ot_shelter, ot_shelter_under, ot_lmoe, ot_lmoe_under,$/;"	e	enum:oter_id
ot_shelter_under	omdata.h	/^ ot_shelter, ot_shelter_under, ot_lmoe, ot_lmoe_under,$/;"	e	enum:oter_id
ot_silo	omdata.h	/^ ot_silo, ot_silo_finale,$/;"	e	enum:oter_id
ot_silo_finale	omdata.h	/^ ot_silo, ot_silo_finale,$/;"	e	enum:oter_id
ot_slimepit	omdata.h	/^ ot_slimepit, ot_slimepit_down,$/;"	e	enum:oter_id
ot_slimepit_down	omdata.h	/^ ot_slimepit, ot_slimepit_down,$/;"	e	enum:oter_id
ot_spider_pit	omdata.h	/^ ot_field, ot_dirtlot, ot_forest, ot_forest_thick, ot_forest_water, ot_hive, ot_spider_pit,$/;"	e	enum:oter_id
ot_spider_pit_under	omdata.h	/^ ot_spider_pit_under,$/;"	e	enum:oter_id
ot_spiral	omdata.h	/^ ot_spiral_hub, ot_spiral,$/;"	e	enum:oter_id
ot_spiral_hub	omdata.h	/^ ot_spiral_hub, ot_spiral,$/;"	e	enum:oter_id
ot_sub_station_east	omdata.h	/^ ot_sub_station_north, ot_sub_station_east, ot_sub_station_south,$/;"	e	enum:oter_id
ot_sub_station_north	omdata.h	/^ ot_sub_station_north, ot_sub_station_east, ot_sub_station_south,$/;"	e	enum:oter_id
ot_sub_station_south	omdata.h	/^ ot_sub_station_north, ot_sub_station_east, ot_sub_station_south,$/;"	e	enum:oter_id
ot_sub_station_west	omdata.h	/^  ot_sub_station_west,$/;"	e	enum:oter_id
ot_subway_es	omdata.h	/^ ot_subway_ne, ot_subway_es, ot_subway_sw, ot_subway_wn,$/;"	e	enum:oter_id
ot_subway_esw	omdata.h	/^ ot_subway_nes, ot_subway_new, ot_subway_nsw, ot_subway_esw, ot_subway_nesw,$/;"	e	enum:oter_id
ot_subway_ew	omdata.h	/^ ot_subway_ns, ot_subway_ew,$/;"	e	enum:oter_id
ot_subway_ne	omdata.h	/^ ot_subway_ne, ot_subway_es, ot_subway_sw, ot_subway_wn,$/;"	e	enum:oter_id
ot_subway_nes	omdata.h	/^ ot_subway_nes, ot_subway_new, ot_subway_nsw, ot_subway_esw, ot_subway_nesw,$/;"	e	enum:oter_id
ot_subway_nesw	omdata.h	/^ ot_subway_nes, ot_subway_new, ot_subway_nsw, ot_subway_esw, ot_subway_nesw,$/;"	e	enum:oter_id
ot_subway_new	omdata.h	/^ ot_subway_nes, ot_subway_new, ot_subway_nsw, ot_subway_esw, ot_subway_nesw,$/;"	e	enum:oter_id
ot_subway_ns	omdata.h	/^ ot_subway_ns, ot_subway_ew,$/;"	e	enum:oter_id
ot_subway_nsw	omdata.h	/^ ot_subway_nes, ot_subway_new, ot_subway_nsw, ot_subway_esw, ot_subway_nesw,$/;"	e	enum:oter_id
ot_subway_station	omdata.h	/^ ot_subway_station,$/;"	e	enum:oter_id
ot_subway_sw	omdata.h	/^ ot_subway_ne, ot_subway_es, ot_subway_sw, ot_subway_wn,$/;"	e	enum:oter_id
ot_subway_wn	omdata.h	/^ ot_subway_ne, ot_subway_es, ot_subway_sw, ot_subway_wn,$/;"	e	enum:oter_id
ot_temple	omdata.h	/^ ot_temple, ot_temple_stairs, ot_temple_core, ot_temple_finale, \/\/ TODO$/;"	e	enum:oter_id
ot_temple_core	omdata.h	/^ ot_temple, ot_temple_stairs, ot_temple_core, ot_temple_finale, \/\/ TODO$/;"	e	enum:oter_id
ot_temple_finale	omdata.h	/^ ot_temple, ot_temple_stairs, ot_temple_core, ot_temple_finale, \/\/ TODO$/;"	e	enum:oter_id
ot_temple_stairs	omdata.h	/^ ot_temple, ot_temple_stairs, ot_temple_core, ot_temple_finale, \/\/ TODO$/;"	e	enum:oter_id
ot_toxic_dump	omdata.h	/^ ot_toxic_dump,$/;"	e	enum:oter_id
ot_triffid_finale	omdata.h	/^ ot_triffid_grove, ot_triffid_roots, ot_triffid_finale,$/;"	e	enum:oter_id
ot_triffid_grove	omdata.h	/^ ot_triffid_grove, ot_triffid_roots, ot_triffid_finale,$/;"	e	enum:oter_id
ot_triffid_roots	omdata.h	/^ ot_triffid_grove, ot_triffid_roots, ot_triffid_finale,$/;"	e	enum:oter_id
ot_tutorial	omdata.h	/^ ot_tutorial,$/;"	e	enum:oter_id
oter_id	omdata.h	/^enum oter_id {$/;"	g
oter_t	omdata.h	/^struct oter_t {$/;"	s
oterlist	omdata.h	/^const oter_t oterlist[num_ter_types] = {$/;"	v
out_	picojson.h	/^    value* out_;$/;"	m	class:picojson::default_parse_context
outside_cache	map.h	/^ bool outside_cache[MAPSIZE*SEEX][MAPSIZE*SEEY];$/;"	m	class:map
overflow	debug.cpp	/^ int overflow(int c) { return c; }$/;"	f	struct:NullBuf
overmap	overmap.cpp	/^overmap::overmap()$/;"	f	class:overmap
overmap	overmap.cpp	/^overmap::overmap(game *g, int x, int y)$/;"	f	class:overmap
overmap	overmap.cpp	/^overmap::overmap(overmap const& o)$/;"	f	class:overmap
overmap	overmap.h	/^class overmap$/;"	c
overmap_sight_range	player.cpp	/^int player::overmap_sight_range(int light_level)$/;"	f	class:player
overmap_special	omdata.h	/^struct overmap_special$/;"	s
overmap_specials	omdata.h	/^const overmap_special overmap_specials[NUM_OMSPECS] = {$/;"	v
overmap_zone	omdata.h	/^enum overmap_zone$/;"	g
owed	npc.h	/^ int owed;$/;"	m	struct:npc_opinion
owned	item.h	/^ int owned;	            \/\/ UID of NPC owner; 0 = player, -1 = unowned$/;"	m	class:item
oxygen	player.h	/^ int oxygen;$/;"	m	class:player
page_size	veh_interact.h	/^    int page_size;$/;"	m	class:veh_interact
pain	player.h	/^ int stim, pain, pkill, radiation;$/;"	m	class:player
painful	mapdata.h	/^ painful,      \/\/ May cause a small amount of pain$/;"	e	enum:t_flag
pairs	catacurse.h	/^} pairs;$/;"	t	typeref:struct:__anon1
par1	veh_type.h	/^        int par1;$/;"	m	union:vpart_info::__anon10
par2	veh_type.h	/^        int par2;$/;"	m	union:vpart_info::__anon11
parse	picojson.h	/^  inline std::string parse(value& out, std::istream& is) {$/;"	f	namespace:picojson
parse	picojson.h	/^  template <typename Iter> inline Iter parse(value& out, const Iter& first, const Iter& last, std::string* err) {$/;"	f	namespace:picojson
parse	picojson.h	/^  template <typename Iter> inline std::string parse(value& out, Iter& pos, const Iter& last) {$/;"	f	namespace:picojson
parse_array_item	picojson.h	/^    template <typename Iter> bool parse_array_item(input<Iter>& in, size_t) {$/;"	f	class:picojson::default_parse_context
parse_array_item	picojson.h	/^    template <typename Iter> bool parse_array_item(input<Iter>& in, size_t) {$/;"	f	class:picojson::null_parse_context
parse_array_item	picojson.h	/^    template <typename Iter> bool parse_array_item(input<Iter>&, size_t) {$/;"	f	class:picojson::deny_parse_context
parse_array_start	picojson.h	/^    bool parse_array_start() { return false; }$/;"	f	class:picojson::deny_parse_context
parse_array_start	picojson.h	/^    bool parse_array_start() { return true; }$/;"	f	class:picojson::null_parse_context
parse_array_start	picojson.h	/^    bool parse_array_start() {$/;"	f	class:picojson::default_parse_context
parse_object_item	picojson.h	/^    template <typename Iter> bool parse_object_item(input<Iter>& in, const std::string& key) {$/;"	f	class:picojson::default_parse_context
parse_object_item	picojson.h	/^    template <typename Iter> bool parse_object_item(input<Iter>& in, const std::string&) {$/;"	f	class:picojson::null_parse_context
parse_object_item	picojson.h	/^    template <typename Iter> bool parse_object_item(input<Iter>&, const std::string&) {$/;"	f	class:picojson::deny_parse_context
parse_object_start	picojson.h	/^    bool parse_object_start() { return false; }$/;"	f	class:picojson::deny_parse_context
parse_object_start	picojson.h	/^    bool parse_object_start() { return true; }$/;"	f	class:picojson::null_parse_context
parse_object_start	picojson.h	/^    bool parse_object_start() {$/;"	f	class:picojson::default_parse_context
parse_string	picojson.h	/^    template <typename Iter> bool parse_string(input<Iter>& in) {$/;"	f	class:picojson::null_parse_context
parse_string	picojson.h	/^    template <typename Iter> bool parse_string(input<Iter>&) { return false; }$/;"	f	class:picojson::deny_parse_context
parse_string	picojson.h	/^    template<typename Iter> bool parse_string(input<Iter>& in) {$/;"	f	class:picojson::default_parse_context
parse_tags	npctalk.cpp	/^void parse_tags(std::string &phrase, player *u, npc *me)$/;"	f
part	vehicle.h	/^ int part;$/;"	m	struct:veh_collision
part_at	veh_interact.cpp	/^int veh_interact::part_at (int dx, int dy)$/;"	f	class:veh_interact
part_at	vehicle.cpp	/^int vehicle::part_at(int dx, int dy)$/;"	f	class:vehicle
part_collision	vehicle.cpp	/^veh_collision vehicle::part_collision (int vx, int vy, int part, int x, int y)$/;"	f	class:vehicle
part_color	vehicle.cpp	/^nc_color vehicle::part_color (int p)$/;"	f	class:vehicle
part_flag	vehicle.cpp	/^bool vehicle::part_flag (int p, unsigned int f)$/;"	f	class:vehicle
part_info	vehicle.cpp	/^const vpart_info& vehicle::part_info (int index)$/;"	f	class:vehicle
part_power	vehicle.cpp	/^int vehicle::part_power (int index){$/;"	f	class:vehicle
part_sym	vehicle.cpp	/^char vehicle::part_sym (int p)$/;"	f	class:vehicle
part_with_feature	vehicle.cpp	/^int vehicle::part_with_feature (int p, unsigned int f, bool unbroken)$/;"	f	class:vehicle
parts	vehicle.h	/^    std::vector<vehicle_part> parts;   \/\/ Parts which occupy different tiles$/;"	m	class:vehicle
parts_at_relative	vehicle.cpp	/^std::vector<int> vehicle::parts_at_relative (int dx, int dy)$/;"	f	class:vehicle
parts_here	veh_interact.h	/^    std::vector<int> parts_here;$/;"	m	class:veh_interact
passenger_flag	vehicle.h	/^    static const int passenger_flag = 1;$/;"	m	struct:vehicle_part
passenger_id	vehicle.h	/^        int passenger_id;   \/\/ seat has passenger$/;"	m	union:vehicle_part::__anon9
passive_bad	artifactdata.h	/^ art_effect_passive passive_bad[4];$/;"	m	struct:artifact_property_datum
passive_effect_cost	artifactdata.h	/^int passive_effect_cost[NUM_AEPS] = {$/;"	v
passive_good	artifactdata.h	/^ art_effect_passive passive_good[4];$/;"	m	struct:artifact_property_datum
path	npc.h	/^ std::vector<point> path;	\/\/ Our movement plans$/;"	m	class:npc
patience	npc.h	/^ int patience; \/\/ Used when we expect the player to leave the area$/;"	m	class:npc
pause	player.cpp	/^void player::pause(game *g)$/;"	f	class:player
pda	iuse.cpp	/^void iuse::pda(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
pda_flashlight	iuse.cpp	/^void iuse::pda_flashlight(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
pedestal_temple	iexamine.cpp	/^void iexamine::pedestal_temple(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
pedestal_wyrm	iexamine.cpp	/^void iexamine::pedestal_wyrm(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
peek	game.cpp	/^void game::peek()$/;"	f	class:game
per_cur	player.h	/^ int str_cur, dex_cur, int_cur, per_cur;$/;"	m	class:player
per_max	player.h	/^ int str_max, dex_max, int_max, per_max;$/;"	m	class:player
per_turn	defense.cpp	/^void defense_game::per_turn(game *g)$/;"	f	class:defense_game
per_turn	event.cpp	/^void event::per_turn(game *g)$/;"	f	class:event
per_turn	gamemode.h	/^ virtual void per_turn(game *g) { };$/;"	f	struct:special_game
per_turn	tutorial.cpp	/^void tutorial_game::per_turn(game *g)$/;"	f	class:tutorial_game
perform_defensive_technique	melee.cpp	/^void player::perform_defensive_technique($/;"	f	class:player
perform_mission	npc.cpp	/^void npc::perform_mission(game *g)$/;"	f	class:npc
perform_special_attacks	melee.cpp	/^void player::perform_special_attacks(game *g, monster *z, player *p,$/;"	f	class:player
perform_technique	melee.cpp	/^void player::perform_technique(technique_id technique, game *g, monster *z,$/;"	f	class:player
personality	npc.h	/^ npc_personality personality;$/;"	m	class:npc
pheromone	iuse.cpp	/^void iuse::pheromone(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
photograph	monattack.cpp	/^void mattack::photograph(game *g, monster *z)$/;"	f	class:mattack
pick_and_eat	npcmove.cpp	/^void npc::pick_and_eat(game *g)$/;"	f	class:npc
pick_defensive_technique	melee.cpp	/^technique_id player::pick_defensive_technique(game *g, monster *z, player *p)$/;"	f	class:player
pick_mansion_room	mapgen.cpp	/^room_type pick_mansion_room(int x1, int y1, int x2, int y2)$/;"	f
pick_monster_wave	defense.cpp	/^std::vector<mon_id> defense_game::pick_monster_wave(game *g)$/;"	f	class:defense_game
pick_name	player.cpp	/^void player::pick_name() {$/;"	f	class:player
pick_recipes	crafting.cpp	/^void game::pick_recipes(std::vector<recipe*> &current,$/;"	f	class:game
pick_reload_ammo	item.cpp	/^int item::pick_reload_ammo(player &u, bool interactive)$/;"	f	class:item
pick_style	player.cpp	/^void player::pick_style(game *g) \/\/ Style selection menu$/;"	f	class:player
pick_talk_topic	npc.cpp	/^talk_topic npc::pick_talk_topic(player *u)$/;"	f	class:npc
pick_technique	melee.cpp	/^technique_id player::pick_technique(game *g, monster *z, player *p,$/;"	f	class:player
pick_up_item	npcmove.cpp	/^void npc::pick_up_item(game *g)$/;"	f	class:npc
pick_usb	player.cpp	/^int player::pick_usb()$/;"	f	class:player
pickaxe	iuse.cpp	/^void iuse::pickaxe(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
picklock	iuse.cpp	/^void iuse::picklock(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
pickup	game.cpp	/^void game::pickup(int posx, int posy, int min)$/;"	f	class:game
picojson	picojson.h	/^namespace picojson {$/;"	n
picojson_h	picojson.h	31;"	d
pierce	itype.h	/^ unsigned char pierce;	\/\/ Armor piercing; static reduction in armor$/;"	m	struct:it_ammo
pipebomb	iuse.cpp	/^void iuse::pipebomb(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
pipebomb_act	iuse.cpp	/^void iuse::pipebomb_act(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
pit	iexamine.cpp	/^void iexamine::pit(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
pit	trapfunc.cpp	/^void trapfunc::pit(game *g, int x, int y)$/;"	f	class:trapfunc
pit	trapfunc.cpp	/^void trapfuncm::pit(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
pit_covered	iexamine.cpp	/^void iexamine::pit_covered(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
pit_spiked	iexamine.cpp	/^void iexamine::pit_spiked(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
pit_spiked_covered	iexamine.cpp	/^void iexamine::pit_spiked_covered(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
pit_spikes	trapfunc.cpp	/^void trapfunc::pit_spikes(game *g, int x, int y)$/;"	f	class:trapfunc
pit_spikes	trapfunc.cpp	/^void trapfuncm::pit_spikes(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
pkill	player.h	/^ int stim, pain, pkill, radiation;$/;"	m	class:player
pkill_1	iuse.cpp	/^void iuse::pkill_1(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
pkill_2	iuse.cpp	/^void iuse::pkill_2(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
pkill_3	iuse.cpp	/^void iuse::pkill_3(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
pkill_4	iuse.cpp	/^void iuse::pkill_4(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
pkill_l	iuse.cpp	/^void iuse::pkill_l(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
pl_choose_vehicle	game.cpp	/^bool game::pl_choose_vehicle (int &x, int &y)$/;"	f	class:game
pl_flag	pldata.h	/^enum pl_flag {$/;"	g
pl_refill_vehicle	game.cpp	/^bool game::pl_refill_vehicle (vehicle &veh, int part, bool test)$/;"	f	class:game
pl_sees	game.cpp	/^bool game::pl_sees(player *p, monster *mon, int &t)$/;"	f	class:game
pl_sees	lightmap.cpp	/^bool map::pl_sees(int fx, int fy, int tx, int ty, int max_range)$/;"	f	class:map
placate	mtype.h	/^ std::vector<monster_trigger> placate; \/\/ What reduces our anger?$/;"	m	struct:mtype
place	mission.h	/^ bool (mission_place::*place)(game *g, int x, int y);$/;"	m	struct:mission_type
place_book	mission_start.cpp	/^void mission_start::place_book(game *g, mission *miss)$/;"	f	class:mission_start
place_cities	overmap.cpp	/^void overmap::place_cities()$/;"	f	class:overmap
place_construction	construction.cpp	/^void game::place_construction(constructable *con)$/;"	f	class:game
place_dog	mission_start.cpp	/^void mission_start::place_dog(game *g, mission *miss)$/;"	f	class:mission_start
place_forest	overmap.cpp	/^void overmap::place_forest()$/;"	f	class:overmap
place_hiways	overmap.cpp	/^void overmap::place_hiways(std::vector<city> cities, int z, oter_id base)$/;"	f	class:overmap
place_item	mapdata.h	/^ place_item,   \/\/ Valid terrain for place_item() to put items on$/;"	e	enum:t_flag
place_items	mapgen.cpp	/^void map::place_items(items_location loc, int chance, int x1, int y1,$/;"	f	class:map
place_mongroups	overmap.cpp	/^void overmap::place_mongroups()$/;"	f	class:overmap
place_npc_software	mission_start.cpp	/^void mission_start::place_npc_software(game *g, mission *miss)$/;"	f	class:mission_start
place_radios	overmap.cpp	/^void overmap::place_radios()$/;"	f	class:overmap
place_rifts	overmap.cpp	/^void overmap::place_rifts(int const z)$/;"	f	class:overmap
place_river	overmap.cpp	/^void overmap::place_river(point pa, point pb)$/;"	f	class:overmap
place_spawns	mapgen.cpp	/^void map::place_spawns(game *g, std::string group, const int chance,$/;"	f	class:map
place_special	overmap.cpp	/^void overmap::place_special(overmap_special special, tripoint p)$/;"	f	class:overmap
place_specials	overmap.cpp	/^void overmap::place_specials()$/;"	f	class:overmap
place_zombie_mom	mission_start.cpp	/^void mission_start::place_zombie_mom(game *g, mission *miss)$/;"	f	class:mission_start
placement	pldata.h	/^ point placement;$/;"	m	struct:player_activity
plan	monmove.cpp	/^void monster::plan(game *g)$/;"	f	class:monster
plan	picojson.h	/^static void plan(int num)$/;"	f
plans	monster.h	/^ std::vector <point> plans;$/;"	m	class:monster
plant	monattack.cpp	/^void mattack::plant(game *g, monster *z)$/;"	f	class:mattack
player	player.cpp	/^player::player()$/;"	f	class:player
player	player.cpp	/^player::player(const player &rhs)$/;"	f	class:player
player	player.h	/^class player {$/;"	c
player_activity	pldata.h	/^ player_activity() { type = ACT_NULL; moves_left = 0; index = -1;$/;"	f	struct:player_activity
player_activity	pldata.h	/^ player_activity(activity_type t, int turns, int Index)$/;"	f	struct:player_activity
player_activity	pldata.h	/^ player_activity(const player_activity &copy)$/;"	f	struct:player_activity
player_activity	pldata.h	/^struct player_activity$/;"	s
player_can_build	construction.cpp	/^bool game::player_can_build(player &p, inventory inv, constructable* con,$/;"	f	class:game
player_danger	npc.cpp	/^int npc::player_danger(player *u)$/;"	f	class:npc
player_filename	overmap.cpp	/^std::string overmap::player_filename(int const x, int const y) const$/;"	f	class:overmap
player_id	item.h	/^ int player_id;	\/\/ Only give a mission to the right player!$/;"	m	class:item
player_in_control	vehicle.cpp	/^bool vehicle::player_in_control (player *p)$/;"	f	class:vehicle
player_leaving	npctalk.cpp	/^void talk_function::player_leaving(game *g, npc *p)$/;"	f	class:talk_function
player_weapon_away	npctalk.cpp	/^void talk_function::player_weapon_away(game *g, npc *p)$/;"	f	class:talk_function
player_weapon_drop	npctalk.cpp	/^void talk_function::player_weapon_drop(game *g, npc *p)$/;"	f	class:talk_function
pldrive	game.cpp	/^void game::pldrive(int x, int y) {$/;"	f	class:game
plfire	game.cpp	/^void game::plfire(bool burst)$/;"	f	class:game
plmove	game.cpp	/^void game::plmove(int x, int y)$/;"	f	class:game
plswim	game.cpp	/^void game::plswim(int x, int y)$/;"	f	class:game
plt	npc.h	/^ int plx, ply, plt;\/\/ Where we last saw the player, timeout to forgetting$/;"	m	class:npc
plthrow	game.cpp	/^void game::plthrow(char chInput)$/;"	f	class:game
pltype_desc	pldata.h	/^const std::string pltype_desc[PLTYPE_MAX] = { "\\$/;"	v
pltype_name	pldata.h	/^const std::string pltype_name[PLTYPE_MAX] = {$/;"	v
plural	artifactdata.h	/^ bool plural;$/;"	m	struct:artifact_armor_form_datum
plx	npc.h	/^ int plx, ply, plt;\/\/ Where we last saw the player, timeout to forgetting$/;"	m	class:npc
ply	npc.h	/^ int plx, ply, plt;\/\/ Where we last saw the player, timeout to forgetting$/;"	m	class:npc
point	enums.h	/^ point(const point &p) : x (p.x), y (p.y) {}$/;"	f	struct:point
point	enums.h	/^ point(int X = 0, int Y = 0) : x (X), y (Y) {}$/;"	f	struct:point
point	enums.h	/^struct point {$/;"	s
pointcomp	mapbuffer.h	/^struct pointcomp$/;"	s
points	pldata.h	/^ int points;		\/\/ How many points it costs in character creation$/;"	m	struct:trait
poison	item.h	/^   int poison;	         \/\/ How badly poisoned is it?$/;"	m	union:item::__anon4
poison	iuse.cpp	/^void iuse::poison(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
polish	overmap.cpp	/^void overmap::polish(int z, oter_id min, oter_id max)$/;"	f	class:overmap
poly	monster.cpp	/^void monster::poly(mtype *t)$/;"	f	class:monster
pop	settlement.h	/^ int pop;$/;"	m	struct:settlement
populate	settlement.h	/^ void populate(game *g) { };$/;"	f	struct:settlement
population	mongroup.h	/^ unsigned int population;$/;"	m	struct:mongroup
popup	output.cpp	/^void popup(const char *mes, ...)$/;"	f
popup_getkey	output.cpp	/^char popup_getkey(const char *mes, ...)$/;"	f
popup_nowait	output.cpp	/^void popup_nowait(const char *mes, ...)$/;"	f
popup_top	output.cpp	/^void popup_top(const char *mes, ...)$/;"	f
portal	iuse.cpp	/^void iuse::portal(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
portal	trap.h	/^ void portal		(game *g, int x, int y) { };$/;"	f	struct:trapfunc
portal	trap.h	/^ void portal	(game *g, monster *z, int x, int y) { };$/;"	f	struct:trapfuncm
pos	overmap.h	/^  point const& pos() const { return loc; }$/;"	f	class:overmap
possibly_recover_from_skid	vehicle.cpp	/^void vehicle::possibly_recover_from_skid(){$/;"	f	class:vehicle
post_action	defense.cpp	/^void defense_game::post_action(game *g, action_id act)$/;"	f	class:defense_game
post_action	gamemode.h	/^ virtual void post_action(game *g, action_id act) { };$/;"	f	struct:special_game
post_action	tutorial.cpp	/^void tutorial_game::post_action(game *g, action_id act)$/;"	f	class:tutorial_game
post_process	mapgen.cpp	/^void map::post_process(game *g, unsigned zones)$/;"	f	class:map
posx	basecamp.h	/^	int posx, posy; \/\/ location of associated bulletin board$/;"	m	class:basecamp
posx	mapdata.h	/^ int posx, posy;$/;"	m	struct:spawn_point
posx	mongroup.h	/^ int posx, posy, posz;$/;"	m	struct:mongroup
posx	monster.h	/^ int posx, posy;$/;"	m	class:monster
posx	player.h	/^ int posx, posy;$/;"	m	class:player
posx	settlement.h	/^ int posx;$/;"	m	struct:settlement
posx	vehicle.h	/^    int posx, posy;$/;"	m	class:vehicle
posy	basecamp.h	/^	int posx, posy; \/\/ location of associated bulletin board$/;"	m	class:basecamp
posy	mapdata.h	/^ int posx, posy;$/;"	m	struct:spawn_point
posy	mongroup.h	/^ int posx, posy, posz;$/;"	m	struct:mongroup
posy	monster.h	/^ int posx, posy;$/;"	m	class:monster
posy	player.h	/^ int posx, posy;$/;"	m	class:player
posy	settlement.h	/^ int posy;$/;"	m	struct:settlement
posy	vehicle.h	/^    int posx, posy;$/;"	m	class:vehicle
posz	mongroup.h	/^ int posx, posy, posz;$/;"	m	struct:mongroup
power	faction.h	/^ int power;	\/\/ General measure of our power$/;"	m	struct:faction
power	itype.h	/^ int power;$/;"	m	struct:it_software
power	veh_type.h	/^        int power;      \/\/ engine (top spd), solar panel (% of 1 fuel per turn, can be > 100)$/;"	m	union:vpart_info::__anon10
power_armor	itype.h	/^ bool power_armor;$/;"	m	struct:it_armor
power_bionics	bionics.cpp	/^void player::power_bionics(game *g)$/;"	f	class:player
power_cost	bionics.h	/^     int power_cost;$/;"	m	class:bionic_data
power_level	player.h	/^ int power_level, max_power_level;$/;"	m	class:player
power_source	bionics.h	/^     bool power_source;$/;"	m	class:bionic_data
power_source_bionics	bionics.cpp	/^std::vector<bionic_id> power_source_bionics;$/;"	v
powered	bionics.h	/^ bool powered;$/;"	m	struct:bionic
practice	player.cpp	/^void player::practice (Skill *s, int amount) {$/;"	f	class:player
practice	player.cpp	/^void player::practice (std::string s, int amount) {$/;"	f	class:player
pre_action	defense.cpp	/^void defense_game::pre_action(game *g, action_id &act)$/;"	f	class:defense_game
pre_action	gamemode.h	/^ virtual void pre_action(game *g, action_id &act) { };$/;"	f	struct:special_game
pre_action	tutorial.cpp	/^void tutorial_game::pre_action(game *g, action_id &act)$/;"	f	class:tutorial_game
precalc_dx	vehicle.h	/^    int precalc_dx[2];      \/\/ mount_dx translated to face.dir [0] and turn_dir [1]$/;"	m	struct:vehicle_part
precalc_dy	vehicle.h	/^    int precalc_dy[2];      \/\/ mount_dy translated to face.dir [0] and turn_dir [1]$/;"	m	struct:vehicle_part
precalc_mounts	vehicle.cpp	/^void vehicle::precalc_mounts (int idir, int dir)$/;"	f	class:vehicle
prefix	overmap.h	/^  std::string prefix;$/;"	m	class:overmap
prereqs	mutation.h	/^ std::vector<pl_flag> prereqs; \/\/ Prerequisites; Only one is required$/;"	m	struct:mutation_branch
price	item.cpp	/^int item::price()$/;"	f	class:item
price	itype.h	/^ unsigned int  price;	\/\/ Its value$/;"	m	struct:itype
price_adjustment	skill.cpp	/^double price_adjustment(int barter_skill) {$/;"	f
print_error	computer.cpp	/^void computer::print_error(const char *mes, ...)$/;"	f	class:computer
print_fuel_indicator	vehicle.cpp	/^void vehicle::print_fuel_indicator (void *w, int y, int x)$/;"	f	class:vehicle
print_gibberish_line	computer.cpp	/^void computer::print_gibberish_line()$/;"	f	class:computer
print_info	monster.cpp	/^void monster::print_info(game *g, WINDOW* w)$/;"	f	class:monster
print_info	npc.cpp	/^void npc::print_info(WINDOW* w)$/;"	f	class:npc
print_inv_statics	inventory_ui.cpp	/^void print_inv_statics(game *g, WINDOW* w_inv, std::string title,$/;"	f
print_line	computer.cpp	/^void computer::print_line(const char *mes, ...)$/;"	f	class:computer
print_menu	main_menu.cpp	/^void game::print_menu(WINDOW* w_open, int iSel, const int iMenuOffsetX, int iMenuOffsetY, bool bShowDDA)$/;"	f	class:game
print_menu_items	main_menu.cpp	/^void game::print_menu_items(WINDOW* w_in, std::vector<std::string> vItems, int iSel, int iOffsetY, int iOffsetX)$/;"	f	class:game
print_part_desc	vehicle.cpp	/^void vehicle::print_part_desc (void *w, int y1, int width, int p, int hl)$/;"	f	class:vehicle
print_time	calendar.cpp	/^std::string calendar::print_time(bool twentyfour)$/;"	f	class:calendar
printstring	catacurse.cpp	/^inline int printstring(WINDOW *win, char *fmt)$/;"	f
printw	catacurse.cpp	/^int printw(const char *fmt, ...)$/;"	f
printz	output.cpp	/^void printz(nc_color FG, const char *mes, ...)$/;"	f
process_active_items	map.cpp	/^void map::process_active_items(game *g)$/;"	f	class:map
process_active_items	player.cpp	/^void player::process_active_items(game *g)$/;"	f	class:player
process_active_items_in_submap	map.cpp	/^void map::process_active_items_in_submap(game *g, const int nonant)$/;"	f	class:map
process_activity	game.cpp	/^void game::process_activity()$/;"	f	class:game
process_artifact	artifact.cpp	/^void game::process_artifact(item *it, player *p, bool wielded)$/;"	f	class:game
process_effects	monster.cpp	/^void monster::process_effects(game *g)$/;"	f	class:monster
process_events	game.cpp	/^void game::process_events()$/;"	f	class:game
process_fields	field.cpp	/^bool map::process_fields(game *g)$/;"	f	class:map
process_fields_in_submap	field.cpp	/^bool map::process_fields_in_submap(game *g, int gridn)$/;"	f	class:map
process_missions	game.cpp	/^void game::process_missions()$/;"	f	class:game
process_mongroups	overmap.cpp	/^void overmap::process_mongroups()$/;"	f	class:overmap
process_trigger	monster.cpp	/^void monster::process_trigger(monster_trigger trig, int amount)$/;"	f	class:monster
process_triggers	monster.cpp	/^void monster::process_triggers(game *g)$/;"	f	class:monster
prozac	iuse.cpp	/^void iuse::prozac(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
pseudo_itype_ids	itypedef.cpp	/^std::vector<std::string> pseudo_itype_ids;$/;"	v
ptank	veh_interact.h	/^    int ptank;$/;"	m	class:veh_interact
purifier	iuse.cpp	/^void iuse::purifier(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
push_back	inventory.cpp	/^void inventory::push_back(item newit)$/;"	f	class:inventory
push_back	inventory.cpp	/^void inventory::push_back(std::vector<item> newits)$/;"	f	class:inventory
push_back	picojson.h	/^      void push_back(int) {}$/;"	f	struct:picojson::null_parse_context::dummy_str
put_buildings	overmap.cpp	/^void overmap::put_buildings(int x, int y, int dir, city town)$/;"	f	class:overmap
put_in	item.cpp	/^void item::put_in(item payload)$/;"	f	class:item
put_items_from	mapgen.cpp	/^void map::put_items_from(items_location loc, int num, int x, int y, int turn)$/;"	f	class:map
quench	itype.h	/^    signed char quench;	\/\/ Many things make you thirstier!$/;"	m	struct:it_comest
query_bool	computer.cpp	/^bool computer::query_bool(const char *mes, ...)$/;"	f	class:computer
query_int	output.cpp	/^int query_int(const char *mes, ...)$/;"	f
query_yn	output.cpp	/^bool query_yn(const char *mes, ...)$/;"	f
query_ynq	computer.cpp	/^char computer::query_ynq(const char *mes, ...)$/;"	f	class:computer
quit_status	game.h	/^enum quit_status {$/;"	g
rad	mapdata.h	/^ int			rad[SEEX][SEEY]; \/\/ Irradiation of each square$/;"	m	struct:submap
radiation	map.cpp	/^int& map::radiation(const int x, const int y)$/;"	f	class:map
radiation	player.h	/^ int stim, pain, pkill, radiation;$/;"	m	class:player
radio_off	iuse.cpp	/^void iuse::radio_off(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
radio_on	iuse.cpp	/^void iuse::radio_on(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
radio_tower	overmap.h	/^ radio_tower(int X = -1, int Y = -1, int S = -1, std::string M = "") :$/;"	f	struct:radio_tower
radio_tower	overmap.h	/^struct radio_tower {$/;"	s
radios	overmap.h	/^  std::vector<radio_tower> radios;$/;"	m	class:overmap
radius	mongroup.h	/^ unsigned char radius;$/;"	m	struct:mongroup
rag	iuse.cpp	/^void iuse::rag(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
rand_char	output.cpp	/^char rand_char()$/;"	f
rand_color	output.cpp	/^nc_color rand_color()$/;"	f
random_bad_trait	newcharacter.cpp	/^int player::random_bad_trait()$/;"	f	class:player
random_body_part	bodypart.cpp	/^body_part random_body_part()$/;"	f
random_evil_faction	game.cpp	/^faction* game::random_evil_faction()$/;"	f	class:game
random_good_faction	game.cpp	/^faction* game::random_good_faction()$/;"	f	class:game
random_good_trait	newcharacter.cpp	/^int player::random_good_trait()$/;"	f	class:player
random_house_in_city	overmap.cpp	/^point overmap::random_house_in_city(int city_id)$/;"	f	class:overmap
random_map_extra	mapgen.cpp	/^map_extra random_map_extra(map_extras embellishments)$/;"	f
random_outdoor_tile	map.cpp	/^point map::random_outdoor_tile()$/;"	f	class:map
random_skill	newcharacter.cpp	/^int random_skill()$/;"	f
randomize	faction.cpp	/^void faction::randomize()$/;"	f	class:faction
randomize	npc.cpp	/^void npc::randomize(game *g, npc_class type)$/;"	f	class:npc
randomize_from_faction	npc.cpp	/^void npc::randomize_from_faction(game *g, faction *fac)$/;"	f	class:npc
range	item.cpp	/^int item::range(player *p)$/;"	f	class:item
range	itype.h	/^ unsigned char range;	\/\/ Maximum range$/;"	m	struct:it_ammo
ranged_dex_mod	player.cpp	/^int player::ranged_dex_mod(bool real_life)$/;"	f	class:player
ranged_penalty	weather.h	/^ int ranged_penalty;$/;"	m	struct:weather_datum
ranged_per_mod	player.cpp	/^int player::ranged_per_mod(bool real_life)$/;"	f	class:player
rarity	itype.h	/^ unsigned char rarity;	\/\/ How often it's found$/;"	m	struct:itype
rate_action_disassemble	player.cpp	/^hint_rating player::rate_action_disassemble(item *it, game *g) {$/;"	f	class:player
rate_action_eat	player.cpp	/^hint_rating player::rate_action_eat(item *it)$/;"	f	class:player
rate_action_read	player.cpp	/^hint_rating player::rate_action_read(item *it, game *g)$/;"	f	class:player
rate_action_reload	player.cpp	/^hint_rating player::rate_action_reload(item *it) {$/;"	f	class:player
rate_action_takeoff	player.cpp	/^hint_rating player::rate_action_takeoff(item *it) {$/;"	f	class:player
rate_action_unload	player.cpp	/^hint_rating player::rate_action_unload(item *it) {$/;"	f	class:player
rate_action_use	player.cpp	/^hint_rating player::rate_action_use(item *it)$/;"	f	class:player
rate_action_wear	player.cpp	/^hint_rating player::rate_action_wear(item *it)$/;"	f	class:player
ratio	npcmove.cpp	/^ double ratio;$/;"	m	struct:ratio_index	file:
ratio_index	npcmove.cpp	/^ ratio_index(double R, int I) : ratio (R), index (I) {};$/;"	f	struct:ratio_index
ratio_index	npcmove.cpp	/^struct ratio_index$/;"	s	file:
ratking	monattack.cpp	/^void mattack::ratking(game *g, monster *z)$/;"	f	class:mattack
ratking	mondeath.cpp	/^void mdeath::ratking(game *g, monster *z)$/;"	f	class:mdeath
reach_destination	npcmove.cpp	/^void npc::reach_destination(game *g)$/;"	f	class:npc
read	game.cpp	/^void game::read()$/;"	f	class:game
read	player.cpp	/^void player::read(game *g, char ch)$/;"	f	class:player
readBook	skill.cpp	/^int SkillLevel::readBook(int minimumGain, int maximumGain, int maximumLevel) {$/;"	f	class:SkillLevel
read_speed	player.cpp	/^int player::read_speed(bool real_life)$/;"	f	class:player
readable	itype.h	/^ bool readable; \/\/ If true, activated with 'R'$/;"	m	struct:it_macguffin
realDebugmsg	output.cpp	/^void realDebugmsg(const char* filename, const char* line, const char *mes, ...)$/;"	f
reassign_item	game.cpp	/^void game::reassign_item()$/;"	f	class:game
receive_moves	monmove.cpp	/^void monster::receive_moves()$/;"	f	class:monster
recipe	crafting.h	/^  recipe() {$/;"	f	struct:recipe
recipe	crafting.h	/^recipe(int pid, itype_id pres, craft_cat cat, const char *p1, const char *p2,$/;"	f	struct:recipe
recipe	crafting.h	/^struct recipe {$/;"	s
recipes	game.h	/^  std::vector<recipe*> recipes;	\/\/ The list of valid recipes$/;"	m	class:game
recoil	item.cpp	/^int item::recoil(bool with_ammo)$/;"	f	class:item
recoil	itype.h	/^ signed char accuracy, damage, loudness, clip, recoil, burst;$/;"	m	struct:it_gunmod
recoil	itype.h	/^ signed char recoil;$/;"	m	struct:it_gun
recoil	itype.h	/^ unsigned char recoil;	\/\/ Recoil; modified by strength$/;"	m	struct:it_ammo
recoil	player.h	/^ unsigned int recoil;$/;"	m	class:player
recoil_add	ranged.cpp	/^int recoil_add(player &p)$/;"	f
recraft	crafting.cpp	/^void game::recraft()$/;"	f	class:game
recycler	iexamine.cpp	/^void iexamine::recycler(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
red_background	output.cpp	/^nc_color red_background(nc_color c)$/;"	f
reduce_scent	mapdata.h	/^ reduce_scent, \/\/ Reduces the scent even more, only works if object is bashable as well$/;"	e	enum:t_flag
refill	vehicle.cpp	/^int vehicle::refill (int ftype, int amount)$/;"	f	class:vehicle
refresh	catacurse.cpp	/^int refresh(void)$/;"	f
refresh_all	game.cpp	/^void game::refresh_all()$/;"	f	class:game
refresh_insides	vehicle.cpp	/^void vehicle::refresh_insides ()$/;"	f	class:vehicle
refresh_setup	defense.cpp	/^void defense_game::refresh_setup(WINDOW* w, int selection)$/;"	f	class:defense_game
reload	game.cpp	/^void game::reload()$/;"	f	class:game
reload	game.cpp	/^void game::reload(char chInput)$/;"	f	class:game
reload	item.cpp	/^bool item::reload(player &u, int index)$/;"	f	class:item
reload_time	item.cpp	/^int item::reload_time(player &u)$/;"	f	class:item
reload_time	itype.h	/^ int reload_time;$/;"	m	struct:it_gun
rem_addiction	player.cpp	/^void player::rem_addiction(add_type type)$/;"	f	class:player
rem_disease	player.cpp	/^void player::rem_disease(dis_type type)$/;"	f	class:player
rem_effect	monster.cpp	/^void monster::rem_effect(monster_effect_type effect)$/;"	f	class:monster
remove_child_flag	mutation.cpp	/^void player::remove_child_flag(game *g, pl_flag flag)$/;"	f	class:player
remove_fence_barbed	iexamine.cpp	/^void iexamine::remove_fence_barbed(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
remove_fence_rope	iexamine.cpp	/^void iexamine::remove_fence_rope(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
remove_fence_wire	iexamine.cpp	/^void iexamine::remove_fence_wire(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
remove_field	map.cpp	/^void map::remove_field(const int x, const int y)$/;"	f	class:map
remove_flag	vehicle.h	/^    int remove_flag( int flag ) { return flags &= ~flag; }$/;"	f	struct:vehicle_part
remove_item	game.cpp	/^void game::remove_item(item *it)$/;"	f	class:game
remove_item	inventory.cpp	/^item inventory::remove_item(int index)$/;"	f	class:inventory
remove_item	inventory.cpp	/^item inventory::remove_item(int stack, int index)$/;"	f	class:inventory
remove_item	vehicle.cpp	/^void vehicle::remove_item (int part, int itemdex)$/;"	f	class:vehicle
remove_item_by_letter	inventory.cpp	/^item inventory::remove_item_by_letter(char ch)$/;"	f	class:inventory
remove_item_by_quantity	inventory.cpp	/^item inventory::remove_item_by_quantity(int index, int quantity)$/;"	f	class:inventory
remove_mission_items	player.cpp	/^void player::remove_mission_items(int mission_id)$/;"	f	class:player
remove_mutation	mutation.cpp	/^void player::remove_mutation(game *g, pl_flag mut)$/;"	f	class:player
remove_part	vehicle.cpp	/^void vehicle::remove_part (int p)$/;"	f	class:vehicle
remove_stack	inventory.cpp	/^std::vector<item> inventory::remove_stack(int index)$/;"	f	class:inventory
remove_weapon	player.cpp	/^item player::remove_weapon()$/;"	f	class:player
replace_stair_monsters	game.cpp	/^void game::replace_stair_monsters()$/;"	f	class:game
replacement	dialogue.h	/^ std::string (*replacement)[10];$/;"	m	class:tag_data::std
replacements	mutation.h	/^ std::vector<pl_flag> replacements; \/\/ Mutations that replace this one$/;"	m	struct:mutation_branch
req	itype.h	/^ unsigned char req;	\/\/ The skill level required to understand it$/;"	m	struct:it_book
reserve_mission	game.cpp	/^int game::reserve_mission(mission_id type, int npc_id)$/;"	f	class:game
reserve_random_mission	game.cpp	/^int game::reserve_random_mission(mission_origin origin, point p, int npc_id)$/;"	f	class:game
reset	mapbuffer.cpp	/^void mapbuffer::reset(){$/;"	f	class:mapbuffer
reset	player.cpp	/^void player::reset(game *g)$/;"	f	class:player
reset_light_level	game.cpp	/^void game::reset_light_level()$/;"	f	class:game
reset_terminal	computer.cpp	/^void computer::reset_terminal()$/;"	f	class:computer
reset_vehicle_cache	map.cpp	/^void map::reset_vehicle_cache()$/;"	f	class:map
resist	player.cpp	/^int player::resist(body_part bp)$/;"	f	class:player
resonance_cascade	game.cpp	/^void game::resonance_cascade(int x, int y)$/;"	f	class:game
respects_u	faction.h	/^ int respects_u;$/;"	m	struct:faction
response_time	faction.cpp	/^int faction::response_time(game *g)$/;"	f	class:faction
restack	inventory.cpp	/^void inventory::restack(player *p)$/;"	f	class:inventory
result	crafting.h	/^  itype_id result;$/;"	m	struct:recipe
resurrect	monattack.cpp	/^void mattack::resurrect(game *g, monster *z)$/;"	f	class:mattack
ret_null	player.h	/^ item ret_null;	\/\/ Null item, sometimes returns by weapon() etc$/;"	m	class:player
reveal_hospital	mission_start.cpp	/^void mission_start::reveal_hospital(game *g, mission *miss)$/;"	f	class:mission_start
reversible	crafting.h	/^  bool reversible; \/\/ can the item be disassembled?$/;"	m	struct:recipe
revert_to	itype.h	/^ itype_id revert_to;$/;"	m	struct:it_tool
reward	mission.h	/^ npc_favor reward;	\/\/ If there's a special reward for completing it$/;"	m	struct:mission
rl_dist	line.cpp	/^int rl_dist(int x1, int y1, int x2, int y2)$/;"	f
rl_dist	line.cpp	/^int rl_dist(point a, point b)$/;"	f
rl_vec2d	line.h	/^ rl_vec2d(const rl_vec2d &v) : x (v.x), y (v.y) {}$/;"	f	struct:rl_vec2d
rl_vec2d	line.h	/^ rl_vec2d(float X = 0, float Y = 0) : x (X), y (Y) {}$/;"	f	struct:rl_vec2d
rl_vec2d	line.h	/^struct rl_vec2d {$/;"	s
rng	rng.cpp	/^long rng(long low, long high)$/;"	f
roadmap	iuse.cpp	/^void iuse::roadmap(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
roadmap_a_target	iuse.cpp	/^void iuse::roadmap_a_target(game *g, player *p, item *it, bool t, int target)$/;"	f	class:iuse
roadmap_targets	iuse.cpp	/^void iuse::roadmap_targets(game *g, player *p, item *it, bool t, int target, int target_range, int distance, int reveal_distance)$/;"	f	class:iuse
roads_out	overmap.h	/^  std::vector<city> roads_out;$/;"	m	class:overmap
robots	gamemode.h	/^ bool robots;$/;"	m	struct:defense_game
roll_bash_damage	melee.cpp	/^int player::roll_bash_damage(monster *z, bool crit)$/;"	f	class:player
roll_cut_damage	melee.cpp	/^int player::roll_cut_damage(monster *z, bool crit)$/;"	f	class:player
roll_stab_damage	melee.cpp	/^int player::roll_stab_damage(monster *z, bool crit)$/;"	f	class:player
roll_stuck_penalty	melee.cpp	/^int player::roll_stuck_penalty(monster *z, bool stabbing)$/;"	f	class:player
room_bathroom	mapgen.cpp	/^ room_bathroom,$/;"	e	enum:room_type	file:
room_bedroom	mapgen.cpp	/^ room_bedroom,$/;"	e	enum:room_type	file:
room_bionics	mapgen.cpp	/^ room_bionics,$/;"	e	enum:room_type	file:
room_bunker_armor	mapgen.cpp	/^ room_bunker_armor,$/;"	e	enum:room_type	file:
room_bunker_bots	mapgen.cpp	/^ room_bunker_bots,$/;"	e	enum:room_type	file:
room_bunker_grenades	mapgen.cpp	/^ room_bunker_grenades,$/;"	e	enum:room_type	file:
room_bunker_launcher	mapgen.cpp	/^ room_bunker_launcher,$/;"	e	enum:room_type	file:
room_bunker_rifles	mapgen.cpp	/^ room_bunker_rifles,$/;"	e	enum:room_type	file:
room_chemistry	mapgen.cpp	/^ room_chemistry,$/;"	e	enum:room_type	file:
room_cloning	mapgen.cpp	/^ room_cloning,$/;"	e	enum:room_type	file:
room_closet	mapgen.cpp	/^ room_closet,$/;"	e	enum:room_type	file:
room_dorm	mapgen.cpp	/^ room_dorm,$/;"	e	enum:room_type	file:
room_goo	mapgen.cpp	/^ room_goo,$/;"	e	enum:room_type	file:
room_kitchen	mapgen.cpp	/^ room_kitchen,$/;"	e	enum:room_type	file:
room_living	mapgen.cpp	/^ room_living,$/;"	e	enum:room_type	file:
room_lobby	mapgen.cpp	/^ room_lobby,$/;"	e	enum:room_type	file:
room_mansion_bathroom	mapgen.cpp	/^ room_mansion_bathroom,$/;"	e	enum:room_type	file:
room_mansion_bedroom	mapgen.cpp	/^ room_mansion_bedroom,$/;"	e	enum:room_type	file:
room_mansion_courtyard	mapgen.cpp	/^ room_mansion_courtyard,$/;"	e	enum:room_type	file:
room_mansion_dining	mapgen.cpp	/^ room_mansion_dining,$/;"	e	enum:room_type	file:
room_mansion_entry	mapgen.cpp	/^ room_mansion_entry,$/;"	e	enum:room_type	file:
room_mansion_gallery	mapgen.cpp	/^ room_mansion_gallery,$/;"	e	enum:room_type	file:
room_mansion_game	mapgen.cpp	/^ room_mansion_game,$/;"	e	enum:room_type	file:
room_mansion_kitchen	mapgen.cpp	/^ room_mansion_kitchen,$/;"	e	enum:room_type	file:
room_mansion_library	mapgen.cpp	/^ room_mansion_library,$/;"	e	enum:room_type	file:
room_mansion_pool	mapgen.cpp	/^ room_mansion_pool,$/;"	e	enum:room_type	file:
room_mine_fuel	mapgen.cpp	/^ room_mine_fuel,$/;"	e	enum:room_type	file:
room_mine_housing	mapgen.cpp	/^ room_mine_housing,$/;"	e	enum:room_type	file:
room_mine_office	mapgen.cpp	/^ room_mine_office,$/;"	e	enum:room_type	file:
room_mine_shaft	mapgen.cpp	/^ room_mine_shaft,$/;"	e	enum:room_type	file:
room_mine_storage	mapgen.cpp	/^ room_mine_storage,$/;"	e	enum:room_type	file:
room_null	mapgen.cpp	/^ room_null,$/;"	e	enum:room_type	file:
room_split	mapgen.cpp	/^ room_split$/;"	e	enum:room_type	file:
room_teleport	mapgen.cpp	/^ room_teleport,$/;"	e	enum:room_type	file:
room_type	mapgen.cpp	/^enum room_type {$/;"	g	file:
room_vivisect	mapgen.cpp	/^ room_vivisect,$/;"	e	enum:room_type	file:
rotate	mapgen.cpp	/^void map::rotate(int turns)$/;"	f	class:map
rotten	item.cpp	/^bool item::rotten(game *g)$/;"	f	class:item
rough	mapdata.h	/^ rough,        \/\/ May hurt the player's feet$/;"	e	enum:t_flag
rough_circle	mapgen.cpp	/^void rough_circle(map *m, ter_id type, int x, int y, int rad)$/;"	f
route	map.cpp	/^std::vector<point> map::route(const int Fx, const int Fy, const int Tx, const int Ty, const bool bash)$/;"	f	class:map
royal_jelly	iuse.cpp	/^void iuse::royal_jelly(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
rubble	iexamine.cpp	/^void iexamine::rubble(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
run_cost	player.cpp	/^int player::run_cost(int base_cost)$/;"	f	class:player
run_mode	game.h	/^  char run_mode; \/\/ 0 - Normal run always; 1 - Running allowed, but if a new$/;"	m	class:game
rust	skill.cpp	/^int SkillLevel::rust(int &level) {$/;"	f	class:SkillLevel
rustCheck	game.cpp	/^void game::rustCheck() {$/;"	f	class:game
s	overmap.h	/^ int s;$/;"	m	struct:city
s	picojson.h	/^    static std::string s;$/;"	m	struct:picojson::last_error_t
s	picojson.h	/^  template <typename T> std::string last_error_t<T>::s;$/;"	m	class:picojson::last_error_t
sFilter	game.h	/^  std::string sFilter;$/;"	m	class:game
sName	item.h	/^  std::string sName; \/\/Main item text$/;"	m	struct:iteminfo
sPost	item.h	/^  std::string sPost; \/\/Text after value$/;"	m	struct:iteminfo
sPre	item.h	/^  std::string sPre; \/\/Text between main item and value$/;"	m	struct:iteminfo
sType	item.h	/^  std::string sType; \/\/Itemtype$/;"	m	struct:iteminfo
safe_velocity	vehicle.cpp	/^int vehicle::safe_velocity (bool fueled)$/;"	f	class:vehicle
sated	pldata.h	/^ int sated;$/;"	m	struct:addiction
save	game.cpp	/^void game::save()$/;"	f	class:game
save	map.cpp	/^void map::save(overmap *om, unsigned const int turn, const int x, const int y, const int z)$/;"	f	class:map
save	mapbuffer.cpp	/^void mapbuffer::save()$/;"	f	class:mapbuffer
save	overmap.cpp	/^void overmap::save()$/;"	f	class:overmap
save	vehicle.cpp	/^void vehicle::save (std::ofstream &stout)$/;"	f	class:vehicle
save_data	basecamp.cpp	/^std::string basecamp::save_data() const$/;"	f	class:basecamp
save_data	computer.cpp	/^std::string computer::save_data()$/;"	f	class:computer
save_data	itype.h	/^ virtual std::string save_data() { return std::string(); }$/;"	f	struct:it_armor
save_data	itype.h	/^ virtual std::string save_data() { return std::string(); }$/;"	f	struct:it_tool
save_data	itype.h	/^ virtual std::string save_data() { return std::string(); }$/;"	f	struct:itype
save_data	itype.h	/^ virtual std::string save_data()$/;"	f	struct:it_artifact_armor
save_data	itype.h	/^ virtual std::string save_data()$/;"	f	struct:it_artifact_tool
save_if_dirty	mapbuffer.cpp	/^void mapbuffer::save_if_dirty()$/;"	f	class:mapbuffer
save_info	faction.cpp	/^std::string faction::save_info()$/;"	f	class:faction
save_info	item.cpp	/^std::string item::save_info()$/;"	f	class:item
save_info	mission.cpp	/^std::string mission::save_info()$/;"	f	class:mission
save_info	monster.cpp	/^std::string monster::save_info()$/;"	f	class:monster
save_info	npc.cpp	/^std::string npc::save_info()$/;"	f	class:npc
save_info	npc.h	/^ std::string save_info()$/;"	f	struct:npc_chatbin
save_info	npc.h	/^ std::string save_info()$/;"	f	struct:npc_combat_rules
save_info	npc.h	/^ std::string save_info()$/;"	f	struct:npc_opinion
save_info	player.cpp	/^std::string player::save_info()$/;"	f	class:player
save_info	pldata.h	/^ std::string save_info()$/;"	f	struct:player_activity
save_keymap	action.cpp	/^void game::save_keymap()$/;"	f	class:game
save_options	options.cpp	/^void save_options()$/;"	f
save_template	newcharacter.cpp	/^void save_template(player *u)$/;"	f
saven	map.cpp	/^void map::saven(overmap *om, unsigned const int turn, const int worldx, const int worldy, const int worldz,$/;"	f	class:map
saw_player_recently	npcmove.cpp	/^bool npc::saw_player_recently()$/;"	f	class:npc
say	npc.cpp	/^void npc::say(game *g, std::string line, ...)$/;"	f	class:npc
scan_new_items	npcmove.cpp	/^npc_action npc::scan_new_items(game *g, int target)$/;"	f	class:npc
scent	game.cpp	/^int& game::scent(int x, int y)$/;"	f	class:game
scent	player.h	/^ unsigned int scent;$/;"	m	class:player
scent_move	monmove.cpp	/^point monster::scent_move(game *g)$/;"	f	class:monster
science	monattack.cpp	/^void mattack::science(game *g, monster *z)	\/\/ I said SCIENCE again!$/;"	f	class:mattack
science_room	mapgen.cpp	/^void science_room(map *m, int x1, int y1, int x2, int y2, int rotate)$/;"	f
scissors	iuse.cpp	/^void iuse::scissors(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
scored_crit	melee.cpp	/^bool player::scored_crit(int target_dodge)$/;"	f	class:player
scrambler	iuse.cpp	/^void iuse::scrambler(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
scrambler_act	iuse.cpp	/^void iuse::scrambler_act(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
scrambler_blast	game.cpp	/^void game::scrambler_blast(int x, int y)$/;"	f	class:game
sealed	mapdata.h	/^ sealed,       \/\/ Can't 'e' to retrieve items here$/;"	e	enum:t_flag
season	calendar.h	/^  season_type season;$/;"	m	class:calendar
season_name	weather_data.h	/^std::string season_name[4] = {$/;"	v
season_type	weather.h	/^enum season_type {$/;"	g
second	calendar.h	/^  int second;$/;"	m	class:calendar
security	computer.h	/^ int security; \/\/ Difficulty of simply logging in$/;"	m	class:computer
security	computer.h	/^ int security;$/;"	m	struct:computer_option
see_cost	omdata.h	/^ unsigned char see_cost; \/\/ Affects how far the player can see in the overmap$/;"	m	struct:oter_t
seen	overmap.cpp	/^bool& overmap::seen(int x, int y, int z)$/;"	f	class:overmap
seen_cache	map.h	/^ bool seen_cache[MAPSIZE*SEEX][MAPSIZE*SEEY];$/;"	m	class:map
sees	map.cpp	/^bool map::sees(const int Fx, const int Fy, const int Tx, const int Ty,$/;"	f	class:map
sees_u	game.cpp	/^bool game::sees_u(int x, int y, int &t)$/;"	f	class:game
sel_cmd	veh_interact.h	/^    char sel_cmd;$/;"	m	class:veh_interact
sel_part	veh_interact.h	/^    int sel_part;$/;"	m	class:veh_interact
select_crafting_recipe	crafting.cpp	/^recipe* game::select_crafting_recipe()$/;"	f	class:game
serialize	picojson.h	/^  inline std::string value::serialize() const {$/;"	f	class:picojson::value
serialize	picojson.h	/^  template <typename Iter> void value::serialize(Iter oi) const {$/;"	f	class:picojson::value
serialize_str	picojson.h	/^  template <typename Iter> void serialize_str(const std::string& s, Iter oi) {$/;"	f	namespace:picojson
set_adjacent_overmaps	game.cpp	/^void game::set_adjacent_overmaps(bool from_scratch)$/;"	f	class:game
set_bool	picojson.h	/^    bool set_bool(bool b) {$/;"	f	class:picojson::default_parse_context
set_bool	picojson.h	/^    bool set_bool(bool) { return false; }$/;"	f	class:picojson::deny_parse_context
set_bool	picojson.h	/^    bool set_bool(bool) { return true; }$/;"	f	class:picojson::null_parse_context
set_description	newcharacter.cpp	/^int set_description(WINDOW* w, game* g, player *u, int &points)$/;"	f
set_dest	monmove.cpp	/^void monster::set_dest(int x, int y, int &t)$/;"	f	class:monster
set_destination	npcmove.cpp	/^void npc::set_destination(game *g)$/;"	f	class:npc
set_dirty	mapbuffer.cpp	/^void mapbuffer::set_dirty()$/;"	f	class:mapbuffer
set_engagement_all	npctalk.cpp	/^void talk_function::set_engagement_all(game *g, npc *p)$/;"	f	class:talk_function
set_engagement_close	npctalk.cpp	/^void talk_function::set_engagement_close(game *g, npc *p)$/;"	f	class:talk_function
set_engagement_hit	npctalk.cpp	/^void talk_function::set_engagement_hit(game *g, npc *p)$/;"	f	class:talk_function
set_engagement_none	npctalk.cpp	/^void talk_function::set_engagement_none(game *g, npc *p)$/;"	f	class:talk_function
set_engagement_weak	npctalk.cpp	/^void talk_function::set_engagement_weak(game *g, npc *p)$/;"	f	class:talk_function
set_escdelay	catacurse.cpp	/^void set_escdelay(int delay) { } \/\/PORTABILITY, DUMMY FUNCTION$/;"	f
set_flag	vehicle.h	/^    int set_flag( int flag ) { return flags |= flag; }$/;"	f	struct:vehicle_part
set_game	mapbuffer.cpp	/^void mapbuffer::set_game(game *g)$/;"	f	class:mapbuffer
set_last_error	picojson.h	/^  inline void set_last_error(const std::string& s) {$/;"	f	namespace:picojson
set_null	picojson.h	/^    bool set_null() { return false; }$/;"	f	class:picojson::deny_parse_context
set_null	picojson.h	/^    bool set_null() { return true; }$/;"	f	class:picojson::null_parse_context
set_null	picojson.h	/^    bool set_null() {$/;"	f	class:picojson::default_parse_context
set_number	picojson.h	/^    bool set_number(double f) {$/;"	f	class:picojson::default_parse_context
set_number	picojson.h	/^    bool set_number(double) { return false; }$/;"	f	class:picojson::deny_parse_context
set_number	picojson.h	/^    bool set_number(double) { return true; }$/;"	f	class:picojson::null_parse_context
set_population	settlement.cpp	/^void settlement::set_population()$/;"	f	class:settlement
set_science_room	mapgen.cpp	/^void set_science_room(map *m, int x1, int y1, bool faces_right, int turn)$/;"	f
set_security	computer.cpp	/^void computer::set_security(int Security)$/;"	f	class:computer
set_skills	newcharacter.cpp	/^int set_skills(WINDOW* w, game* g, player *u, int &points)$/;"	f
set_stats	newcharacter.cpp	/^int set_stats(WINDOW* w, game* g, player *u, int &points)$/;"	f
set_traits	newcharacter.cpp	/^int set_traits(WINDOW* w, game* g, player *u, int &points)$/;"	f
set_trap	iuse.cpp	/^void iuse::set_trap(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
settlement	settlement.cpp	/^settlement::settlement()$/;"	f	class:settlement
settlement	settlement.cpp	/^settlement::settlement(int mapx, int mapy)$/;"	f	class:settlement
settlement	settlement.h	/^struct settlement {$/;"	s
setup	defense.cpp	/^void defense_game::setup()$/;"	f	class:defense_game
setup	game.cpp	/^void game::setup()$/;"	f	class:game
setupDebug	debug.cpp	/^void setupDebug()$/;"	f
setvec	setvector.cpp	/^template <class T> void setvec(std::vector<T> &vec, ... )$/;"	f
setvector	setvector.cpp	/^void setvector(std::vector<int> &vec, ... )$/;"	f
setvector	setvector.cpp	/^void setvector(std::vector<items_location_and_chance> &vec, ... )$/;"	f
setvector	setvector.cpp	/^void setvector(std::vector<m_category> &vec, ... )$/;"	f
setvector	setvector.cpp	/^void setvector(std::vector<m_flag> &vec, ... )$/;"	f
setvector	setvector.cpp	/^void setvector(std::vector<mission_origin> &vec, ... )$/;"	f
setvector	setvector.cpp	/^void setvector(std::vector<mon_id> &vec, ... )$/;"	f
setvector	setvector.cpp	/^void setvector(std::vector<monster_trigger> &vec, ... )$/;"	f
setvector	setvector.cpp	/^void setvector(std::vector<pl_flag> &vec, ... )$/;"	f
setvector	setvector.cpp	/^void setvector(std::vector<std::string> &vec, ... )$/;"	f
setvector	setvector.cpp	/^void setvector(std::vector<style_move> &vec, ... )$/;"	f
sev	game.cpp	/^nc_color sev(int a)$/;"	f
sew	iuse.cpp	/^void iuse::sew(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
sewage	iuse.cpp	/^void iuse::sewage(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
sgn	enums.h	5;"	d
sgn	mapgen.cpp	12;"	d	file:
shadow	trapfunc.cpp	/^void trapfunc::shadow(game *g, int x, int y)$/;"	f	class:trapfunc
sharp	mapdata.h	/^ sharp,	       \/\/ May do minor damage to players\/monsters passing it$/;"	e	enum:t_flag
shelter	iexamine.cpp	/^void iexamine::shelter(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
shelter	iuse.cpp	/^void iuse::shelter(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
shift	map.cpp	/^void map::shift(game *g, const int wx, const int wy, const int wz, const int sx, const int sy)$/;"	f	class:map
shift	monster.cpp	/^void monster::shift(int sx, int sy)$/;"	f	class:monster
shift	npc.cpp	/^void npc::shift(int sx, int sy)$/;"	f	class:npc
shockstorm	monattack.cpp	/^void mattack::shockstorm(game *g, monster *z)$/;"	f	class:mattack
shoot	map.cpp	/^void map::shoot(game *g, const int x, const int y, int &dam,$/;"	f	class:map
shoot_monster	ranged.cpp	/^void shoot_monster(game *g, player &p, monster &mon, int &dam, double goodhit, item* weapon)$/;"	f
shoot_player	ranged.cpp	/^void shoot_player(game *g, player &p, player *h, int &dam, double goodhit)$/;"	f
shop	overmap.cpp	/^oter_id shop(int dir)$/;"	f
short_description	npc.cpp	/^std::string npc::short_description()$/;"	f	class:npc
shotgun	trapfunc.cpp	/^void trapfunc::shotgun(game *g, int x, int y)$/;"	f	class:trapfunc
shotgun	trapfunc.cpp	/^void trapfuncm::shotgun(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
show_options	options.cpp	/^void game::show_options()$/;"	f	class:game
shriek	monattack.cpp	/^void mattack::shriek(game *g, monster *z)$/;"	f	class:mattack
shrub_blueberry	iexamine.cpp	/^void iexamine::shrub_blueberry(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
shrub_wildveggies	iexamine.cpp	/^void iexamine::shrub_wildveggies(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
shutdown_terminal	computer.cpp	/^void computer::shutdown_terminal()$/;"	f	class:computer
sight_impaired	player.cpp	/^bool player::sight_impaired()$/;"	f	class:player
sight_penalty	weather.h	/^ int sight_penalty; \/\/ Penalty to max sight range$/;"	m	struct:weather_datum
sight_range	player.cpp	/^int player::sight_range(int light_level)$/;"	f	class:player
silo_rooms	mapgen.cpp	/^void silo_rooms(map *m)$/;"	f
sinkhole	trap.h	/^ void sinkhole	(game *g, monster *z, int x, int y) { };$/;"	f	struct:trapfuncm
sinkhole	trapfunc.cpp	/^void trapfunc::sinkhole(game *g, int x, int y)$/;"	f	class:trapfunc
size	faction.h	/^ int size;	\/\/ How big is our sphere of influence?$/;"	m	struct:faction
size	inventory.cpp	/^int inventory::size() const$/;"	f	class:inventory
size	mapbuffer.cpp	/^int mapbuffer::size()$/;"	f	class:mapbuffer
size	mtype.h	/^ m_size size;$/;"	m	struct:mtype
size	settlement.h	/^ int size;$/;"	m	struct:settlement
size	veh_type.h	/^        int size;       \/\/ fuel tank, trunk$/;"	m	union:vpart_info::__anon10
sk_archery	skill.h	/^ sk_throw, sk_gun, sk_pistol, sk_shotgun, sk_smg, sk_rifle, sk_archery,$/;"	e	enum:skill
sk_barter	skill.h	/^ sk_speech, sk_barter,$/;"	e	enum:skill
sk_bashing	skill.h	/^ sk_dodge, sk_melee, sk_unarmed, sk_bashing, sk_cutting, sk_stabbing,$/;"	e	enum:skill
sk_carpentry	skill.h	/^ sk_mechanics, sk_electronics, sk_cooking, sk_tailor, sk_carpentry,$/;"	e	enum:skill
sk_computer	skill.h	/^ sk_computer, sk_survival, sk_traps, sk_swimming, sk_driving,$/;"	e	enum:skill
sk_cooking	skill.h	/^ sk_mechanics, sk_electronics, sk_cooking, sk_tailor, sk_carpentry,$/;"	e	enum:skill
sk_cutting	skill.h	/^ sk_dodge, sk_melee, sk_unarmed, sk_bashing, sk_cutting, sk_stabbing,$/;"	e	enum:skill
sk_dodge	mtype.h	/^ unsigned char sk_dodge;	\/\/ Dodge skill; should be 0 to 5$/;"	m	struct:mtype
sk_dodge	skill.h	/^ sk_dodge, sk_melee, sk_unarmed, sk_bashing, sk_cutting, sk_stabbing,$/;"	e	enum:skill
sk_driving	skill.h	/^ sk_computer, sk_survival, sk_traps, sk_swimming, sk_driving,$/;"	e	enum:skill
sk_electronics	skill.h	/^ sk_mechanics, sk_electronics, sk_cooking, sk_tailor, sk_carpentry,$/;"	e	enum:skill
sk_firstaid	skill.h	/^ sk_firstaid,$/;"	e	enum:skill
sk_gun	skill.h	/^ sk_throw, sk_gun, sk_pistol, sk_shotgun, sk_smg, sk_rifle, sk_archery,$/;"	e	enum:skill
sk_launcher	skill.h	/^  sk_launcher,$/;"	e	enum:skill
sk_mechanics	skill.h	/^ sk_mechanics, sk_electronics, sk_cooking, sk_tailor, sk_carpentry,$/;"	e	enum:skill
sk_melee	skill.h	/^ sk_dodge, sk_melee, sk_unarmed, sk_bashing, sk_cutting, sk_stabbing,$/;"	e	enum:skill
sk_null	skill.h	/^ sk_null = 0,$/;"	e	enum:skill
sk_pistol	skill.h	/^ sk_throw, sk_gun, sk_pistol, sk_shotgun, sk_smg, sk_rifle, sk_archery,$/;"	e	enum:skill
sk_primary	crafting.h	/^  Skill *sk_primary;$/;"	m	struct:recipe
sk_rifle	skill.h	/^ sk_throw, sk_gun, sk_pistol, sk_shotgun, sk_smg, sk_rifle, sk_archery,$/;"	e	enum:skill
sk_secondary	crafting.h	/^  Skill *sk_secondary;$/;"	m	struct:recipe
sk_shotgun	skill.h	/^ sk_throw, sk_gun, sk_pistol, sk_shotgun, sk_smg, sk_rifle, sk_archery,$/;"	e	enum:skill
sk_smg	skill.h	/^ sk_throw, sk_gun, sk_pistol, sk_shotgun, sk_smg, sk_rifle, sk_archery,$/;"	e	enum:skill
sk_speech	skill.h	/^ sk_speech, sk_barter,$/;"	e	enum:skill
sk_stabbing	skill.h	/^ sk_dodge, sk_melee, sk_unarmed, sk_bashing, sk_cutting, sk_stabbing,$/;"	e	enum:skill
sk_survival	skill.h	/^ sk_computer, sk_survival, sk_traps, sk_swimming, sk_driving,$/;"	e	enum:skill
sk_swimming	skill.h	/^ sk_computer, sk_survival, sk_traps, sk_swimming, sk_driving,$/;"	e	enum:skill
sk_tailor	skill.h	/^ sk_mechanics, sk_electronics, sk_cooking, sk_tailor, sk_carpentry,$/;"	e	enum:skill
sk_throw	skill.h	/^ sk_throw, sk_gun, sk_pistol, sk_shotgun, sk_smg, sk_rifle, sk_archery,$/;"	e	enum:skill
sk_traps	skill.h	/^ sk_computer, sk_survival, sk_traps, sk_swimming, sk_driving,$/;"	e	enum:skill
sk_unarmed	skill.h	/^ sk_dodge, sk_melee, sk_unarmed, sk_bashing, sk_cutting, sk_stabbing,$/;"	e	enum:skill
skexercise	player.h	/^ int skexercise[num_skill_types];$/;"	m	class:player
skidding	vehicle.h	/^    bool skidding;      \/\/ skidding mode$/;"	m	class:vehicle
skill	npc.h	/^ Skill *skill;$/;"	m	struct:npc_favor
skill	skill.cpp	/^Skill* Skill::skill(size_t id) {$/;"	f	class:Skill
skill	skill.cpp	/^Skill* Skill::skill(std::string ident) {$/;"	f	class:Skill
skill	skill.h	/^enum skill {$/;"	g
skillLevel	player.cpp	/^SkillLevel& player::skillLevel(Skill *_skill) {$/;"	f	class:player
skillLevel	player.cpp	/^SkillLevel& player::skillLevel(size_t id) {$/;"	f	class:player
skillLevel	player.cpp	/^SkillLevel& player::skillLevel(std::string ident) {$/;"	f	class:player
skill_count	skill.cpp	/^size_t Skill::skill_count() {$/;"	f	class:Skill
skill_description	skill.cpp	/^std::string skill_description(int sk) {$/;"	f
skill_name	skill.cpp	/^std::string skill_name(int sk) {$/;"	f
skill_used	itype.h	/^ Skill *skill_used;$/;"	m	struct:it_gun
skills	skill.h	/^  static std::vector<Skill*> skills;$/;"	m	class:Skill
skills_offered_to	npc.cpp	/^std::vector<skill> npc::skills_offered_to(player *p)$/;"	f	class:npc
skip_ws	picojson.h	/^    void skip_ws() {$/;"	f	class:picojson::input
sklearn	player.h	/^ bool sklearn[num_skill_types];$/;"	m	class:player
sklevel	player.h	/^ int sklevel[num_skill_types];$/;"	m	class:player
sktrain	player.h	/^ int sktrain[num_skill_types];$/;"	m	class:player
sleep	gamemode.h	/^ bool sleep;		\/\/ Do we need to sleep?$/;"	m	struct:defense_game
sleep	iuse.cpp	/^void iuse::sleep(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
slope_of	line.cpp	/^double slope_of(std::vector<point> line)$/;"	f
slot_machine	iexamine.cpp	/^void iexamine::slot_machine(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
sm	map.h	/^ float sm[MAPSIZE*SEEX][MAPSIZE*SEEY];$/;"	m	class:map
smash	game.cpp	/^void game::smash()$/;"	f	class:game
smg	monattack.cpp	/^void mattack::smg(game *g, monster *z)$/;"	f	class:mattack
smokebomb	iuse.cpp	/^void iuse::smokebomb(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
smokebomb_act	iuse.cpp	/^void iuse::smokebomb_act(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
smokeburst	mondeath.cpp	/^void mdeath::smokeburst(game *g, monster *z)$/;"	f	class:mdeath
smokecloud	monattack.cpp	/^void mattack::smokecloud(game *g, monster *z)$/;"	f	class:mattack
smx	vehicle.h	/^    int smx, smy;   \/\/ submap coords. WARNING: must ALWAYS correspond to sumbap coords in grid, or i'm out$/;"	m	class:vehicle
smy	vehicle.h	/^    int smx, smy;   \/\/ submap coords. WARNING: must ALWAYS correspond to sumbap coords in grid, or i'm out$/;"	m	class:vehicle
snake	trapfunc.cpp	/^void trapfunc::snake(game *g, int x, int y)$/;"	f	class:trapfunc
snake	trapfunc.cpp	/^void trapfuncm::snake(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
snare	trap.h	/^ void snare		(game *g, int x, int y) { };$/;"	f	struct:trapfunc
snare	trap.h	/^ void snare	(game *g, monster *z, int x, int y) { };$/;"	f	struct:trapfuncm
snare_heavy	trapfunc.cpp	/^void trapfunc::snare_heavy(game *g, int x, int y)$/;"	f	class:trapfunc
snare_heavy	trapfunc.cpp	/^void trapfuncm::snare_heavy(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
snare_light	trapfunc.cpp	/^void trapfunc::snare_light(game *g, int x, int y)$/;"	f	class:trapfunc
snare_light	trapfunc.cpp	/^void trapfuncm::snare_light(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
sneak	facdata.h	/^ int sneak;$/;"	m	struct:faction_value_datum
sneak	faction.h	/^ int strength, sneak, crime, cult, good;	\/\/ Defining values$/;"	m	struct:faction
snow	weather.h	/^ void snow		(game *) {};$/;"	f	struct:weather_effect
snowstorm	weather.h	/^ void snowstorm		(game *) {};$/;"	f	struct:weather_effect
software_type	itype.h	/^enum software_type {$/;"	g
solar_power	vehicle.cpp	/^int vehicle::solar_power ()$/;"	f	class:vehicle
sort_inv	player.cpp	/^void player::sort_inv()$/;"	f	class:player
sound	game.cpp	/^void game::sound(int x, int y, int vol, std::string description)$/;"	f	class:game
sound_move	monmove.cpp	/^point monster::sound_move(game *g)$/;"	f	class:monster
sp_attack	mtype.h	/^ void (mattack::*sp_attack)(game *, monster *); \/\/ This monster's special attack$/;"	m	struct:mtype
sp_freq	mtype.h	/^ unsigned char sp_freq;			\/\/ How long sp_attack takes to charge$/;"	m	struct:mtype
sp_timeout	monster.h	/^ int sp_timeout;$/;"	m	class:monster
spawn	monster.cpp	/^void monster::spawn(int x, int y)$/;"	f	class:monster
spawn_at	npc.cpp	/^void npc::spawn_at(overmap *o, int x, int y)$/;"	f	class:npc
spawn_item	map.cpp	/^void map::spawn_item(const int x, const int y, itype* type, const int birthday, const int quantity, const int charges)$/;"	f	class:map
spawn_mon	game.cpp	/^void game::spawn_mon(int shiftx, int shifty)$/;"	f	class:game
spawn_monsters	map.cpp	/^void map::spawn_monsters(game *g)$/;"	f	class:map
spawn_point	mapdata.h	/^ spawn_point(mon_id T = mon_null, int C = 0, int X = -1, int Y = -1,$/;"	f	struct:spawn_point
spawn_point	mapdata.h	/^struct spawn_point {$/;"	s
spawn_wave	defense.cpp	/^void defense_game::spawn_wave(game *g)$/;"	f	class:defense_game
spawn_wave_monster	defense.cpp	/^void defense_game::spawn_wave_monster(game *g, mtype *type)$/;"	f	class:defense_game
spawnmapx	monster.h	/^ int spawnmapx, spawnmapy, spawnposx, spawnposy;$/;"	m	class:monster
spawnmapy	monster.h	/^ int spawnmapx, spawnmapy, spawnposx, spawnposy;$/;"	m	class:monster
spawnposx	monster.h	/^ int spawnmapx, spawnmapy, spawnposx, spawnposy;$/;"	m	class:monster
spawnposy	monster.h	/^ int spawnmapx, spawnmapy, spawnposx, spawnposy;$/;"	m	class:monster
spawns	mapdata.h	/^ std::vector<spawn_point> spawns;$/;"	m	struct:submap
special_attack	player.h	/^ special_attack() { bash = 0; cut = 0; stab = 0; };$/;"	f	struct:special_attack
special_attack	player.h	/^struct special_attack$/;"	s
special_game	gamemode.h	/^struct special_game$/;"	s
special_game_id	gamemode.h	/^enum special_game_id {$/;"	g
special_game_name	gamemode.cpp	/^std::string special_game_name(special_game_id id)$/;"	f
special_reward	mission.h	/^ npc_favor special_reward; \/\/ If we have a special gift, not cash value$/;"	m	struct:mission_type
special_symbol	output.cpp	/^long special_symbol (long sym)$/;"	f
special_talk	npctalk.cpp	/^talk_topic special_talk(char ch)$/;"	f
special_wave_message	defense.cpp	/^std::string defense_game::special_wave_message(std::string name)$/;"	f	class:defense_game
specials	gamemode.h	/^ bool specials;$/;"	m	struct:defense_game
species	mtype.h	/^ monster_species species;$/;"	m	struct:mtype
species_fungus	mtype.h	/^species_fungus,$/;"	e	enum:monster_species
species_hallu	mtype.h	/^species_hallu,$/;"	e	enum:monster_species
species_insect	mtype.h	/^species_insect,$/;"	e	enum:monster_species
species_mammal	mtype.h	/^species_mammal,$/;"	e	enum:monster_species
species_nether	mtype.h	/^species_nether,$/;"	e	enum:monster_species
species_none	mtype.h	/^species_none = 0,$/;"	e	enum:monster_species
species_plant	mtype.h	/^species_plant,$/;"	e	enum:monster_species
species_robot	mtype.h	/^species_robot,$/;"	e	enum:monster_species
species_worm	mtype.h	/^species_worm,$/;"	e	enum:monster_species
species_zombie	mtype.h	/^species_zombie,$/;"	e	enum:monster_species
speed	monster.h	/^ int moves, speed;$/;"	m	class:monster
speed	mtype.h	/^ unsigned int  speed;		\/\/ Speed; human = 100$/;"	m	struct:mtype
speed_estimate	npc.cpp	/^int npc::speed_estimate(int speed)$/;"	f	class:npc
spiders	gamemode.h	/^ bool spiders;$/;"	m	struct:defense_game
spit_sap	monattack.cpp	/^void mattack::spit_sap(game *g, monster *z)$/;"	f	class:mattack
splatter	ranged.cpp	/^void splatter(game *g, std::vector<point> trajectory, int dam, monster* mon)$/;"	f
spoils	itype.h	/^    unsigned char spoils;	\/\/ How long it takes to spoil (hours \/ 600 turns)$/;"	m	struct:it_comest
spray_can	iuse.cpp	/^void iuse::spray_can(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
square	mapgen.cpp	/^void square(map *m, ter_id type, int x1, int y1, int x2, int y2)$/;"	f
stab	player.h	/^ int stab;$/;"	m	struct:special_attack
stack_at	inventory.cpp	/^std::vector<item>& inventory::stack_at(int i)$/;"	f	class:inventory
stacks_with	item.cpp	/^bool item::stacks_with(item rhs)$/;"	f	class:item
stages	construction.h	/^ std::vector<construction_stage> stages;$/;"	m	struct:constructable
standard	mission.h	/^ void standard		(game *, mission *){}; \/\/ Nothing special happens$/;"	f	struct:mission_end
standard	mission.h	/^ void standard		(game *, mission *){}; \/\/ Nothing special happens$/;"	f	struct:mission_fail
standard	mission_start.cpp	/^void mission_start::standard(game *g, mission *miss)$/;"	f	class:mission_start
standard_itype_ids	itypedef.cpp	/^std::vector<std::string> standard_itype_ids;$/;"	v
standardize	calendar.cpp	/^void calendar::standardize()$/;"	f	class:calendar
stare	monattack.cpp	/^void mattack::stare(game *g, monster *z)$/;"	f	class:mattack
start	mission.h	/^ void (mission_start::*start)(game *g, mission *);$/;"	m	struct:mission_type
start_color	catacurse.cpp	/^int start_color(void)$/;"	f
start_game	game.cpp	/^void game::start_game()$/;"	f	class:game
start_mugging	npctalk.cpp	/^void talk_function::start_mugging(game *g, npc *p)$/;"	f	class:talk_function
start_trade	npctalk.cpp	/^void talk_function::start_trade(game *g, npc *p)$/;"	f	class:talk_function
start_training	npctalk.cpp	/^void talk_function::start_training(game *g, npc *p)$/;"	f	class:talk_function
starting_clothes	npc.cpp	/^std::vector<item> starting_clothes(npc_class type, bool male, game *g)$/;"	f
starting_inv	npc.cpp	/^std::vector<item> starting_inv(npc *me, npc_class type, game *g)$/;"	f
starting_weapon	npc.cpp	/^void npc::starting_weapon(game *g)$/;"	f	class:npc
stdscr	catacurse.h	103;"	d
step	mission.h	/^ int step;		\/\/ How much have we completed?$/;"	m	struct:mission
step_in_field	field.cpp	/^void map::step_in_field(int x, int y, game *g)$/;"	f	class:map
steps	tileray.h	/^    int steps;      \/\/ how many steps we advanced so far$/;"	m	class:tileray
stim	itype.h	/^    signed char stim;$/;"	m	struct:it_comest
stim	player.h	/^ int stim, pain, pkill, radiation;$/;"	m	class:player
stop	vehicle.cpp	/^void vehicle::stop ()$/;"	f	class:vehicle
storage	artifactdata.h	/^ int storage;$/;"	m	struct:artifact_armor_form_datum
storage	itype.h	/^ unsigned char storage;$/;"	m	struct:it_armor
str_cur	player.h	/^ int str_cur, dex_cur, int_cur, per_cur;$/;"	m	class:player
str_max	player.h	/^ int str_max, dex_max, int_max, per_max;$/;"	m	class:player
strain	vehicle.cpp	/^float vehicle::strain ()$/;"	f	class:vehicle
strength	facdata.h	/^ int strength;$/;"	m	struct:faction_value_datum
strength	faction.h	/^ int strength, sneak, crime, cult, good;	\/\/ Defining values$/;"	m	struct:faction
strength	overmap.h	/^ int strength;$/;"	m	struct:radio_tower
string_	picojson.h	/^      std::string* string_;$/;"	m	union:picojson::value::__anon7
string_input_popup	output.cpp	/^std::string string_input_popup(std::string title, int max_length, std::string input)$/;"	f
string_type	picojson.h	/^    string_type,$/;"	e	enum:picojson::__anon6
stumble	melee.cpp	/^int stumble(player &u)$/;"	f
stumble	monmove.cpp	/^void monster::stumble(game *g, bool moved)$/;"	f	class:monster
style	gamemode.h	/^ defense_style style;	\/\/ What type of game is it?$/;"	m	struct:defense_game
style_data	item.cpp	/^style_move item::style_data(technique_id tech)$/;"	f	class:item
style_move	itype.h	/^ style_move()$/;"	f	struct:style_move
style_move	itype.h	/^ style_move(std::string N, technique_id T, int L) :$/;"	f	struct:style_move
style_move	itype.h	/^struct style_move$/;"	s
style_selected	player.h	/^ itype_id style_selected;$/;"	m	class:player
styles	player.h	/^ std::vector<itype_id> styles;$/;"	m	class:player
styles_offered_to	npc.cpp	/^std::vector<itype_id> npc::styles_offered_to(player *p)$/;"	f	class:npc
submap	mapdata.h	/^struct submap {$/;"	s
submap_list	mapbuffer.h	/^  std::list<submap*> submap_list;$/;"	m	class:mapbuffer
submaps	mapbuffer.h	/^  std::map<tripoint, submap*, pointcomp> submaps;$/;"	m	class:mapbuffer
subspace	gamemode.h	/^ bool subspace;$/;"	m	struct:defense_game
success	dialogue.h	/^ talk_topic success;$/;"	m	struct:talk_response
success	picojson.h	/^static bool success = true;$/;"	v
suffer	player.cpp	/^void player::suffer(game *g)$/;"	f	class:player
sunlight	calendar.cpp	/^int calendar::sunlight() const$/;"	f	class:calendar
sunrise	calendar.cpp	/^calendar calendar::sunrise() const$/;"	f	class:calendar
sunset	calendar.cpp	/^calendar calendar::sunset() const$/;"	f	class:calendar
supports_roof	mapdata.h	/^ supports_roof,\/\/ Used as a boundary for roof construction$/;"	e	enum:t_flag
swim_speed	player.cpp	/^int player::swim_speed()$/;"	f	class:player
swimmable	mapdata.h	/^ swimmable,    \/\/ You (and monsters) swim here$/;"	e	enum:t_flag
swtype	itype.h	/^ software_type swtype;$/;"	m	struct:it_software
sx	tileray.cpp	/^static const int sx[4] = { 1, -1, -1, 1 };$/;"	v	file:
sy	tileray.cpp	/^static const int sy[4] = { 1, 1, -1, -1 };$/;"	v	file:
sym	artifactdata.h	/^ char sym;$/;"	m	struct:artifact_tool_form_datum
sym	itype.h	/^ char sym;		\/\/ Symbol on the map$/;"	m	struct:itype
sym	mapdata.h	/^ char sym;$/;"	m	struct:field_t
sym	mapdata.h	/^ long sym;$/;"	m	struct:ter_t
sym	mtype.h	/^ long sym;	\/\/ Symbol on the map$/;"	m	struct:mtype
sym	omdata.h	/^ long sym;	\/\/ This is a long, so we can support curses linedrawing$/;"	m	struct:oter_t
sym	trap.h	/^ long sym;$/;"	m	struct:trap
sym	veh_type.h	/^    long sym;               \/\/ symbol of part as if it's looking north$/;"	m	struct:vpart_info
sym_broken	veh_type.h	/^    char sym_broken;        \/\/ symbol of broken part as if it's looking north$/;"	m	struct:vpart_info
symbol	item.cpp	/^char item::symbol()$/;"	f	class:item
symbol	monster.cpp	/^char monster::symbol()$/;"	f	class:monster
szDirectory	catacurse.cpp	/^char szDirectory[MAX_PATH] = "";$/;"	v
szWindowClass	catacurse.cpp	/^const WCHAR *szWindowClass = (L"CataCurseWindow");    \/\/Class name :D$/;"	v
t_armchair	mapdata.h	/^t_sink, t_oven, t_woodstove, t_bathtub, t_chair, t_armchair, t_sofa, t_cupboard, t_trashcan, t_desk,$/;"	e	enum:ter_id
t_ash	mapdata.h	/^t_rock_floor, t_rubble, t_ash, t_metal, t_wreckage,$/;"	e	enum:ter_id
t_backboard	mapdata.h	/^t_sandbox, t_slide, t_monkey_bars, t_backboard,$/;"	e	enum:ter_id
t_barndoor	mapdata.h	/^t_console_broken, t_console, t_gates_mech_control, t_barndoor, t_palisade_pulley,$/;"	e	enum:ter_id
t_bars	mapdata.h	/^t_bars,$/;"	e	enum:ter_id
t_bathtub	mapdata.h	/^t_sink, t_oven, t_woodstove, t_bathtub, t_chair, t_armchair, t_sofa, t_cupboard, t_trashcan, t_desk,$/;"	e	enum:ter_id
t_bed	mapdata.h	/^t_bed, t_toilet, t_makeshift_bed,$/;"	e	enum:ter_id
t_bench	mapdata.h	/^t_bench, t_table, t_pool_table,$/;"	e	enum:ter_id
t_bookcase	mapdata.h	/^t_rack, t_bookcase,$/;"	e	enum:ter_id
t_bridge	mapdata.h	/^t_bridge,$/;"	e	enum:ter_id
t_bulletin	mapdata.h	/^t_bulletin,$/;"	e	enum:ter_id
t_canvas_door	mapdata.h	/^t_canvas_wall, t_canvas_door, t_canvas_door_o, t_groundsheet, t_fema_groundsheet,$/;"	e	enum:ter_id
t_canvas_door_o	mapdata.h	/^t_canvas_wall, t_canvas_door, t_canvas_door_o, t_groundsheet, t_fema_groundsheet,$/;"	e	enum:ter_id
t_canvas_wall	mapdata.h	/^t_canvas_wall, t_canvas_door, t_canvas_door_o, t_groundsheet, t_fema_groundsheet,$/;"	e	enum:ter_id
t_card_military	mapdata.h	/^t_card_science, t_card_military, t_card_reader_broken, t_slot_machine,$/;"	e	enum:ter_id
t_card_reader_broken	mapdata.h	/^t_card_science, t_card_military, t_card_reader_broken, t_slot_machine,$/;"	e	enum:ter_id
t_card_science	mapdata.h	/^t_card_science, t_card_military, t_card_reader_broken, t_slot_machine,$/;"	e	enum:ter_id
t_centrifuge	mapdata.h	/^t_centrifuge,$/;"	e	enum:ter_id
t_chainfence_h	mapdata.h	/^t_fence_v, t_fence_h, t_chainfence_v, t_chainfence_h, t_chainfence_posts,$/;"	e	enum:ter_id
t_chainfence_posts	mapdata.h	/^t_fence_v, t_fence_h, t_chainfence_v, t_chainfence_h, t_chainfence_posts,$/;"	e	enum:ter_id
t_chainfence_v	mapdata.h	/^t_fence_v, t_fence_h, t_chainfence_v, t_chainfence_h, t_chainfence_posts,$/;"	e	enum:ter_id
t_chaingate_c	mapdata.h	/^t_chaingate_l, t_fencegate_c, t_fencegate_o, t_chaingate_c, t_chaingate_o, t_door_boarded,$/;"	e	enum:ter_id
t_chaingate_l	mapdata.h	/^t_chaingate_l, t_fencegate_c, t_fencegate_o, t_chaingate_c, t_chaingate_o, t_door_boarded,$/;"	e	enum:ter_id
t_chaingate_o	mapdata.h	/^t_chaingate_l, t_fencegate_c, t_fencegate_o, t_chaingate_c, t_chaingate_o, t_door_boarded,$/;"	e	enum:ter_id
t_chair	mapdata.h	/^t_sink, t_oven, t_woodstove, t_bathtub, t_chair, t_armchair, t_sofa, t_cupboard, t_trashcan, t_desk,$/;"	e	enum:ter_id
t_column	mapdata.h	/^t_column,$/;"	e	enum:ter_id
t_concrete_h	mapdata.h	/^t_wall_v, t_wall_h, t_concrete_v, t_concrete_h,$/;"	e	enum:ter_id
t_concrete_v	mapdata.h	/^t_wall_v, t_wall_h, t_concrete_v, t_concrete_h,$/;"	e	enum:ter_id
t_console	mapdata.h	/^t_console_broken, t_console, t_gates_mech_control, t_barndoor, t_palisade_pulley,$/;"	e	enum:ter_id
t_console_broken	mapdata.h	/^t_console_broken, t_console, t_gates_mech_control, t_barndoor, t_palisade_pulley,$/;"	e	enum:ter_id
t_counter	mapdata.h	/^t_counter,$/;"	e	enum:ter_id
t_crate_c	mapdata.h	/^t_vat, t_crate_c, t_crate_o,$/;"	e	enum:ter_id
t_crate_o	mapdata.h	/^t_vat, t_crate_c, t_crate_o,$/;"	e	enum:ter_id
t_cupboard	mapdata.h	/^t_sink, t_oven, t_woodstove, t_bathtub, t_chair, t_armchair, t_sofa, t_cupboard, t_trashcan, t_desk,$/;"	e	enum:ter_id
t_curtains	mapdata.h	/^t_recycler, t_window, t_window_taped, t_window_domestic, t_window_domestic_taped, t_window_open, t_curtains,$/;"	e	enum:ter_id
t_desk	mapdata.h	/^t_sink, t_oven, t_woodstove, t_bathtub, t_chair, t_armchair, t_sofa, t_cupboard, t_trashcan, t_desk,$/;"	e	enum:ter_id
t_dirt	mapdata.h	/^t_dirt, t_sand, t_dirtmound, t_pit_shallow, t_pit,$/;"	e	enum:ter_id
t_dirtfloor	mapdata.h	/^t_dirtfloor,\/\/Dirt floor(Has roof)$/;"	e	enum:ter_id
t_dirtmound	mapdata.h	/^t_dirt, t_sand, t_dirtmound, t_pit_shallow, t_pit,$/;"	e	enum:ter_id
t_door_b	mapdata.h	/^t_door_c, t_door_b, t_door_o, t_door_locked, t_door_locked_alarm, t_door_frame,$/;"	e	enum:ter_id
t_door_boarded	mapdata.h	/^t_chaingate_l, t_fencegate_c, t_fencegate_o, t_chaingate_c, t_chaingate_o, t_door_boarded,$/;"	e	enum:ter_id
t_door_c	mapdata.h	/^t_door_c, t_door_b, t_door_o, t_door_locked, t_door_locked_alarm, t_door_frame,$/;"	e	enum:ter_id
t_door_frame	mapdata.h	/^t_door_c, t_door_b, t_door_o, t_door_locked, t_door_locked_alarm, t_door_frame,$/;"	e	enum:ter_id
t_door_glass_c	mapdata.h	/^t_door_glass_c, t_door_glass_o,$/;"	e	enum:ter_id
t_door_glass_o	mapdata.h	/^t_door_glass_c, t_door_glass_o,$/;"	e	enum:ter_id
t_door_locked	mapdata.h	/^t_door_c, t_door_b, t_door_o, t_door_locked, t_door_locked_alarm, t_door_frame,$/;"	e	enum:ter_id
t_door_locked_alarm	mapdata.h	/^t_door_c, t_door_b, t_door_o, t_door_locked, t_door_locked_alarm, t_door_frame,$/;"	e	enum:ter_id
t_door_metal_c	mapdata.h	/^t_door_metal_c, t_door_metal_o, t_door_metal_locked,$/;"	e	enum:ter_id
t_door_metal_locked	mapdata.h	/^t_door_metal_c, t_door_metal_o, t_door_metal_locked,$/;"	e	enum:ter_id
t_door_metal_o	mapdata.h	/^t_door_metal_c, t_door_metal_o, t_door_metal_locked,$/;"	e	enum:ter_id
t_door_o	mapdata.h	/^t_door_c, t_door_b, t_door_o, t_door_locked, t_door_locked_alarm, t_door_frame,$/;"	e	enum:ter_id
t_dresser	mapdata.h	/^t_fridge, t_glass_fridge, t_dresser, t_locker,$/;"	e	enum:ter_id
t_dumpster	mapdata.h	/^t_dumpster,$/;"	e	enum:ter_id
t_elevator	mapdata.h	/^ t_elevator_control, t_elevator_control_off, t_elevator, t_pedestal_wyrm,$/;"	e	enum:ter_id
t_elevator_control	mapdata.h	/^ t_elevator_control, t_elevator_control_off, t_elevator, t_pedestal_wyrm,$/;"	e	enum:ter_id
t_elevator_control_off	mapdata.h	/^ t_elevator_control, t_elevator_control_off, t_elevator, t_pedestal_wyrm,$/;"	e	enum:ter_id
t_emergency_light	mapdata.h	/^t_skylight, t_emergency_light_flicker, t_emergency_light,$/;"	e	enum:ter_id
t_emergency_light_flicker	mapdata.h	/^t_skylight, t_emergency_light_flicker, t_emergency_light,$/;"	e	enum:ter_id
t_fault	mapdata.h	/^t_rock, t_fault,$/;"	e	enum:ter_id
t_fema_groundsheet	mapdata.h	/^t_canvas_wall, t_canvas_door, t_canvas_door_o, t_groundsheet, t_fema_groundsheet,$/;"	e	enum:ter_id
t_fence_barbed	mapdata.h	/^t_fence_post, t_fence_wire, t_fence_barbed, t_fence_rope,$/;"	e	enum:ter_id
t_fence_h	mapdata.h	/^t_fence_v, t_fence_h, t_chainfence_v, t_chainfence_h, t_chainfence_posts,$/;"	e	enum:ter_id
t_fence_post	mapdata.h	/^t_fence_post, t_fence_wire, t_fence_barbed, t_fence_rope,$/;"	e	enum:ter_id
t_fence_rope	mapdata.h	/^t_fence_post, t_fence_wire, t_fence_barbed, t_fence_rope,$/;"	e	enum:ter_id
t_fence_v	mapdata.h	/^t_fence_v, t_fence_h, t_chainfence_v, t_chainfence_h, t_chainfence_posts,$/;"	e	enum:ter_id
t_fence_wire	mapdata.h	/^t_fence_post, t_fence_wire, t_fence_barbed, t_fence_rope,$/;"	e	enum:ter_id
t_fencegate_c	mapdata.h	/^t_chaingate_l, t_fencegate_c, t_fencegate_o, t_chaingate_c, t_chaingate_o, t_door_boarded,$/;"	e	enum:ter_id
t_fencegate_o	mapdata.h	/^t_chaingate_l, t_fencegate_c, t_fencegate_o, t_chaingate_c, t_chaingate_o, t_door_boarded,$/;"	e	enum:ter_id
t_flag	mapdata.h	/^enum t_flag {$/;"	g
t_floor	mapdata.h	/^t_floor,$/;"	e	enum:ter_id
t_floor_blue	mapdata.h	/^t_rock_red, t_rock_green, t_rock_blue, t_floor_red, t_floor_green, t_floor_blue,$/;"	e	enum:ter_id
t_floor_green	mapdata.h	/^t_rock_red, t_rock_green, t_rock_blue, t_floor_red, t_floor_green, t_floor_blue,$/;"	e	enum:ter_id
t_floor_red	mapdata.h	/^t_rock_red, t_rock_green, t_rock_blue, t_floor_red, t_floor_green, t_floor_blue,$/;"	e	enum:ter_id
t_floor_wax	mapdata.h	/^t_wax, t_floor_wax,$/;"	e	enum:ter_id
t_fridge	mapdata.h	/^t_fridge, t_glass_fridge, t_dresser, t_locker,$/;"	e	enum:ter_id
t_fungus	mapdata.h	/^t_marloss, t_fungus, t_tree_fungal,$/;"	e	enum:ter_id
t_gas_pump	mapdata.h	/^t_gas_pump, t_gas_pump_smashed, t_gas_pump_empty,$/;"	e	enum:ter_id
t_gas_pump_empty	mapdata.h	/^t_gas_pump, t_gas_pump_smashed, t_gas_pump_empty,$/;"	e	enum:ter_id
t_gas_pump_smashed	mapdata.h	/^t_gas_pump, t_gas_pump_smashed, t_gas_pump_empty,$/;"	e	enum:ter_id
t_gates_mech_control	mapdata.h	/^t_console_broken, t_console, t_gates_mech_control, t_barndoor, t_palisade_pulley,$/;"	e	enum:ter_id
t_glass_fridge	mapdata.h	/^t_fridge, t_glass_fridge, t_dresser, t_locker,$/;"	e	enum:ter_id
t_grass	mapdata.h	/^t_grass,$/;"	e	enum:ter_id
t_grate	mapdata.h	/^t_grate,$/;"	e	enum:ter_id
t_groundsheet	mapdata.h	/^t_canvas_wall, t_canvas_door, t_canvas_door_o, t_groundsheet, t_fema_groundsheet,$/;"	e	enum:ter_id
t_hay	mapdata.h	/^t_hay,$/;"	e	enum:ter_id
t_hole	mapdata.h	/^t_hole,	\/\/ Real nothingness; makes you fall a z-level$/;"	e	enum:ter_id
t_ladder_down	mapdata.h	/^t_stairs_down, t_stairs_up, t_manhole, t_ladder_up, t_ladder_down, t_slope_down,$/;"	e	enum:ter_id
t_ladder_up	mapdata.h	/^t_stairs_down, t_stairs_up, t_manhole, t_ladder_up, t_ladder_down, t_slope_down,$/;"	e	enum:ter_id
t_lava	mapdata.h	/^t_lava,$/;"	e	enum:ter_id
t_locker	mapdata.h	/^t_fridge, t_glass_fridge, t_dresser, t_locker,$/;"	e	enum:ter_id
t_log	mapdata.h	/^t_tree, t_tree_young, t_tree_apple, t_underbrush, t_shrub, t_shrub_blueberry, t_log,$/;"	e	enum:ter_id
t_makeshift_bed	mapdata.h	/^t_bed, t_toilet, t_makeshift_bed,$/;"	e	enum:ter_id
t_manhole	mapdata.h	/^t_stairs_down, t_stairs_up, t_manhole, t_ladder_up, t_ladder_down, t_slope_down,$/;"	e	enum:ter_id
t_manhole_cover	mapdata.h	/^t_manhole_cover,$/;"	e	enum:ter_id
t_marloss	mapdata.h	/^t_marloss, t_fungus, t_tree_fungal,$/;"	e	enum:ter_id
t_metal	mapdata.h	/^t_rock_floor, t_rubble, t_ash, t_metal, t_wreckage,$/;"	e	enum:ter_id
t_metal_floor	mapdata.h	/^t_metal_floor,$/;"	e	enum:ter_id
t_missile	mapdata.h	/^t_missile, t_missile_exploded,$/;"	e	enum:ter_id
t_missile_exploded	mapdata.h	/^t_missile, t_missile_exploded,$/;"	e	enum:ter_id
t_monkey_bars	mapdata.h	/^t_sandbox, t_slide, t_monkey_bars, t_backboard,$/;"	e	enum:ter_id
t_mutpoppy	mapdata.h	/^ t_mutpoppy, \/\/mutated poppy flower$/;"	e	enum:ter_id
t_null	mapdata.h	/^t_null = 0,$/;"	e	enum:ter_id
t_oven	mapdata.h	/^t_sink, t_oven, t_woodstove, t_bathtub, t_chair, t_armchair, t_sofa, t_cupboard, t_trashcan, t_desk,$/;"	e	enum:ter_id
t_palisade	mapdata.h	/^t_wall_log_half, t_wall_log, t_wall_log_chipped, t_wall_log_broken, t_palisade, t_palisade_gate,$/;"	e	enum:ter_id
t_palisade_gate	mapdata.h	/^t_wall_log_half, t_wall_log, t_wall_log_chipped, t_wall_log_broken, t_palisade, t_palisade_gate,$/;"	e	enum:ter_id
t_palisade_pulley	mapdata.h	/^t_console_broken, t_console, t_gates_mech_control, t_barndoor, t_palisade_pulley,$/;"	e	enum:ter_id
t_paper	mapdata.h	/^t_paper,$/;"	e	enum:ter_id
t_pavement	mapdata.h	/^t_pavement, t_pavement_y, t_sidewalk,$/;"	e	enum:ter_id
t_pavement_y	mapdata.h	/^t_pavement, t_pavement_y, t_sidewalk,$/;"	e	enum:ter_id
t_pedestal_temple	mapdata.h	/^ t_pedestal_temple,$/;"	e	enum:ter_id
t_pedestal_wyrm	mapdata.h	/^ t_elevator_control, t_elevator_control_off, t_elevator, t_pedestal_wyrm,$/;"	e	enum:ter_id
t_pit	mapdata.h	/^t_dirt, t_sand, t_dirtmound, t_pit_shallow, t_pit,$/;"	e	enum:ter_id
t_pit_corpsed	mapdata.h	/^t_pit_corpsed, t_pit_covered, t_pit_spiked, t_pit_spiked_covered,$/;"	e	enum:ter_id
t_pit_covered	mapdata.h	/^t_pit_corpsed, t_pit_covered, t_pit_spiked, t_pit_spiked_covered,$/;"	e	enum:ter_id
t_pit_shallow	mapdata.h	/^t_dirt, t_sand, t_dirtmound, t_pit_shallow, t_pit,$/;"	e	enum:ter_id
t_pit_spiked	mapdata.h	/^t_pit_corpsed, t_pit_covered, t_pit_spiked, t_pit_spiked_covered,$/;"	e	enum:ter_id
t_pit_spiked_covered	mapdata.h	/^t_pit_corpsed, t_pit_covered, t_pit_spiked, t_pit_spiked_covered,$/;"	e	enum:ter_id
t_pool_table	mapdata.h	/^t_bench, t_table, t_pool_table,$/;"	e	enum:ter_id
t_portcullis	mapdata.h	/^t_portcullis,$/;"	e	enum:ter_id
t_rack	mapdata.h	/^t_rack, t_bookcase,$/;"	e	enum:ter_id
t_radio_controls	mapdata.h	/^t_radio_tower, t_radio_controls,$/;"	e	enum:ter_id
t_radio_tower	mapdata.h	/^t_radio_tower, t_radio_controls,$/;"	e	enum:ter_id
t_railing_h	mapdata.h	/^t_railing_v, t_railing_h,$/;"	e	enum:ter_id
t_railing_v	mapdata.h	/^t_railing_v, t_railing_h,$/;"	e	enum:ter_id
t_recycler	mapdata.h	/^t_recycler, t_window, t_window_taped, t_window_domestic, t_window_domestic_taped, t_window_open, t_curtains,$/;"	e	enum:ter_id
t_reinforced_glass_h	mapdata.h	/^t_reinforced_glass_v, t_reinforced_glass_h,$/;"	e	enum:ter_id
t_reinforced_glass_v	mapdata.h	/^t_reinforced_glass_v, t_reinforced_glass_h,$/;"	e	enum:ter_id
t_rock	mapdata.h	/^t_rock, t_fault,$/;"	e	enum:ter_id
t_rock_blue	mapdata.h	/^t_rock_red, t_rock_green, t_rock_blue, t_floor_red, t_floor_green, t_floor_blue,$/;"	e	enum:ter_id
t_rock_floor	mapdata.h	/^t_rock_floor, t_rubble, t_ash, t_metal, t_wreckage,$/;"	e	enum:ter_id
t_rock_green	mapdata.h	/^t_rock_red, t_rock_green, t_rock_blue, t_floor_red, t_floor_green, t_floor_blue,$/;"	e	enum:ter_id
t_rock_red	mapdata.h	/^t_rock_red, t_rock_green, t_rock_blue, t_floor_red, t_floor_green, t_floor_blue,$/;"	e	enum:ter_id
t_root_wall	mapdata.h	/^t_root_wall,$/;"	e	enum:ter_id
t_rope_up	mapdata.h	/^ t_slope_up, t_rope_up,$/;"	e	enum:ter_id
t_rubble	mapdata.h	/^t_rock_floor, t_rubble, t_ash, t_metal, t_wreckage,$/;"	e	enum:ter_id
t_sand	mapdata.h	/^t_dirt, t_sand, t_dirtmound, t_pit_shallow, t_pit,$/;"	e	enum:ter_id
t_sandbox	mapdata.h	/^t_sandbox, t_slide, t_monkey_bars, t_backboard,$/;"	e	enum:ter_id
t_sewage	mapdata.h	/^t_water_sh, t_water_dp, t_sewage,$/;"	e	enum:ter_id
t_sewage_pipe	mapdata.h	/^t_sewage_pipe, t_sewage_pump,$/;"	e	enum:ter_id
t_sewage_pump	mapdata.h	/^t_sewage_pipe, t_sewage_pump,$/;"	e	enum:ter_id
t_shrub	mapdata.h	/^t_tree, t_tree_young, t_tree_apple, t_underbrush, t_shrub, t_shrub_blueberry, t_log,$/;"	e	enum:ter_id
t_shrub_blueberry	mapdata.h	/^t_tree, t_tree_young, t_tree_apple, t_underbrush, t_shrub, t_shrub_blueberry, t_log,$/;"	e	enum:ter_id
t_sidewalk	mapdata.h	/^t_pavement, t_pavement_y, t_sidewalk,$/;"	e	enum:ter_id
t_sink	mapdata.h	/^t_sink, t_oven, t_woodstove, t_bathtub, t_chair, t_armchair, t_sofa, t_cupboard, t_trashcan, t_desk,$/;"	e	enum:ter_id
t_skin_door	mapdata.h	/^t_skin_wall, t_skin_door, t_skin_door_o,  t_skin_groundsheet,$/;"	e	enum:ter_id
t_skin_door_o	mapdata.h	/^t_skin_wall, t_skin_door, t_skin_door_o,  t_skin_groundsheet,$/;"	e	enum:ter_id
t_skin_groundsheet	mapdata.h	/^t_skin_wall, t_skin_door, t_skin_door_o,  t_skin_groundsheet,$/;"	e	enum:ter_id
t_skin_wall	mapdata.h	/^t_skin_wall, t_skin_door, t_skin_door_o,  t_skin_groundsheet,$/;"	e	enum:ter_id
t_skylight	mapdata.h	/^t_skylight, t_emergency_light_flicker, t_emergency_light,$/;"	e	enum:ter_id
t_slide	mapdata.h	/^t_sandbox, t_slide, t_monkey_bars, t_backboard,$/;"	e	enum:ter_id
t_slime	mapdata.h	/^t_slime,$/;"	e	enum:ter_id
t_slope_down	mapdata.h	/^t_stairs_down, t_stairs_up, t_manhole, t_ladder_up, t_ladder_down, t_slope_down,$/;"	e	enum:ter_id
t_slope_up	mapdata.h	/^ t_slope_up, t_rope_up,$/;"	e	enum:ter_id
t_slot_machine	mapdata.h	/^t_card_science, t_card_military, t_card_reader_broken, t_slot_machine,$/;"	e	enum:ter_id
t_sofa	mapdata.h	/^t_sink, t_oven, t_woodstove, t_bathtub, t_chair, t_armchair, t_sofa, t_cupboard, t_trashcan, t_desk,$/;"	e	enum:ter_id
t_stairs_down	mapdata.h	/^t_stairs_down, t_stairs_up, t_manhole, t_ladder_up, t_ladder_down, t_slope_down,$/;"	e	enum:ter_id
t_stairs_up	mapdata.h	/^t_stairs_down, t_stairs_up, t_manhole, t_ladder_up, t_ladder_down, t_slope_down,$/;"	e	enum:ter_id
t_switch_even	mapdata.h	/^ t_switch_rg, t_switch_gb, t_switch_rb, t_switch_even,$/;"	e	enum:ter_id
t_switch_gb	mapdata.h	/^ t_switch_rg, t_switch_gb, t_switch_rb, t_switch_even,$/;"	e	enum:ter_id
t_switch_rb	mapdata.h	/^ t_switch_rg, t_switch_gb, t_switch_rb, t_switch_even,$/;"	e	enum:ter_id
t_switch_rg	mapdata.h	/^ t_switch_rg, t_switch_gb, t_switch_rb, t_switch_even,$/;"	e	enum:ter_id
t_table	mapdata.h	/^t_bench, t_table, t_pool_table,$/;"	e	enum:ter_id
t_toilet	mapdata.h	/^t_bed, t_toilet, t_makeshift_bed,$/;"	e	enum:ter_id
t_trashcan	mapdata.h	/^t_sink, t_oven, t_woodstove, t_bathtub, t_chair, t_armchair, t_sofa, t_cupboard, t_trashcan, t_desk,$/;"	e	enum:ter_id
t_tree	mapdata.h	/^t_tree, t_tree_young, t_tree_apple, t_underbrush, t_shrub, t_shrub_blueberry, t_log,$/;"	e	enum:ter_id
t_tree_apple	mapdata.h	/^t_tree, t_tree_young, t_tree_apple, t_underbrush, t_shrub, t_shrub_blueberry, t_log,$/;"	e	enum:ter_id
t_tree_fungal	mapdata.h	/^t_marloss, t_fungus, t_tree_fungal,$/;"	e	enum:ter_id
t_tree_young	mapdata.h	/^t_tree, t_tree_young, t_tree_apple, t_underbrush, t_shrub, t_shrub_blueberry, t_log,$/;"	e	enum:ter_id
t_underbrush	mapdata.h	/^t_tree, t_tree_young, t_tree_apple, t_underbrush, t_shrub, t_shrub_blueberry, t_log,$/;"	e	enum:ter_id
t_vat	mapdata.h	/^t_vat, t_crate_c, t_crate_o,$/;"	e	enum:ter_id
t_wall_glass_h	mapdata.h	/^t_wall_glass_v, t_wall_glass_h,$/;"	e	enum:ter_id
t_wall_glass_h_alarm	mapdata.h	/^t_wall_glass_v_alarm, t_wall_glass_h_alarm,$/;"	e	enum:ter_id
t_wall_glass_v	mapdata.h	/^t_wall_glass_v, t_wall_glass_h,$/;"	e	enum:ter_id
t_wall_glass_v_alarm	mapdata.h	/^t_wall_glass_v_alarm, t_wall_glass_h_alarm,$/;"	e	enum:ter_id
t_wall_h	mapdata.h	/^t_wall_v, t_wall_h, t_concrete_v, t_concrete_h,$/;"	e	enum:ter_id
t_wall_half	mapdata.h	/^t_wall_half, t_wall_wood, t_wall_wood_chipped, t_wall_wood_broken,$/;"	e	enum:ter_id
t_wall_log	mapdata.h	/^t_wall_log_half, t_wall_log, t_wall_log_chipped, t_wall_log_broken, t_palisade, t_palisade_gate,$/;"	e	enum:ter_id
t_wall_log_broken	mapdata.h	/^t_wall_log_half, t_wall_log, t_wall_log_chipped, t_wall_log_broken, t_palisade, t_palisade_gate,$/;"	e	enum:ter_id
t_wall_log_chipped	mapdata.h	/^t_wall_log_half, t_wall_log, t_wall_log_chipped, t_wall_log_broken, t_palisade, t_palisade_gate,$/;"	e	enum:ter_id
t_wall_log_half	mapdata.h	/^t_wall_log_half, t_wall_log, t_wall_log_chipped, t_wall_log_broken, t_palisade, t_palisade_gate,$/;"	e	enum:ter_id
t_wall_metal_h	mapdata.h	/^t_wall_metal_v, t_wall_metal_h,$/;"	e	enum:ter_id
t_wall_metal_v	mapdata.h	/^t_wall_metal_v, t_wall_metal_h,$/;"	e	enum:ter_id
t_wall_v	mapdata.h	/^t_wall_v, t_wall_h, t_concrete_v, t_concrete_h,$/;"	e	enum:ter_id
t_wall_wood	mapdata.h	/^t_wall_half, t_wall_wood, t_wall_wood_chipped, t_wall_wood_broken,$/;"	e	enum:ter_id
t_wall_wood_broken	mapdata.h	/^t_wall_half, t_wall_wood, t_wall_wood_chipped, t_wall_wood_broken,$/;"	e	enum:ter_id
t_wall_wood_chipped	mapdata.h	/^t_wall_half, t_wall_wood, t_wall_wood_chipped, t_wall_wood_broken,$/;"	e	enum:ter_id
t_water_dp	mapdata.h	/^t_water_sh, t_water_dp, t_sewage,$/;"	e	enum:ter_id
t_water_sh	mapdata.h	/^t_water_sh, t_water_dp, t_sewage,$/;"	e	enum:ter_id
t_wax	mapdata.h	/^t_wax, t_floor_wax,$/;"	e	enum:ter_id
t_window	mapdata.h	/^t_recycler, t_window, t_window_taped, t_window_domestic, t_window_domestic_taped, t_window_open, t_curtains,$/;"	e	enum:ter_id
t_window_alarm	mapdata.h	/^t_window_alarm, t_window_alarm_taped, t_window_empty, t_window_frame, t_window_boarded,$/;"	e	enum:ter_id
t_window_alarm_taped	mapdata.h	/^t_window_alarm, t_window_alarm_taped, t_window_empty, t_window_frame, t_window_boarded,$/;"	e	enum:ter_id
t_window_boarded	mapdata.h	/^t_window_alarm, t_window_alarm_taped, t_window_empty, t_window_frame, t_window_boarded,$/;"	e	enum:ter_id
t_window_domestic	mapdata.h	/^t_recycler, t_window, t_window_taped, t_window_domestic, t_window_domestic_taped, t_window_open, t_curtains,$/;"	e	enum:ter_id
t_window_domestic_taped	mapdata.h	/^t_recycler, t_window, t_window_taped, t_window_domestic, t_window_domestic_taped, t_window_open, t_curtains,$/;"	e	enum:ter_id
t_window_empty	mapdata.h	/^t_window_alarm, t_window_alarm_taped, t_window_empty, t_window_frame, t_window_boarded,$/;"	e	enum:ter_id
t_window_frame	mapdata.h	/^t_window_alarm, t_window_alarm_taped, t_window_empty, t_window_frame, t_window_boarded,$/;"	e	enum:ter_id
t_window_open	mapdata.h	/^t_recycler, t_window, t_window_taped, t_window_domestic, t_window_domestic_taped, t_window_open, t_curtains,$/;"	e	enum:ter_id
t_window_taped	mapdata.h	/^t_recycler, t_window, t_window_taped, t_window_domestic, t_window_domestic_taped, t_window_open, t_curtains,$/;"	e	enum:ter_id
t_woodstove	mapdata.h	/^t_sink, t_oven, t_woodstove, t_bathtub, t_chair, t_armchair, t_sofa, t_cupboard, t_trashcan, t_desk,$/;"	e	enum:ter_id
t_wreckage	mapdata.h	/^t_rock_floor, t_rubble, t_ash, t_metal, t_wreckage,$/;"	e	enum:ter_id
tag	dialogue.h	/^ std::string tag;$/;"	m	struct:tag_data
tag_data	dialogue.h	/^struct tag_data$/;"	s
takeoff	game.cpp	/^void game::takeoff(char chInput)$/;"	f	class:game
takeoff	player.cpp	/^bool player::takeoff(game *g, char let)$/;"	f	class:player
talk_bad_names	dialogue.h	/^std::string talk_bad_names[10] = {$/;"	v
talk_catch_up	dialogue.h	/^std::string talk_catch_up[10] = {$/;"	v
talk_come_here	dialogue.h	/^std::string talk_come_here[10] = {$/;"	v
talk_done_mugging	dialogue.h	/^std::string talk_done_mugging[10] = {$/;"	v
talk_drop_weapon	dialogue.h	/^std::string talk_drop_weapon[10] = {$/;"	v
talk_fuck_you	dialogue.h	/^std::string talk_fuck_you[10] = {$/;"	v
talk_function	dialogue.h	/^struct talk_function$/;"	s
talk_good_names	dialogue.h	/^std::string talk_good_names[10] = {$/;"	v
talk_greeting_gen	dialogue.h	/^std::string talk_greeting_gen[10] = {$/;"	v
talk_hands_up	dialogue.h	/^std::string talk_hands_up[10] = {$/;"	v
talk_happy	dialogue.h	/^std::string talk_happy[10] = {$/;"	v
talk_ill_die	dialogue.h	/^std::string talk_ill_die[10] = {$/;"	v
talk_ill_kill_you	dialogue.h	/^std::string talk_ill_kill_you[10] = {$/;"	v
talk_keep_up	dialogue.h	/^std::string talk_keep_up[10] = {$/;"	v
talk_leaving	dialogue.h	/^std::string talk_leaving[10] = {$/;"	v
talk_let_me_pass	dialogue.h	/^std::string talk_let_me_pass[10] = {$/;"	v
talk_move	dialogue.h	/^std::string talk_move[10] = {$/;"	v
talk_needs	dialogue.h	/^std::string talk_needs[num_needs][5] = {$/;"	v
talk_no	dialogue.h	/^std::string talk_no[10] = {$/;"	v
talk_no_faction	dialogue.h	/^std::string talk_no_faction[10] = {$/;"	v
talk_okay	dialogue.h	/^std::string talk_okay[10] = {$/;"	v
talk_really	dialogue.h	/^std::string talk_really[10] = { \/\/ Synonyms for "really" -- applied to verbs$/;"	v
talk_response	dialogue.h	/^ talk_response()$/;"	f	struct:talk_response
talk_response	dialogue.h	/^ talk_response(const talk_response &rhs)$/;"	f	struct:talk_response
talk_response	dialogue.h	/^struct talk_response$/;"	s
talk_response_list	dialogue.h	/^struct talk_response_list$/;"	s
talk_sad	dialogue.h	/^std::string talk_sad[10] = {$/;"	v
talk_skill	player.cpp	/^int player::talk_skill()$/;"	f	class:player
talk_swear	dialogue.h	/^std::string talk_swear[10] = { \/\/ e.g. "drop the <swear> weapon"$/;"	v
talk_swear_interjection	dialogue.h	/^std::string talk_swear_interjection[10] = {$/;"	v
talk_tags	dialogue.h	/^tag_data talk_tags[NUM_STATIC_TAGS] = {$/;"	v
talk_to_u	npctalk.cpp	/^void npc::talk_to_u(game *g)$/;"	f	class:npc
talk_topic	npc.h	/^enum talk_topic {$/;"	g
talk_trial	dialogue.h	/^enum talk_trial$/;"	g
talk_trial_text	dialogue.h	/^std::string talk_trial_text[NUM_TALK_TRIALS] = {$/;"	v
talk_very	dialogue.h	/^std::string talk_very[10] = { \/\/ Synonyms for "very" -- applied to adjectives$/;"	v
talk_wait	dialogue.h	/^std::string talk_wait[10] = {$/;"	v
target	mission.h	/^ point target;		\/\/ Marked on the player's map.  (-1,-1) for none$/;"	m	struct:mission
target	ranged.cpp	/^std::vector<point> game::target(int &x, int &y, int lowx, int lowy, int hix,$/;"	f	class:game
target	vehicle.h	/^ void* target;  \/\/vehicle$/;"	m	struct:veh_collision
target_name	vehicle.h	/^ std::string target_name;$/;"	m	struct:veh_collision
target_part	vehicle.h	/^ int target_part; \/\/veh partnum$/;"	m	struct:veh_collision
tazer	iuse.cpp	/^void iuse::tazer(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
tazer	monattack.cpp	/^void mattack::tazer(game *g, monster *z)$/;"	f	class:mattack
tech	itype.h	/^ technique_id tech;$/;"	m	struct:style_move
technique_id	itype.h	/^enum technique_id {$/;"	g
techniques	item.cpp	/^std::vector<technique_id> item::techniques()$/;"	f	class:item
techniques	itype.h	/^ unsigned techniques : NUM_TECHNIQUES;$/;"	m	struct:itype
telepad	trapfunc.cpp	/^void trapfunc::telepad(game *g, int x, int y)$/;"	f	class:trapfunc
telepad	trapfunc.cpp	/^void trapfuncm::telepad(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
teleport	game.cpp	/^void game::teleport(player *p)$/;"	f	class:game
teleport	iuse.cpp	/^void iuse::teleport(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
temp_cur	player.h	/^ signed int temp_cur[num_bp], frostbite_timer[num_bp];$/;"	m	class:player
temp_equalizer	player.cpp	/^void player::temp_equalizer(body_part bp1, body_part bp2)$/;"	f	class:player
temperature	game.h	/^  signed char temperature;              \/\/ The air temperature$/;"	m	class:game
templates	item_manager.cpp	/^item_template_container* Item_manager::templates(){$/;"	f	class:Item_manager
temple_flood	trapfunc.cpp	/^void trapfunc::temple_flood(game *g, int x, int y)$/;"	f	class:trapfunc
temple_toggle	trapfunc.cpp	/^void trapfunc::temple_toggle(game *g, int x, int y)$/;"	f	class:trapfunc
tempvalue	dialogue.h	/^ int tempvalue;		\/\/ Used for various stuff$/;"	m	struct:talk_response
tempvalue	npc.h	/^ int tempvalue;$/;"	m	struct:npc_chatbin
tent	iexamine.cpp	/^void iexamine::tent(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
tent	iuse.cpp	/^void iuse::tent(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
tentable	mapdata.h	/^ tentable,     \/\/ I'm lazy, this is just diggable with a few more tacked on.$/;"	e	enum:t_flag
tentacle	monattack.cpp	/^void mattack::tentacle(game *g, monster *z)$/;"	f	class:mattack
ter	map.cpp	/^ter_id& map::ter(const int x, const int y)$/;"	f	class:map
ter	mapdata.h	/^ ter_id			ter[SEEX][SEEY]; \/\/ Terrain on each square$/;"	m	struct:submap
ter	omdata.h	/^ oter_id ter;           \/\/ Terrain placed$/;"	m	struct:overmap_special
ter	overmap.cpp	/^oter_id& overmap::ter(int x, int y, int z)$/;"	f	class:overmap
ter_id	mapdata.h	/^enum ter_id {$/;"	g
ter_in_type_range	overmap.cpp	/^bool overmap::ter_in_type_range(int x, int y, int z, oter_id type, int type_range)$/;"	f	class:overmap
ter_t	mapdata.h	/^struct ter_t {$/;"	s
terlist	mapdata.h	/^const ter_t terlist[num_terrain_types] = {  \/\/ MUST match enum ter_id above!$/;"	v
tername	map.cpp	/^std::string map::tername(const int x, const int y)$/;"	f	class:map
terrain	construction.h	/^ ter_id terrain;$/;"	m	struct:construction_stage
terrain	overmap.h	/^ oter_id terrain[OMAPX][OMAPY];$/;"	m	struct:map_layer
terrain_filename	overmap.cpp	/^std::string overmap::terrain_filename(int const x, int const y) const$/;"	f	class:overmap
text	dialogue.h	/^ std::string text;$/;"	m	struct:talk_response
text	mission.h	/^ text_hash text;$/;"	m	struct:mission
text	overmap.h	/^ std::string text;$/;"	m	struct:om_note
text	player.h	/^ std::string text;$/;"	m	struct:special_attack
text_hash	texthash.h	/^struct text_hash$/;"	s
textify_period	calendar.cpp	/^std::string calendar::textify_period()$/;"	f	class:calendar
thin_obstacle	mapdata.h	/^ thin_obstacle,\/\/ passable by player and monsters, but not by vehicles$/;"	e	enum:t_flag
thing	mondeath.cpp	/^void mdeath::thing(game *g, monster *z)$/;"	f	class:mdeath
thirst	gamemode.h	/^ bool thirst;		\/\/ Do we thirst?$/;"	m	struct:defense_game
thirst	player.h	/^ int hunger, thirst, fatigue, health;$/;"	m	class:player
thorazine	iuse.cpp	/^void iuse::thorazine(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
throw_dex_mod	player.cpp	/^int player::throw_dex_mod(bool real_life)$/;"	f	class:player
throw_item	ranged.cpp	/^void game::throw_item(player &p, int tarx, int tary, item &thrown,$/;"	f	class:game
throw_range	player.cpp	/^int player::throw_range(int index)$/;"	f	class:player
thrown_item	npcmove.cpp	/^bool thrown_item(item *used)$/;"	f
thrust	vehicle.cpp	/^void vehicle::thrust (int thd)$/;"	f	class:vehicle
thunder	weather.cpp	/^void weather_effect::thunder(game *g)$/;"	f	class:weather_effect
tileray	tileray.cpp	/^tileray::tileray (): deltax(0), deltay(0), direction(0), leftover (0),$/;"	f	class:tileray
tileray	tileray.cpp	/^tileray::tileray (int adir): direction (adir)$/;"	f	class:tileray
tileray	tileray.cpp	/^tileray::tileray (int adx, int ady)$/;"	f	class:tileray
tileray	tileray.h	/^class tileray$/;"	c
time	construction.h	/^ int time; \/\/ In minutes, i.e. 10 turns$/;"	m	struct:construction_stage
time	crafting.h	/^  int time;$/;"	m	struct:recipe
time	itype.h	/^ unsigned char time;	\/\/ How long, in 10-turns (aka minutes), it takes to read$/;"	m	struct:it_book
time_between_waves	gamemode.h	/^ int time_between_waves; \/\/ Cooldown \/ building \/ healing time$/;"	m	struct:defense_game
time_to_fire	ranged.cpp	/^int time_to_fire(player &p, it_gun* firing)$/;"	f
timeout	catacurse.cpp	/^void timeout(int delay)$/;"	f
timespec	posix_time.h	/^struct timespec$/;"	s
tinymap	map.cpp	/^tinymap::tinymap()$/;"	f	class:tinymap
tinymap	map.cpp	/^tinymap::tinymap(std::map<std::string, itype*> *itptr,$/;"	f	class:tinymap
tinymap	map.h	/^class tinymap : public map$/;"	c
tname	item.cpp	/^std::string item::tname(game *g)$/;"	f	class:item
to_hit_max	artifactdata.h	/^ int to_hit_min, to_hit_max;$/;"	m	struct:artifact_weapon_datum
to_hit_min	artifactdata.h	/^ int to_hit_min, to_hit_max;$/;"	m	struct:artifact_weapon_datum
to_str	picojson.h	/^  inline std::string value::to_str() const {$/;"	f	class:picojson::value
toggleTraining	skill.h	/^  bool toggleTraining() { _isTraining = !_isTraining; return _isTraining; }$/;"	f	class:SkillLevel
toggle_cruise_control	vehicle.cpp	/^ toggle_cruise_control,$/;"	e	enum:vehicle_controls	file:
toggle_lights	vehicle.cpp	/^ toggle_lights,$/;"	e	enum:vehicle_controls	file:
toggle_trait	player.cpp	/^void player::toggle_trait(int flag)$/;"	f	class:player
toggle_turrets	vehicle.cpp	/^ toggle_turrets,$/;"	e	enum:vehicle_controls	file:
toggle_use_grenades	npctalk.cpp	/^void talk_function::toggle_use_grenades(game *g, npc *p)$/;"	f	class:talk_function
toggle_use_guns	npctalk.cpp	/^void talk_function::toggle_use_guns(game *g, npc *p)$/;"	f	class:talk_function
toggle_use_silent	npctalk.cpp	/^void talk_function::toggle_use_silent(game *g, npc *p)$/;"	f	class:talk_function
told_to_help	npc.cpp	/^void npc::told_to_help(game *g)$/;"	f	class:npc
told_to_leave	npc.cpp	/^void npc::told_to_leave(game *g)$/;"	f	class:npc
told_to_wait	npc.cpp	/^void npc::told_to_wait(game *g)$/;"	f	class:npc
took_painkiller	npc.cpp	/^bool npc::took_painkiller()$/;"	f	class:npc
tool	itype.h	/^    itype_id tool;		\/\/ Tool needed to consume (e.g. lighter for cigarettes)$/;"	m	struct:it_comest
tools	construction.h	/^ std::vector<component> tools[3];$/;"	m	struct:construction_stage
tools	crafting.h	/^  std::vector<component> tools[20];$/;"	m	struct:recipe
topic_category	npctalk.cpp	/^int topic_category(talk_topic topic)$/;"	f
topic_stack	dialogue.h	/^ std::vector<talk_topic> topic_stack;$/;"	m	struct:dialogue
torch	iuse.cpp	/^void iuse::torch(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
torch_lit	iuse.cpp	/^void iuse::torch_lit(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
total_mass	vehicle.cpp	/^int vehicle::total_mass ()$/;"	f	class:vehicle
total_owed	npc.h	/^ int total_owed() {$/;"	f	struct:npc_opinion
total_power	vehicle.cpp	/^int vehicle::total_power (bool fueled)$/;"	f	class:vehicle
touched	catacurse.h	/^bool touched;$/;"	m	struct:__anon2
towns	overmap.h	/^  std::vector<settlement> towns;$/;"	m	class:overmap
tr_at	map.cpp	/^trap_id& map::tr_at(const int x, const int y)$/;"	f	class:map
tr_beartrap	trap.h	/^ tr_beartrap,$/;"	e	enum:trap_id
tr_beartrap_buried	trap.h	/^ tr_beartrap_buried,$/;"	e	enum:trap_id
tr_blade	trap.h	/^ tr_blade,$/;"	e	enum:trap_id
tr_boobytrap	trap.h	/^ tr_boobytrap,$/;"	e	enum:trap_id
tr_brazier	trap.h	/^ tr_brazier,$/;"	e	enum:trap_id
tr_bubblewrap	trap.h	/^ tr_bubblewrap,$/;"	e	enum:trap_id
tr_cot	trap.h	/^ tr_cot,$/;"	e	enum:trap_id
tr_crossbow	trap.h	/^ tr_crossbow,$/;"	e	enum:trap_id
tr_dissector	trap.h	/^ tr_dissector,$/;"	e	enum:trap_id
tr_drain	trap.h	/^ tr_drain,$/;"	e	enum:trap_id
tr_engine	trap.h	/^ tr_engine,$/;"	e	enum:trap_id
tr_glow	trap.h	/^ tr_glow,$/;"	e	enum:trap_id
tr_goo	trap.h	/^ tr_goo,$/;"	e	enum:trap_id
tr_heavy_snare	trap.h	/^ tr_heavy_snare,$/;"	e	enum:trap_id
tr_hum	trap.h	/^ tr_hum,$/;"	e	enum:trap_id
tr_landmine	trap.h	/^ tr_landmine,$/;"	e	enum:trap_id
tr_landmine_buried	trap.h	/^ tr_landmine_buried,$/;"	e	enum:trap_id
tr_lava	trap.h	/^ tr_lava,$/;"	e	enum:trap_id
tr_ledge	trap.h	/^ tr_ledge,$/;"	e	enum:trap_id
tr_light_snare	trap.h	/^ tr_light_snare,$/;"	e	enum:trap_id
tr_nailboard	trap.h	/^ tr_nailboard,$/;"	e	enum:trap_id
tr_null	trap.h	/^ tr_null,$/;"	e	enum:trap_id
tr_pit	trap.h	/^ tr_pit,$/;"	e	enum:trap_id
tr_portal	trap.h	/^ tr_portal,$/;"	e	enum:trap_id
tr_rollmat	trap.h	/^ tr_rollmat,$/;"	e	enum:trap_id
tr_shadow	trap.h	/^ tr_shadow,$/;"	e	enum:trap_id
tr_shotgun_1	trap.h	/^ tr_shotgun_1,$/;"	e	enum:trap_id
tr_shotgun_2	trap.h	/^ tr_shotgun_2,$/;"	e	enum:trap_id
tr_sinkhole	trap.h	/^ tr_sinkhole,$/;"	e	enum:trap_id
tr_snake	trap.h	/^ tr_snake,$/;"	e	enum:trap_id
tr_snare	trap.h	/^ tr_snare,$/;"	e	enum:trap_id
tr_spike_pit	trap.h	/^ tr_spike_pit,$/;"	e	enum:trap_id
tr_telepad	trap.h	/^ tr_telepad,$/;"	e	enum:trap_id
tr_temple_flood	trap.h	/^ tr_temple_flood,$/;"	e	enum:trap_id
tr_temple_toggle	trap.h	/^ tr_temple_toggle,$/;"	e	enum:trap_id
tr_tripwire	trap.h	/^ tr_tripwire,$/;"	e	enum:trap_id
tracePtrs	debug.cpp	/^void* tracePtrs[TRACE_SIZE];$/;"	v
trade	npctalk.cpp	/^bool trade(game *g, npc *p, int cost, std::string deal)$/;"	f
train	skill.cpp	/^int SkillLevel::train(int &level) {$/;"	f	class:SkillLevel
trait	pldata.h	/^struct trait {$/;"	s
traits	pldata.h	/^const trait traits[] = {$/;"	v
trans	map.cpp	/^bool map::trans(const int x, const int y, char * trans_buf)$/;"	f	class:map
translate	map.cpp	/^void map::translate(const ter_id from, const ter_id to)$/;"	f	class:map
transparency_cache	map.h	/^ float transparency_cache[MAPSIZE*SEEX][MAPSIZE*SEEY];$/;"	m	class:map
transparent	mapdata.h	/^ bool transparent[3];$/;"	m	struct:field_t
transparent	mapdata.h	/^ transparent = 0,\/\/ Player & monsters can see through\/past it$/;"	e	enum:t_flag
trap	iexamine.cpp	/^void iexamine::trap(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
trap	mapdata.h	/^ trap_id trap;$/;"	m	struct:ter_t
trap	trap.h	/^ trap(int pid, std::string string_id, std::string pname, nc_color pcolor, char psym,$/;"	f	struct:trap
trap	trap.h	/^struct trap {$/;"	s
trap_id	trap.h	/^enum trap_id {$/;"	g
trapfunc	trap.h	/^struct trapfunc {$/;"	s
trapfuncm	trap.h	/^struct trapfuncm {$/;"	s
traps	game.h	/^  std::vector <trap*> traps;$/;"	m	class:game
traps	map.h	/^ std::vector <trap*> *traps;$/;"	m	class:map
tree_apple	iexamine.cpp	/^void iexamine::tree_apple(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
trial	dialogue.h	/^ talk_trial trial;$/;"	m	struct:talk_response
trial_chance	npctalk.cpp	/^int trial_chance(talk_response response, player *u, npc *p)$/;"	f
triffid_heart	mondeath.cpp	/^void mdeath::triffid_heart(game *g, monster *z)$/;"	f	class:mdeath
triffid_heartbeat	monattack.cpp	/^void mattack::triffid_heartbeat(game *g, monster *z)$/;"	f	class:mattack
triffids	gamemode.h	/^ bool triffids;$/;"	m	struct:defense_game
trig_dist	line.cpp	/^int trig_dist(int x1, int y1, int x2, int y2)$/;"	f
trigger_sum	monster.cpp	/^int monster::trigger_sum(game *g, std::vector<monster_trigger> *triggers)$/;"	f	class:monster
tripoint	enums.h	/^ tripoint(const tripoint &p) : x (p.x), y (p.y), z (p.z) {}$/;"	f	struct:tripoint
tripoint	enums.h	/^ tripoint(int X = 0, int Y = 0, int Z = 0) : x (X), y (Y), z (Z) {}$/;"	f	struct:tripoint
tripoint	enums.h	/^struct tripoint {$/;"	s
tripwire	trapfunc.cpp	/^void trapfunc::tripwire(game *g, int x, int y)$/;"	f	class:trapfunc
tripwire	trapfunc.cpp	/^void trapfuncm::tripwire(game *g, monster *z, int x, int y)$/;"	f	class:trapfuncm
trp	mapdata.h	/^ trap_id		trp[SEEX][SEEY]; \/\/ Trap on each square$/;"	m	struct:submap
trust	npc.h	/^ int trust;$/;"	m	struct:npc_opinion
try_to_sleep	player.cpp	/^void player::try_to_sleep(game *g)$/;"	f	class:player
turn	event.h	/^ int turn;$/;"	m	struct:event
turn	game.h	/^  calendar turn;$/;"	m	class:game
turn	game.h	/^ calendar turn;$/;"	m	struct:game_message
turn	vehicle.cpp	/^void vehicle::turn (int deg)$/;"	f	class:vehicle
turn_dir	vehicle.h	/^    int turn_dir;       \/\/ direction, to wich vehicle is turning (player control). will rotate frame on next move$/;"	m	class:vehicle
turn_last_touched	mapdata.h	/^ int turn_last_touched;$/;"	m	struct:submap
turned_hostile	npc.cpp	/^bool npc::turned_hostile()$/;"	f	class:npc
turns_per_charge	itype.h	/^ unsigned char turns_per_charge;$/;"	m	struct:it_tool
turns_to_reach	monmove.cpp	/^int monster::turns_to_reach(game *g, int x, int y)$/;"	f	class:monster
turnssincelastmon	game.h	/^  int turnssincelastmon; \/\/ needed for auto run mode$/;"	m	class:game
turret	iuse.cpp	/^void iuse::turret(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
turret_mode	vehicle.h	/^    int turret_mode;    \/\/ turret firing mode: 0 = off, 1 = burst fire$/;"	m	class:vehicle
tut_lesson	gamemode.h	/^enum tut_lesson {$/;"	g
tut_text	tutorial.h	/^const std::string tut_text[] = {"\\$/;"	v
tut_type	game.h	/^enum tut_type {$/;"	g
tutorial_game	gamemode.h	/^struct tutorial_game : public special_game$/;"	s
tutorials_seen	gamemode.h	/^ bool tutorials_seen[NUM_LESSONS];$/;"	m	struct:tutorial_game
tv_nsec	posix_time.h	/^  long int tv_nsec;$/;"	m	struct:timespec
tv_sec	posix_time.h	/^  time_t tv_sec;$/;"	m	struct:timespec
two_way_radio	iuse.cpp	/^void iuse::two_way_radio(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
type	crafting.h	/^ itype_id type;$/;"	m	struct:component
type	event.h	/^ event_type type;$/;"	m	struct:event
type	item.h	/^ itype* type;$/;"	m	class:item
type	itype.h	/^ Skill *type;		\/\/ Which skill it upgrades$/;"	m	struct:it_book
type	itype.h	/^ ammotype type;		\/\/ Enum of varieties (e.g. 9mm, shot, etc)$/;"	m	struct:it_ammo
type	mapdata.h	/^ field_id type;$/;"	m	struct:field
type	mapdata.h	/^ mon_id type;$/;"	m	struct:spawn_point
type	mission.h	/^ mission_type *type;$/;"	m	struct:mission
type	mongroup.h	/^ std::string type;$/;"	m	struct:mongroup
type	monster.h	/^ monster_effect_type type;$/;"	m	struct:monster_effect
type	monster.h	/^ mtype *type;$/;"	m	class:monster
type	morale.h	/^ morale_type type;$/;"	m	struct:morale_point
type	npc.h	/^ npc_favor_type type;$/;"	m	struct:npc_favor
type	pldata.h	/^ activity_type type;$/;"	m	struct:player_activity
type	pldata.h	/^ add_type type;$/;"	m	struct:addiction
type	pldata.h	/^ dis_type type;$/;"	m	struct:disease
type	vehicle.h	/^    int type;           \/\/ vehicle type$/;"	m	class:vehicle
type	vehicle.h	/^ veh_coll_type type;$/;"	m	struct:veh_collision
typeId	item.cpp	/^itype_id item::typeId()$/;"	f	class:item
type_	picojson.h	/^    int type_;$/;"	m	class:picojson::value
u	game.h	/^  player u;$/;"	m	class:game
u_int32_t	catacurse.h	/^typedef unsigned int u_int32_t;$/;"	t
u_see	game.cpp	/^bool game::u_see(int x, int y, int &t)$/;"	f	class:game
u_see	game.cpp	/^bool game::u_see(monster *mon, int &t)$/;"	f	class:game
ugliness	pldata.h	/^ int ugliness;		\/\/ How ugly it is--see below, at PF_MAX$/;"	m	struct:trait
uid	mission.h	/^ int uid;		\/\/ Unique ID number, used for referencing elsewhere$/;"	m	struct:mission
unarmed_attack	melee.cpp	/^bool player::unarmed_attack()$/;"	f	class:player
unboard_all	vehicle.cpp	/^void vehicle::unboard_all ()$/;"	f	class:vehicle
unboard_vehicle	map.cpp	/^void map::unboard_vehicle(game *g, const int x, const int y)$/;"	f	class:map
underwater	player.h	/^ bool underwater;$/;"	m	class:player
ungetc	picojson.h	/^    void ungetc() {$/;"	f	class:picojson::input
ungot_	picojson.h	/^    bool ungot_;$/;"	m	class:picojson::input
unimpaired_range	player.cpp	/^int player::unimpaired_range()$/;"	f	class:player
unique_name	monster.h	/^ std::string unique_name; \/\/ If we're unique$/;"	m	class:monster
unload	game.cpp	/^void game::unload()$/;"	f	class:game
unload	game.cpp	/^void game::unload(char chInput)$/;"	f	class:game
unpowered_bionics	bionics.cpp	/^std::vector<bionic_id> unpowered_bionics;$/;"	v
unreal_itype_ids	itypedef.cpp	/^std::vector<std::string> unreal_itype_ids;$/;"	v
update_bodytemp	player.cpp	/^void player::update_bodytemp(game *g) \/\/ TODO bionics, diseases and humidity (not in yet) can affect body temp.$/;"	f	class:player
update_map	game.cpp	/^void game::update_map(int &x, int &y)$/;"	f	class:game
update_morale	player.cpp	/^void player::update_morale()$/;"	f	class:player
update_overmap_seen	game.cpp	/^void game::update_overmap_seen()$/;"	f	class:game
update_path	npcmove.cpp	/^void npc::update_path(game *g, int x, int y)$/;"	f	class:npc
update_scent	game.cpp	/^void game::update_scent()$/;"	f	class:game
update_stair_monsters	game.cpp	/^void game::update_stair_monsters()$/;"	f	class:game
update_vehicle_cache	map.cpp	/^void map::update_vehicle_cache(vehicle * veh, const bool brand_new)$/;"	f	class:map
update_vehicle_list	map.cpp	/^void map::update_vehicle_list(const int to) {$/;"	f	class:map
update_weather	game.cpp	/^void game::update_weather()$/;"	f	class:game
update_worst_item_value	npc.cpp	/^void npc::update_worst_item_value()$/;"	f	class:npc
upgrade	monattack.cpp	/^void mattack::upgrade(game *g, monster *z)$/;"	f	class:mattack
uquit	game.h	/^  quit_status uquit;    \/\/ used in main.cpp to determine what type of quit$/;"	m	class:game
urgent	mission.h	/^ bool urgent;	\/\/ If true, the NPC will press this mission!$/;"	m	struct:mission_type
use	computer.cpp	/^void computer::use(game *g)$/;"	f	class:computer
use	item.cpp	/^void item::use(player &u)$/;"	f	class:item
use	itype.h	/^    void (iuse::*use)(game *, player *, item *, bool);\/\/ Special effects of use$/;"	m	struct:it_comest
use	itype.h	/^ void (iuse::*use)(game *, player *, item *, bool);$/;"	m	struct:it_macguffin
use	itype.h	/^ void (iuse::*use)(game *, player *, item *, bool);$/;"	m	struct:it_tool
use	player.cpp	/^void player::use(game *g, char let)$/;"	f	class:player
use_amount	inventory.cpp	/^void inventory::use_amount(itype_id it, int quantity, bool use_container)$/;"	f	class:inventory
use_amount	map.cpp	/^void map::use_amount(const point origin, const int range, const itype_id type, const int amount,$/;"	f	class:map
use_amount	player.cpp	/^void player::use_amount(itype_id it, int quantity, bool use_container)$/;"	f	class:player
use_charges	inventory.cpp	/^void inventory::use_charges(itype_id it, int quantity)$/;"	f	class:inventory
use_charges	map.cpp	/^void map::use_charges(const point origin, const int range, const itype_id type, const int amount)$/;"	f	class:map
use_charges	player.cpp	/^void player::use_charges(itype_id it, int quantity)$/;"	f	class:player
use_computer	game.cpp	/^void game::use_computer(int x, int y)$/;"	f	class:game
use_controls	vehicle.cpp	/^std::string vehicle::use_controls()$/;"	f	class:vehicle
use_escape_item	npcmove.cpp	/^void npc::use_escape_item(game *g, int index, int target)$/;"	f	class:npc
use_grenades	npc.h	/^ bool use_grenades;$/;"	m	struct:npc_combat_rules
use_guns	npc.h	/^ bool use_guns;$/;"	m	struct:npc_combat_rules
use_item	game.cpp	/^void game::use_item(char chInput)$/;"	f	class:game
use_painkiller	npcmove.cpp	/^void npc::use_painkiller(game *g)$/;"	f	class:npc
use_silent	npc.h	/^ bool use_silent;$/;"	m	struct:npc_combat_rules
use_wielded	player.cpp	/^void player::use_wielded(game *g) {$/;"	f	class:player
use_wielded_item	game.cpp	/^void game::use_wielded_item()$/;"	f	class:game
used_on_pistol	itype.h	/^ bool used_on_pistol;$/;"	m	struct:it_gunmod
used_on_rifle	itype.h	/^ bool used_on_rifle;$/;"	m	struct:it_gunmod
used_on_shotgun	itype.h	/^ bool used_on_shotgun;$/;"	m	struct:it_gunmod
used_on_smg	itype.h	/^ bool used_on_smg;$/;"	m	struct:it_gunmod
v	map.h	/^ vehicle* v;$/;"	m	struct:wrapped_vehicle
vacutainer	iuse.cpp	/^void iuse::vacutainer(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
vadd_msg	game.cpp	/^void game::vadd_msg(const char* msg, va_list ap)$/;"	f	class:game
valid	mutation.h	/^ bool valid; \/\/ True if this is a valid mutation (only used for flags < PF_MAX)$/;"	m	struct:mutation_branch
valid_group	game.cpp	/^int game::valid_group(mon_id type, int x, int y, int z)$/;"	f	class:game
valid_wheel_config	vehicle.cpp	/^bool vehicle::valid_wheel_config ()$/;"	f	class:vehicle
value	mission.h	/^ int value;		\/\/ Cash\/Favor value of completing this$/;"	m	struct:mission
value	mission.h	/^ int value;		\/\/ Value; determines rewards and such$/;"	m	struct:mission_type
value	name.h	/^  std::string value() const { return _value; }$/;"	f	class:Name
value	npc.cpp	/^int npc::value(item &it)$/;"	f	class:npc
value	npc.h	/^ int value;$/;"	m	struct:npc_favor
value	npc.h	/^ int value;$/;"	m	struct:npc_opinion
value	picojson.h	/^  class value {$/;"	c	namespace:picojson
value	picojson.h	/^  inline value::value() : type_(null_type) {}$/;"	f	class:picojson::value
value	picojson.h	/^  inline value::value(bool b) : type_(boolean_type) {$/;"	f	class:picojson::value
value	picojson.h	/^  inline value::value(const array& a) : type_(array_type) {$/;"	f	class:picojson::value
value	picojson.h	/^  inline value::value(const char* s) : type_(string_type) {$/;"	f	class:picojson::value
value	picojson.h	/^  inline value::value(const char* s, size_t len) : type_(string_type) {$/;"	f	class:picojson::value
value	picojson.h	/^  inline value::value(const object& o) : type_(object_type) {$/;"	f	class:picojson::value
value	picojson.h	/^  inline value::value(const std::string& s) : type_(string_type) {$/;"	f	class:picojson::value
value	picojson.h	/^  inline value::value(const value& x) : type_(x.type_) {$/;"	f	class:picojson::value
value	picojson.h	/^  inline value::value(double n) : type_(number_type) {$/;"	f	class:picojson::value
value	picojson.h	/^  inline value::value(int type, bool) : type_(type) {$/;"	f	class:picojson::value
value	texthash.cpp	/^std::string text_hash::value(std::string key)$/;"	f	class:text_hash
values	faction.h	/^ unsigned values : NUM_FACVALS; \/\/ Bitfield of values$/;"	m	struct:faction
values	pldata.h	/^ std::vector<int> values;$/;"	m	struct:player_activity
values	texthash.h	/^ std::vector<std::string> values;$/;"	m	struct:text_hash
vector_has	field.cpp	/^bool vector_has(std::vector <item> vec, itype_id type)$/;"	f
vector_has	game.cpp	/^bool vector_has(std::vector<int> vec, int test)$/;"	f
veh	veh_interact.h	/^    vehicle *veh;$/;"	m	class:veh_interact
veh_armytruck	veh_type.h	/^    veh_armytruck,  \/\/Army M35A2 6L gas and\/or hydrogen engine if commented parts uncommented.$/;"	e	enum:vhtype_id
veh_at	map.cpp	/^vehicle* map::veh_at(const int x, const int y)$/;"	f	class:map
veh_at	map.cpp	/^vehicle* map::veh_at(const int x, const int y, int &part_num)$/;"	f	class:map
veh_bicycle	veh_type.h	/^    veh_bicycle,$/;"	e	enum:vhtype_id
veh_bubblecar	veh_type.h	/^    veh_bubblecar,  \/\/360 degree view glass circular vehicle. Underpowered plutonium.$/;"	e	enum:vhtype_id
veh_bug	veh_type.h	/^    veh_bug,  \/\/Old VW Bug.$/;"	e	enum:vhtype_id
veh_cached_parts	map.h	/^ std::map< std::pair<int,int>, std::pair<vehicle*,int> > veh_cached_parts;$/;"	m	class:map
veh_car	veh_type.h	/^    veh_car,$/;"	e	enum:vhtype_id
veh_car_chassis	veh_type.h	/^    veh_car_chassis,$/;"	e	enum:vhtype_id
veh_coll_bashable	vehicle.h	/^ veh_coll_bashable,$/;"	e	enum:veh_coll_type
veh_coll_body	vehicle.h	/^ veh_coll_body,$/;"	e	enum:veh_coll_type
veh_coll_destructable	vehicle.h	/^ veh_coll_destructable,$/;"	e	enum:veh_coll_type
veh_coll_nothing	vehicle.h	/^ veh_coll_nothing = 0,$/;"	e	enum:veh_coll_type
veh_coll_other	vehicle.h	/^ veh_coll_other,$/;"	e	enum:veh_coll_type
veh_coll_thin_obstacle	vehicle.h	/^ veh_coll_thin_obstacle,$/;"	e	enum:veh_coll_type
veh_coll_type	vehicle.h	/^enum veh_coll_type {$/;"	g
veh_coll_veh	vehicle.h	/^ veh_coll_veh,$/;"	e	enum:veh_coll_type
veh_collision	vehicle.h	/^ veh_collision(){};$/;"	f	struct:veh_collision
veh_collision	vehicle.h	/^struct veh_collision {$/;"	s
veh_custom	veh_type.h	/^    veh_custom,$/;"	e	enum:vhtype_id
veh_exists_at	map.h	/^ bool veh_exists_at [SEEX * MAPSIZE][SEEY * MAPSIZE];$/;"	m	class:map
veh_golfcart	veh_type.h	/^    veh_golfcart,  \/\/Yamaha golf cart.$/;"	e	enum:vhtype_id
veh_in_active_range	map.h	/^ bool veh_in_active_range;$/;"	m	class:map
veh_interact	veh_interact.cpp	/^veh_interact::veh_interact ()$/;"	f	class:veh_interact
veh_interact	veh_interact.h	/^class veh_interact$/;"	c
veh_motorcycle	veh_type.h	/^    veh_motorcycle,$/;"	e	enum:vhtype_id
veh_motorcycle_chassis	veh_type.h	/^    veh_motorcycle_chassis,$/;"	e	enum:vhtype_id
veh_null	veh_type.h	/^    veh_null = 0,$/;"	e	enum:vhtype_id
veh_sandbike	veh_type.h	/^    veh_sandbike,$/;"	e	enum:vhtype_id
veh_sandbike_chassis	veh_type.h	/^    veh_sandbike_chassis,$/;"	e	enum:vhtype_id
veh_schoolbus	veh_type.h	/^    veh_schoolbus,  \/\/Standard schoolbus$/;"	e	enum:vhtype_id
veh_scooter	veh_type.h	/^    veh_scooter,  \/\/Vespa S50 scooter.$/;"	e	enum:vhtype_id
veh_semi	veh_type.h	/^    veh_semi,  \/\/6L Semitruck. 10 wheels. Sleeper cab.$/;"	e	enum:vhtype_id
veh_truck	veh_type.h	/^    veh_truck,$/;"	e	enum:vhtype_id
veh_trucktrailer	veh_type.h	/^    veh_trucktrailer,  \/\/Just a trailer with 8 wheels.$/;"	e	enum:vhtype_id
veh_wagon	veh_type.h	/^    veh_wagon, \/\/ Dwarf Fortress Wagon$/;"	e	enum:vhtype_id
vehicle	vehicle.cpp	/^vehicle::vehicle(game *ag, vhtype_id type_id): g(ag), type(type_id)$/;"	f	class:vehicle
vehicle	vehicle.h	/^class vehicle$/;"	c
vehicle_controls	vehicle.cpp	/^enum vehicle_controls {$/;"	g	file:
vehicle_danger	npc.cpp	/^int npc::vehicle_danger(game *g, int radius)$/;"	f	class:npc
vehicle_list	map.h	/^ std::set<vehicle*> vehicle_list;$/;"	m	class:map
vehicle_near	game.cpp	/^bool game::vehicle_near ()$/;"	f	class:game
vehicle_part	vehicle.h	/^    vehicle_part() : id(vp_null), mount_dx(0), mount_dy(0), hp(0),$/;"	f	struct:vehicle_part
vehicle_part	vehicle.h	/^struct vehicle_part$/;"	s
vehicles	mapdata.h	/^ std::vector<vehicle*> vehicles;$/;"	m	struct:submap
vehmove	map.cpp	/^void map::vehmove(game *g)$/;"	f	class:map
vehproceed	map.cpp	/^bool map::vehproceed(game* g){$/;"	f	class:map
velo_vec	vehicle.cpp	/^rl_vec2d vehicle::velo_vec(){$/;"	f	class:vehicle
velocity	vehicle.h	/^    int velocity;       \/\/ vehicle current velocity, mph * 100$/;"	m	class:vehicle
vertical_move	game.cpp	/^void game::vertical_move(int movez, bool force)$/;"	f	class:game
very_wet	weather.cpp	/^void weather_effect::very_wet(game *g)$/;"	f	class:weather_effect
vhtype_id	veh_type.h	/^enum vhtype_id$/;"	g
view_offset_x	player.h	/^ int view_offset_x, view_offset_y;$/;"	m	class:player
view_offset_y	player.h	/^ int view_offset_x, view_offset_y;$/;"	m	class:player
vine	monattack.cpp	/^void mattack::vine(game *g, monster *z)$/;"	f	class:mattack
vine_cut	mondeath.cpp	/^void mdeath::vine_cut(game *g, monster *z)$/;"	f	class:mdeath
visibility	trap.h	/^ int visibility;\/\/ 1 to ??, affects detection$/;"	m	struct:trap
visible	overmap.h	/^ bool visible[OMAPX][OMAPY];$/;"	m	struct:map_layer
visiblity	pldata.h	/^ int visiblity;		\/\/ How visible it is--see below, at PF_MAX$/;"	m	struct:trait
volume	artifactdata.h	/^ int volume, weight; \/\/ Only applicable if this is an *extra* weapon$/;"	m	struct:artifact_weapon_datum
volume	artifactdata.h	/^ int volume, weight;$/;"	m	struct:artifact_armor_form_datum
volume	item.cpp	/^int item::volume()$/;"	f	class:item
volume	itype.h	/^ unsigned int volume;	\/\/ Space taken up by this item$/;"	m	struct:itype
volume_capacity	player.cpp	/^int player::volume_capacity()$/;"	f	class:player
volume_carried	player.cpp	/^int player::volume_carried()$/;"	f	class:player
volume_contained	item.cpp	/^int item::volume_contained()$/;"	f	class:item
volume_max	artifactdata.h	/^ int volume_min, volume_max;$/;"	m	struct:artifact_shape_datum
volume_max	artifactdata.h	/^ int volume_min, volume_max;$/;"	m	struct:artifact_tool_form_datum
volume_min	artifactdata.h	/^ int volume_min, volume_max;$/;"	m	struct:artifact_shape_datum
volume_min	artifactdata.h	/^ int volume_min, volume_max;$/;"	m	struct:artifact_tool_form_datum
vomit	player.cpp	/^void player::vomit(game *g)$/;"	f	class:player
vortex	iuse.cpp	/^void iuse::vortex(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
vortex	monattack.cpp	/^void mattack::vortex(game *g, monster *z)$/;"	f	class:mattack
vp_bed	veh_type.h	/^    vp_bed,$/;"	e	enum:vpart_id
vp_blade_h	veh_type.h	/^    vp_blade_h,$/;"	e	enum:vpart_id
vp_blade_v	veh_type.h	/^    vp_blade_v,$/;"	e	enum:vpart_id
vp_board_b	veh_type.h	/^    vp_board_b,$/;"	e	enum:vpart_id
vp_board_h	veh_type.h	/^    vp_board_h,$/;"	e	enum:vpart_id
vp_board_n	veh_type.h	/^    vp_board_n,$/;"	e	enum:vpart_id
vp_board_u	veh_type.h	/^    vp_board_u,$/;"	e	enum:vpart_id
vp_board_v	veh_type.h	/^    vp_board_v,$/;"	e	enum:vpart_id
vp_board_y	veh_type.h	/^    vp_board_y,$/;"	e	enum:vpart_id
vp_cargo_box	veh_type.h	/^    vp_cargo_box,   \/\/ over$/;"	e	enum:vpart_id
vp_cargo_trunk	veh_type.h	/^    vp_cargo_trunk, \/\/ over$/;"	e	enum:vpart_id
vp_controls	veh_type.h	/^    vp_controls,$/;"	e	enum:vpart_id
vp_door	veh_type.h	/^    vp_door,$/;"	e	enum:vpart_id
vp_door_i	veh_type.h	/^    vp_door_i,$/;"	e	enum:vpart_id
vp_door_o	veh_type.h	/^    vp_door_o,$/;"	e	enum:vpart_id
vp_engine_foot_crank	veh_type.h	/^    vp_engine_foot_crank,$/;"	e	enum:vpart_id
vp_engine_gas_1cyl	veh_type.h	/^    vp_engine_gas_1cyl,$/;"	e	enum:vpart_id
vp_engine_gas_i4	veh_type.h	/^    vp_engine_gas_i4,$/;"	e	enum:vpart_id
vp_engine_gas_v2	veh_type.h	/^    vp_engine_gas_v2,$/;"	e	enum:vpart_id
vp_engine_gas_v6	veh_type.h	/^    vp_engine_gas_v6,$/;"	e	enum:vpart_id
vp_engine_gas_v8	veh_type.h	/^    vp_engine_gas_v8,$/;"	e	enum:vpart_id
vp_engine_motor	veh_type.h	/^    vp_engine_motor,$/;"	e	enum:vpart_id
vp_engine_motor_large	veh_type.h	/^    vp_engine_motor_large,$/;"	e	enum:vpart_id
vp_engine_plasma	veh_type.h	/^    vp_engine_plasma,$/;"	e	enum:vpart_id
vp_flamethrower	veh_type.h	/^    vp_flamethrower,$/;"	e	enum:vpart_id
vp_floor_trunk	veh_type.h	/^    vp_floor_trunk,$/;"	e	enum:vpart_id
vp_frame_b	veh_type.h	/^    vp_frame_b,$/;"	e	enum:vpart_id
vp_frame_c	veh_type.h	/^    vp_frame_c,$/;"	e	enum:vpart_id
vp_frame_cover	veh_type.h	/^    vp_frame_cover,$/;"	e	enum:vpart_id
vp_frame_h	veh_type.h	/^    vp_frame_h,$/;"	e	enum:vpart_id
vp_frame_h2	veh_type.h	/^    vp_frame_h2,$/;"	e	enum:vpart_id
vp_frame_handle	veh_type.h	/^    vp_frame_handle,$/;"	e	enum:vpart_id
vp_frame_n	veh_type.h	/^    vp_frame_n,$/;"	e	enum:vpart_id
vp_frame_u	veh_type.h	/^    vp_frame_u,$/;"	e	enum:vpart_id
vp_frame_v	veh_type.h	/^    vp_frame_v,$/;"	e	enum:vpart_id
vp_frame_v2	veh_type.h	/^    vp_frame_v2,$/;"	e	enum:vpart_id
vp_frame_y	veh_type.h	/^    vp_frame_y,$/;"	e	enum:vpart_id
vp_fuel_tank_batt	veh_type.h	/^    vp_fuel_tank_batt,$/;"	e	enum:vpart_id
vp_fuel_tank_gas	veh_type.h	/^    vp_fuel_tank_gas,$/;"	e	enum:vpart_id
vp_fuel_tank_hydrogen	veh_type.h	/^    vp_fuel_tank_hydrogen,$/;"	e	enum:vpart_id
vp_fuel_tank_plut	veh_type.h	/^    vp_fuel_tank_plut,$/;"	e	enum:vpart_id
vp_fuel_tank_water	veh_type.h	/^    vp_fuel_tank_water,$/;"	e	enum:vpart_id
vp_hard_plate	veh_type.h	/^    vp_hard_plate,$/;"	e	enum:vpart_id
vp_head_light	veh_type.h	/^    vp_head_light,$/;"	e	enum:vpart_id
vp_isle_h2	veh_type.h	/^    vp_isle_h2,$/;"	e	enum:vpart_id
vp_isle_v2	veh_type.h	/^    vp_isle_v2,$/;"	e	enum:vpart_id
vp_kitchen_unit	veh_type.h	/^    vp_kitchen_unit,$/;"	e	enum:vpart_id
vp_m249	veh_type.h	/^    vp_m249,$/;"	e	enum:vpart_id
vp_muffler	veh_type.h	/^    vp_muffler,$/;"	e	enum:vpart_id
vp_null	veh_type.h	/^    vp_null = 0,$/;"	e	enum:vpart_id
vp_plasmagun	veh_type.h	/^    vp_plasmagun,$/;"	e	enum:vpart_id
vp_roof	veh_type.h	/^    vp_roof,$/;"	e	enum:vpart_id
vp_seat	veh_type.h	/^    vp_seat,$/;"	e	enum:vpart_id
vp_seatbelt	veh_type.h	/^    vp_seatbelt,$/;"	e	enum:vpart_id
vp_solar_panel	veh_type.h	/^    vp_solar_panel,$/;"	e	enum:vpart_id
vp_spike_h	veh_type.h	/^    vp_spike_h,$/;"	e	enum:vpart_id
vp_spike_v	veh_type.h	/^    vp_spike_v = vp_spike_h,$/;"	e	enum:vpart_id
vp_spiked_plate	veh_type.h	/^    vp_spiked_plate,$/;"	e	enum:vpart_id
vp_steel_plate	veh_type.h	/^    vp_steel_plate,$/;"	e	enum:vpart_id
vp_superalloy_plate	veh_type.h	/^    vp_superalloy_plate,$/;"	e	enum:vpart_id
vp_wheel	veh_type.h	/^    vp_wheel,$/;"	e	enum:vpart_id
vp_wheel_bicycle	veh_type.h	/^    vp_wheel_bicycle,$/;"	e	enum:vpart_id
vp_wheel_motorbike	veh_type.h	/^    vp_wheel_motorbike,$/;"	e	enum:vpart_id
vp_wheel_small	veh_type.h	/^    vp_wheel_small,$/;"	e	enum:vpart_id
vp_wheel_wide	veh_type.h	/^    vp_wheel_wide,$/;"	e	enum:vpart_id
vp_window	veh_type.h	/^    vp_window,$/;"	e	enum:vpart_id
vpart_flags	veh_type.h	/^enum vpart_flags$/;"	g
vpart_id	veh_type.h	/^enum vpart_id$/;"	g
vpart_info	veh_type.h	/^struct vpart_info$/;"	s
vpart_item	veh_interact.cpp	/^   item vpart_item;$/;"	m	struct:candidate_vpart	file:
vpart_list	veh_type.h	/^const vpart_info vpart_list[num_vparts] =$/;"	v
vpf_armor	veh_type.h	/^    vpf_armor,              \/\/ is armor plating$/;"	e	enum:vpart_flags
vpf_bed	veh_type.h	/^    vpf_bed,                \/\/ is bed (like seat, but can't be boarded)$/;"	e	enum:vpart_flags
vpf_cargo	veh_type.h	/^    vpf_cargo,              \/\/ is cargo$/;"	e	enum:vpart_flags
vpf_controls	veh_type.h	/^    vpf_controls,           \/\/ is controls$/;"	e	enum:vpart_flags
vpf_engine	veh_type.h	/^    vpf_engine,             \/\/ is engine$/;"	e	enum:vpart_flags
vpf_external	veh_type.h	/^    vpf_external,           \/\/ can be mounted as external part$/;"	e	enum:vpart_flags
vpf_fuel_tank	veh_type.h	/^    vpf_fuel_tank,          \/\/ is fuel tank$/;"	e	enum:vpart_flags
vpf_func_begin	veh_type.h	/^    vpf_func_begin  = vpf_over,$/;"	e	enum:vpart_flags
vpf_func_end	veh_type.h	/^    vpf_func_end    = vpf_light,$/;"	e	enum:vpart_flags
vpf_internal	veh_type.h	/^    vpf_internal,           \/\/ can be mounted inside other part$/;"	e	enum:vpart_flags
vpf_isle	veh_type.h	/^    vpf_isle,               \/\/ is isle (no extra movement cost)$/;"	e	enum:vpart_flags
vpf_kitchen	veh_type.h	/^    vpf_kitchen,            \/\/ is kitchen$/;"	e	enum:vpart_flags
vpf_light	veh_type.h	/^    vpf_light,              \/\/ generates light arc$/;"	e	enum:vpart_flags
vpf_mount_inner	veh_type.h	/^    vpf_mount_inner,        \/\/ allows mounting internal parts inside it (or over it)$/;"	e	enum:vpart_flags
vpf_mount_over	veh_type.h	/^    vpf_mount_over,         \/\/ allows mounting parts like cargo trunk over it$/;"	e	enum:vpart_flags
vpf_mount_point	veh_type.h	/^    vpf_mount_point,        \/\/ allows mounting other parts to it$/;"	e	enum:vpart_flags
vpf_muffler	veh_type.h	/^    vpf_muffler,            \/\/ is muffler$/;"	e	enum:vpart_flags
vpf_no_reinforce	veh_type.h	/^    vpf_no_reinforce,       \/\/ can't reinforce this part with armor plates$/;"	e	enum:vpart_flags
vpf_obstacle	veh_type.h	/^    vpf_obstacle,           \/\/ can't pass through it$/;"	e	enum:vpart_flags
vpf_opaque	veh_type.h	/^    vpf_opaque,             \/\/ can't see through it$/;"	e	enum:vpart_flags
vpf_openable	veh_type.h	/^    vpf_openable,           \/\/ can open\/close it$/;"	e	enum:vpart_flags
vpf_over	veh_type.h	/^    vpf_over,               \/\/ can be mounted over other part$/;"	e	enum:vpart_flags
vpf_roof	veh_type.h	/^    vpf_roof,               \/\/ is a roof (cover)$/;"	e	enum:vpart_flags
vpf_seat	veh_type.h	/^    vpf_seat,               \/\/ is seat$/;"	e	enum:vpart_flags
vpf_seatbelt	veh_type.h	/^    vpf_seatbelt,           \/\/ is seatbelt$/;"	e	enum:vpart_flags
vpf_sharp	veh_type.h	/^    vpf_sharp,              \/\/ cutting damage instead of bashing$/;"	e	enum:vpart_flags
vpf_solar_panel	veh_type.h	/^    vpf_solar_panel,        \/\/ is solar panel$/;"	e	enum:vpart_flags
vpf_turret	veh_type.h	/^    vpf_turret,             \/\/ is turret$/;"	e	enum:vpart_flags
vpf_unmount_on_damage	veh_type.h	/^    vpf_unmount_on_damage,  \/\/ when damaged, part is unmounted, rather than broken$/;"	e	enum:vpart_flags
vpf_variable_size	veh_type.h	/^    vpf_variable_size,      \/\/ has 'bigness' for power, wheel radius, etc.$/;"	e	enum:vpart_flags
vpf_wheel	veh_type.h	/^    vpf_wheel,              \/\/ this part touches ground (trigger traps)$/;"	e	enum:vpart_flags
vtypes	game.h	/^  std::vector <vehicle*> vtypes;$/;"	m	class:game
w_HP	game.h	/^  WINDOW *w_HP;$/;"	m	class:game
w_disp	veh_interact.h	/^    WINDOW *w_disp;$/;"	m	class:veh_interact
w_grid	veh_interact.h	/^    WINDOW *w_grid;$/;"	m	class:veh_interact
w_list	veh_interact.h	/^    WINDOW *w_list;$/;"	m	class:veh_interact
w_location	game.h	/^  WINDOW *w_location;$/;"	m	class:game
w_messages	game.h	/^  WINDOW *w_messages;$/;"	m	class:game
w_minimap	game.h	/^  WINDOW *w_minimap;$/;"	m	class:game
w_mode	veh_interact.h	/^    WINDOW *w_mode;$/;"	m	class:veh_interact
w_moninfo	game.h	/^  WINDOW *w_moninfo;$/;"	m	class:game
w_msg	veh_interact.h	/^    WINDOW *w_msg;$/;"	m	class:veh_interact
w_parts	veh_interact.h	/^    WINDOW *w_parts;$/;"	m	class:veh_interact
w_stats	veh_interact.h	/^    WINDOW *w_stats;$/;"	m	class:veh_interact
w_status	game.h	/^  WINDOW *w_status;$/;"	m	class:game
w_terminal	computer.h	/^ WINDOW *w_terminal; \/\/ Output window$/;"	m	class:computer
w_terrain	game.h	/^  WINDOW *w_terrain;$/;"	m	class:game
w_void	game.h	/^  WINDOW *w_void; \/\/space unter status if viewport Y > 12$/;"	m	class:game
waddch	catacurse.cpp	/^int waddch(WINDOW *win, const chtype ch)$/;"	f
wait	game.cpp	/^void game::wait()$/;"	f	class:game
wander	monmove.cpp	/^bool monster::wander()$/;"	f	class:monster
wander_to	monmove.cpp	/^void monster::wander_to(int x, int y, int f)$/;"	f	class:monster
wandf	monster.h	/^ int wandf;	   \/\/ Urge to wander - Increased by sound, decrements each move$/;"	m	class:monster
wandf	npc.h	/^ int wandx, wandy, wandf;	\/\/ Location of heard sound, etc.$/;"	m	class:npc
wandx	monster.h	/^ int wandx, wandy; \/\/ Wander destination - Just try to move in that direction$/;"	m	class:monster
wandx	npc.h	/^ int wandx, wandy, wandf;	\/\/ Location of heard sound, etc.$/;"	m	class:npc
wandy	monster.h	/^ int wandx, wandy; \/\/ Wander destination - Just try to move in that direction$/;"	m	class:monster
wandy	npc.h	/^ int wandx, wandy, wandf;	\/\/ Location of heard sound, etc.$/;"	m	class:npc
wants_to_travel_with	npc.cpp	/^bool npc::wants_to_travel_with(player *p)$/;"	f	class:npc
warmth	artifactdata.h	/^ int warmth;$/;"	m	struct:artifact_armor_form_datum
warmth	itype.h	/^ signed char warmth;$/;"	m	struct:it_armor
warmth	player.cpp	/^int player::warmth(body_part bp)$/;"	f	class:player
water	overmap.cpp	/^bool omspec_place::water(overmap *om, tripoint p)$/;"	f	class:omspec_place
water_from	map.cpp	/^item map::water_from(const int x, const int y)$/;"	f	class:map
water_purifier	iuse.cpp	/^void iuse::water_purifier(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
wattroff	catacurse.cpp	/^int wattroff(WINDOW *win, int attrs)$/;"	f
wattron	catacurse.cpp	/^int wattron(WINDOW *win, int attrs)$/;"	f
wave_difficulty	gamemode.h	/^ int wave_difficulty; \/\/ Increased "level" of monsters per wave$/;"	m	struct:defense_game
waves_between_caravans	gamemode.h	/^ int waves_between_caravans; \/\/ How many waves until we get to trade?$/;"	m	struct:defense_game
wborder	catacurse.cpp	/^int wborder(WINDOW *win, chtype ls, chtype rs, chtype ts, chtype bs, chtype tl, chtype tr, chtype bl, chtype br)$/;"	f
wclear	catacurse.cpp	/^int wclear(WINDOW *win)$/;"	f
weapname	player.cpp	/^std::string player::weapname(bool charges)$/;"	f	class:player
weapon	player.h	/^ item weapon;$/;"	m	class:player
weapon_value	item.cpp	/^int item::weapon_value(int skills[num_skill_types])$/;"	f	class:item
wear	game.cpp	/^void game::wear(char chInput)$/;"	f	class:game
wear	player.cpp	/^bool player::wear(game *g, char let)$/;"	f	class:player
wear_if_wanted	npc.cpp	/^bool npc::wear_if_wanted(item it)$/;"	f	class:npc
wear_item	player.cpp	/^bool player::wear_item(game *g, item *to_wear)$/;"	f	class:player
wearing_something_on	player.cpp	/^bool player::wearing_something_on(body_part bp)$/;"	f	class:player
weather	game.h	/^  weather_type weather;			\/\/ Weather pattern--SEE weather.h$/;"	m	class:game
weather_data	weather_data.h	/^weather_datum weather_data[NUM_WEATHER_TYPES] = {$/;"	v
weather_datum	weather.h	/^struct weather_datum$/;"	s
weather_effect	weather.h	/^struct weather_effect$/;"	s
weather_shift	weather_data.h	/^int weather_shift[4][NUM_WEATHER_TYPES][NUM_WEATHER_TYPES] = {$/;"	v
weather_type	weather.h	/^enum weather_type {$/;"	g
weed	iuse.cpp	/^void iuse::weed(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
weight	artifactdata.h	/^ int volume, weight; \/\/ Only applicable if this is an *extra* weapon$/;"	m	struct:artifact_weapon_datum
weight	artifactdata.h	/^ int volume, weight;$/;"	m	struct:artifact_armor_form_datum
weight	item.cpp	/^int item::weight()$/;"	f	class:item
weight	itype.h	/^ unsigned int weight;	\/\/ Weight in quarter-pounds; is 64 lbs max ok?$/;"	m	struct:itype
weight_capacity	player.cpp	/^int player::weight_capacity(bool real_life)$/;"	f	class:player
weight_carried	player.cpp	/^int player::weight_carried()$/;"	f	class:player
weight_dragged	game.h	/^  int weight_dragged; \/\/ Computed once, when you start dragging$/;"	m	class:game
weight_max	artifactdata.h	/^ int weight_min, weight_max;$/;"	m	struct:artifact_shape_datum
weight_max	artifactdata.h	/^ int weight_min, weight_max;$/;"	m	struct:artifact_tool_form_datum
weight_min	artifactdata.h	/^ int weight_min, weight_max;$/;"	m	struct:artifact_shape_datum
weight_min	artifactdata.h	/^ int weight_min, weight_max;$/;"	m	struct:artifact_tool_form_datum
werase	catacurse.cpp	/^int werase(WINDOW *win)$/;"	f
wet	weather.cpp	/^void weather_effect::wet(game *g)$/;"	f	class:weather_effect
wheel_width	veh_type.h	/^        int wheel_width;\/\/ wheel width in inches. car could be 9, bicycle could be 2.$/;"	m	union:vpart_info::__anon10
wheels_area	vehicle.cpp	/^float vehicle::wheels_area (int *cnt)$/;"	f	class:vehicle
width	catacurse.h	/^  int width;\/\/width of the curses window$/;"	m	struct:__anon3
wield	game.cpp	/^void game::wield(char chInput)$/;"	f	class:game
wield	npc.cpp	/^bool npc::wield(game *g, int index)$/;"	f	class:npc
wield	player.cpp	/^bool player::wield(game *g, int index)$/;"	f	class:player
wield_best_melee	npcmove.cpp	/^void npc::wield_best_melee(game *g)$/;"	f	class:npc
wilderness	overmap.cpp	/^bool omspec_place::wilderness(overmap *om, tripoint p)$/;"	f	class:omspec_place
will_reach	monmove.cpp	/^bool monster::will_reach(game *g, int x, int y)$/;"	f	class:monster
win	dialogue.h	/^ WINDOW *win;$/;"	m	struct:dialogue
windowsPalette	catacurse.cpp	/^RGBQUAD *windowsPalette;  \/\/The coor palette, 16 colors emulates a terminal$/;"	v
winh1	veh_interact.h	/^    int winh1;$/;"	m	class:veh_interact
winh2	veh_interact.h	/^    int winh2;$/;"	m	class:veh_interact
winh23	veh_interact.h	/^    int winh23;$/;"	m	class:veh_interact
winh3	veh_interact.h	/^    int winh3;$/;"	m	class:veh_interact
winw1	veh_interact.h	/^    int winw1;$/;"	m	class:veh_interact
winw12	veh_interact.h	/^    int winw12;$/;"	m	class:veh_interact
winw2	veh_interact.h	/^    int winw2;$/;"	m	class:veh_interact
winw3	veh_interact.h	/^    int winw3;$/;"	m	class:veh_interact
winx1	veh_interact.h	/^    int winx1;$/;"	m	class:veh_interact
winx2	veh_interact.h	/^    int winx2;$/;"	m	class:veh_interact
winy1	veh_interact.h	/^    int winy1;$/;"	m	class:veh_interact
winy2	veh_interact.h	/^    int winy2;$/;"	m	class:veh_interact
wish	wish.cpp	/^void game::wish()$/;"	f	class:game
wmove	catacurse.cpp	/^int wmove(WINDOW *win, int y, int x)$/;"	f
wont_hit_friend	npcmove.cpp	/^bool npc::wont_hit_friend(game *g, int tarx, int tary, int index)$/;"	f	class:npc
word_rewrap	output.cpp	/^std::string word_rewrap (const std::string &in, int width){$/;"	f
worm	mondeath.cpp	/^void mdeath::worm(game *g, monster *z)$/;"	f	class:mdeath
worn	player.h	/^ std::vector <item> worn;$/;"	m	class:player
worst_item_value	npc.h	/^ int  worst_item_value; \/\/ The value of our least-wanted item$/;"	m	class:npc
wprintw	catacurse.cpp	/^int wprintw(WINDOW *win, const char *fmt, ...)$/;"	f
wprintz	output.cpp	/^void wprintz(WINDOW *w, nc_color FG, const char *mes, ...)$/;"	f
wputch	output.cpp	/^void wputch(WINDOW* w, nc_color FG, long ch)$/;"	f
wrap_up_mission	game.cpp	/^void game::wrap_up_mission(int id)$/;"	f	class:game
wrapped_vehicle	map.h	/^struct wrapped_vehicle{$/;"	s
wreckage	iexamine.cpp	/^void iexamine::wreckage(game *g, player *p, map *m, int examx, int examy) {$/;"	f	class:iexamine
wrefresh	catacurse.cpp	/^int wrefresh(WINDOW *win)$/;"	f
write_msg	game.cpp	/^void game::write_msg()$/;"	f	class:game
x	catacurse.h	/^  int x;\/\/left side of window$/;"	m	struct:__anon3
x	enums.h	/^ int x;$/;"	m	struct:point
x	enums.h	/^ int x;$/;"	m	struct:tripoint
x	line.h	/^ float x;$/;"	m	struct:rl_vec2d
x	map.h	/^ int x;$/;"	m	struct:wrapped_vehicle
x	overmap.h	/^ int x;$/;"	m	struct:city
x	overmap.h	/^ int x;$/;"	m	struct:om_note
x	overmap.h	/^ int x;$/;"	m	struct:radio_tower
x_in_y	rng.cpp	/^bool x_in_y(double x, double y)$/;"	f
xanax	iuse.cpp	/^void iuse::xanax(game *g, player *p, item *it, bool t)$/;"	f	class:iuse
xp_pool	player.h	/^ int xp_pool;$/;"	m	class:player
y	catacurse.h	/^  int y;\/\/top side of window$/;"	m	struct:__anon3
y	enums.h	/^ int y;$/;"	m	struct:point
y	enums.h	/^ int y;$/;"	m	struct:tripoint
y	line.h	/^ float y;$/;"	m	struct:rl_vec2d
y	map.h	/^ int y;$/;"	m	struct:wrapped_vehicle
y	overmap.h	/^ int y;$/;"	m	struct:city
y	overmap.h	/^ int y;$/;"	m	struct:om_note
y	overmap.h	/^ int y;$/;"	m	struct:radio_tower
year	calendar.h	/^  int year;$/;"	m	class:calendar
z	enums.h	/^ int z;$/;"	m	struct:tripoint
z	game.h	/^  std::vector<monster> z;$/;"	m	class:game
zg	overmap.h	/^  std::vector<mongroup> zg;$/;"	m	class:overmap
zombies	gamemode.h	/^ bool zombies;$/;"	m	struct:defense_game
~DebugFile	debug.cpp	/^DebugFile::~DebugFile()$/;"	f	class:DebugFile
~DebugLog	debug.h	/^	~DebugLog() {$/;"	f	struct:DebugLog
~computer	computer.cpp	/^computer::~computer()$/;"	f	class:computer
~faction	faction.cpp	/^faction::~faction()$/;"	f	class:faction
~game	game.cpp	/^game::~game()$/;"	f	class:game
~graffiti	graffiti.cpp	/^graffiti::~graffiti()$/;"	f	class:graffiti
~item	item.cpp	/^item::~item()$/;"	f	class:item
~map	map.cpp	/^map::~map()$/;"	f	class:map
~mapbuffer	mapbuffer.cpp	/^mapbuffer::~mapbuffer()$/;"	f	class:mapbuffer
~monster	monster.cpp	/^monster::~monster()$/;"	f	class:monster
~npc	npc.cpp	/^npc::~npc() { }$/;"	f	class:npc
~overmap	overmap.cpp	/^overmap::~overmap()$/;"	f	class:overmap
~player	player.cpp	/^player::~player()$/;"	f	class:player
~point	enums.h	/^ ~point(){}$/;"	f	struct:point
~rl_vec2d	line.h	/^ ~rl_vec2d(){}$/;"	f	struct:rl_vec2d
~tinymap	map.cpp	/^tinymap::~tinymap()$/;"	f	class:tinymap
~tripoint	enums.h	/^ ~tripoint(){}$/;"	f	struct:tripoint
~value	picojson.h	/^  inline value::~value() {$/;"	f	class:picojson::value
~vehicle	vehicle.cpp	/^vehicle::~vehicle()$/;"	f	class:vehicle
