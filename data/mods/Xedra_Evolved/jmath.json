[
  {
    "type": "jmath_function",
    "id": "dreamer_level",
    "num_args": 1,
    "return": "(u_val('intelligence') + u_val('perception')) * (_0)"
  },
  {
    "type": "jmath_function",
    "id": "eater_level",
    "num_args": 1,
    "return": "(u_val('strength') + u_val('dexterity')) * (_0)"
  },
  {
    "type": "jmath_function",
    "id": "spell_time",
    "num_args": 1,
    "//": "used to transform the variable time (the smallest measure is 1 second) to the spell time (the smallest measure is 1 move, 1 second = 100 moves)",
    "return": "_0 * 100"
  },
  {
    "type": "jmath_function",
    "id": "spell_exp_diff",
    "num_args": 1,
    "//": "accept the spell level, return a difference in experience between spell's current level and the next level",
    "return": "spell_exp_for_level(_0 + 1) - spell_exp_for_level(_0)"
  },
  {
    "type": "jmath_function",
    "id": "spell_train_factor",
    "num_args": 1,
    "//": "accept the spell _cost, return how much spellcasts required to level the spell",
    "//2": "formula assumes 1000 (plus 500 for eaters) as half of player's default mana pool, and 40 is flat modifier to prevent cheap spells cost ungodly lot of time and micromanagement to level them",
    "return": "(( u_has_trait('EATER')*500)+1000)/(_0 > 0 ? _0 + 40 : 0)"
  },
  {
    "type": "jmath_function",
    "id": "int_to_level",
    "num_args": 1,
    "return": "(u_val('intelligence') * 1.5) * (_0)"
  },
  {
    "type": "jmath_function",
    "id": "dex_to_level",
    "num_args": 1,
    "return": "(u_val('dexterity') * 1.5) * (_0)"
  },
  {
    "type": "jmath_function",
    "id": "per_to_level",
    "num_args": 1,
    "return": "(u_val('perception') * 1.5) * (_0)"
  },
  {
    "type": "jmath_function",
    "id": "str_to_level",
    "num_args": 1,
    "return": "(u_val('strength') * 1.5) * (_0)"
  },
  {
    "type": "jmath_function",
    "id": "scaling_factor",
    "num_args": 1,
    "return": "( ( _0 + 10) / 20 )"
  },
  {
    "type": "jmath_function",
    "id": "paraclesian_passive_spell_exp",
    "num_args": 1,
    "return": "u_skill('deduction') * 100 + _0"
  },
  {
    "type": "jmath_function",
    "id": "paraclesian_post_threshold_doubler",
    "//": "Used to double various factors for a post-threshold bonus.  Should never more than double the initial input.",
    "num_args": 1,
    "return": "_0 + (1 * (u_has_trait('THRESH_ARVORE') + u_has_trait('THRESH_IERDE') + u_has_trait('THRESH_HOMULLUS') + u_has_trait('THRESH_SALAMANDER') + u_has_trait('THRESH_SYLPH') + u_has_trait('THRESH_UNDINE')) )"
  },
  {
    "type": "jmath_function",
    "id": "temperature_speed_mod_salamander",
    "//": "copy of temperature_speed_mod(), but allows both speed increase and speed decrease - positive value would decrease your speed if temperature is low, and increase, if temperature is high.",
    "//_0": "Temperature limit, after which the speed starts to change, in farenheit",
    "//_1": "How big the speed changes per 1 degree",
    "num_args": 2,
    "return": "(fahrenheit(weather('temperature')) - _0 + u_climate_control_str_heat()) * _1"
  }
]
