[
  {
    "type": "jmath_function",
    "id": "dreamer_level",
    "num_args": 1,
    "return": "(u_val('intelligence') + u_val('perception')) * (_0)"
  },
  {
    "type": "jmath_function",
    "id": "eater_level",
    "num_args": 1,
    "return": "(u_val('strength') + u_val('dexterity')) * (_0)"
  },
  {
    "type": "jmath_function",
    "id": "xedra_chronomancer_level",
    "num_args": 1,
    "return": "(2 * u_val('intelligence') ) * (_0)"
  },
  {
    "type": "jmath_function",
    "id": "xedra_chron_spell_calc",
    "num_args": 3,
    "return": " ((_0 * _1) + _2) * scaling_factor(u_val('intelligence'))"
  },
  {
    "type": "jmath_function",
    "id": "spell_time",
    "num_args": 1,
    "//": "used to transform the variable time (the smallest measure is 1 second) to the spell time (the smallest measure is 1 move, 1 second = 100 moves)",
    "return": "_0 * 100"
  },
  {
    "type": "jmath_function",
    "id": "xedra_chronomancer_formula_get_level",
    "num_args": 1,
    "return": "_0 / 1"
  },
  {
    "type": "jmath_function",
    "id": "xedra_chronomancer_formula_exp_for_level",
    "num_args": 1,
    "return": "1 * _0"
  },
  {
    "type": "jmath_function",
    "id": "xedra_chronomancer_formula_exp_per_cast",
    "num_args": 1,
    "return": "0 * _0"
  },
  {
    "type": "jmath_function",
    "id": "xedra_dream_formula_get_level",
    "num_args": 1,
    "return": "_0 / 300"
  },
  {
    "type": "jmath_function",
    "id": "xedra_dream_formula_exp_for_level",
    "num_args": 1,
    "return": "_0 * 300"
  },
  {
    "type": "jmath_function",
    "id": "xedra_dream_casting_xp_formula",
    "num_args": 0,
    "return": "100"
  },
  {
    "type": "jmath_function",
    "id": "xe_fey_seasonal_magick_spring_failure_chance",
    "num_args": 0,
    "return": "global_what_is_the_season == 3 ? max(xe_fey_seasonal_magick_spring_failure_chance_actual(), 0.05) : xe_fey_seasonal_magick_spring_failure_chance_actual()"
  },
  {
    "type": "jmath_function",
    "id": "xe_fey_seasonal_magick_spring_failure_chance_actual",
    "//": "This and below separations are necessary to keep the 'You cannot go below 5% chance to fail in the opposite season' logic",
    "num_args": 0,
    "return": "(0.15 + (global_what_is_the_season == 2 ? 0.15 : 0 ) + (global_what_is_the_season == 3 ? 0.35 : 0 ) + (global_what_is_the_season == 4 ? 0.15 : 0 ) + (u_spell_difficulty(_spell_id) * 0.09 ) + xe_fey_magick_mana_penalty() ) - ( (u_skill('deduction') * 0.06) + (u_spell_count('school': 'CHANGELING_SEASONAL_MAGIC_SPRING') * 0.04) )"
  },
  {
    "type": "jmath_function",
    "id": "xe_fey_seasonal_magick_summer_failure_chance",
    "num_args": 0,
    "return": "global_what_is_the_season == 4 ? max(xe_fey_seasonal_magick_summer_failure_chance_actual(), 0.05) : xe_fey_seasonal_magick_summer_failure_chance_actual()"
  },
  {
    "type": "jmath_function",
    "id": "xe_fey_seasonal_magick_summer_failure_chance_actual",
    "num_args": 0,
    "return": "(0.15 + (global_what_is_the_season == 1 ? 0.15 : 0 ) + (global_what_is_the_season == 3 ? 0.15 : 0 ) + (global_what_is_the_season == 4 ? 0.35 : 0 ) + (u_spell_difficulty(_spell_id) * 0.09 ) + xe_fey_magick_mana_penalty() ) - ( (u_skill('deduction') * 0.06) + (u_spell_count('school': 'CHANGELING_SEASONAL_MAGIC_SUMMER') * 0.04) )"
  },
  {
    "type": "jmath_function",
    "id": "xe_fey_seasonal_magick_autumn_failure_chance",
    "num_args": 0,
    "return": "global_what_is_the_season == 1 ? max(xe_fey_seasonal_magick_autumn_failure_chance_actual(), 0.05) : xe_fey_seasonal_magick_autumn_failure_chance_actual()"
  },
  {
    "type": "jmath_function",
    "id": "xe_fey_seasonal_magick_autumn_failure_chance_actual",
    "num_args": 0,
    "return": "(0.15 + (global_what_is_the_season == 1 ? 0.35 : 0 ) + (global_what_is_the_season == 2 ? 0.15 : 0 ) + (global_what_is_the_season == 4 ? 0.15 : 0 ) + (u_spell_difficulty(_spell_id) * 0.09 ) + xe_fey_magick_mana_penalty() ) - ( (u_skill('deduction') * 0.06) + (u_spell_count('school': 'CHANGELING_SEASONAL_MAGIC_AUTUMN') * 0.04) )"
  },
  {
    "type": "jmath_function",
    "id": "xe_fey_seasonal_magick_winter_failure_chance",
    "num_args": 0,
    "return": "global_what_is_the_season == 2 ? max(xe_fey_seasonal_magick_winter_failure_chance_actual(), 0.05) : xe_fey_seasonal_magick_winter_failure_chance_actual()"
  },
  {
    "type": "jmath_function",
    "id": "xe_fey_seasonal_magick_winter_failure_chance_actual",
    "num_args": 0,
    "return": "(0.15 + (global_what_is_the_season == 1 ? 0.15 : 0 ) + (global_what_is_the_season == 2 ? 0.35 : 0 ) + (global_what_is_the_season == 3 ? 0.15 : 0 ) + (u_spell_difficulty(_spell_id) * 0.09 ) + xe_fey_magick_mana_penalty() ) - ( (u_skill('deduction') * 0.06) + (u_spell_count('school': 'CHANGELING_SEASONAL_MAGIC_WINTER') * 0.04) )"
  },
  {
    "type": "jmath_function",
    "id": "xe_fey_magick_mana_penalty",
    "num_args": 0,
    "return": "u_val('mana') < (u_val('mana_max') / 2) ? xe_fey_magick_mana_penalty_secondary() : 0"
  },
  {
    "type": "jmath_function",
    "id": "xe_fey_magick_mana_penalty_secondary",
    "num_args": 0,
    "return": "(1 - ( u_val('mana') / u_val('mana_max') ) - 0.2) / 1.5"
  },
  {
    "type": "jmath_function",
    "id": "spell_train_factor",
    "num_args": 1,
    "//": "accept the spell _cost, return how much spellcasts required to level the spell",
    "//2": "formula assumes 1000 (plus 500 for eaters) as half of player's default mana pool, and 40 is flat modifier to prevent cheap spells cost ungodly lot of time and micromanagement to level them",
    "return": "(( u_has_trait('EATER')*500)+1000)/(_0 > 0 ? _0 + 40 : 0)"
  },
  {
    "type": "jmath_function",
    "id": "int_to_level",
    "num_args": 1,
    "return": "(u_val('intelligence') * 1.5) * (_0)"
  },
  {
    "type": "jmath_function",
    "id": "dex_to_level",
    "num_args": 1,
    "return": "(u_val('dexterity') * 1.5) * (_0)"
  },
  {
    "type": "jmath_function",
    "id": "per_to_level",
    "num_args": 1,
    "return": "(u_val('perception') * 1.5) * (_0)"
  },
  {
    "type": "jmath_function",
    "id": "str_to_level",
    "num_args": 1,
    "return": "(u_val('strength') * 1.5) * (_0)"
  },
  {
    "type": "jmath_function",
    "id": "scaling_factor",
    "num_args": 1,
    "return": "( ( _0 + 10) / 20 )"
  },
  {
    "type": "jmath_function",
    "id": "paraclesian_passive_spell_exp",
    "num_args": 1,
    "return": "u_skill('deduction') * 100 + _0"
  },
  {
    "type": "jmath_function",
    "id": "xedra_chron_toggled_spell_count",
    "num_args": 0,
    "return": "( u_effect_intensity('effect_xedra_chronomancer_chronal_accel') > 0 ? 1 : 0 ) + ( u_effect_intensity('effect_xedra_chronomancer_destabilizing_strikes') > 0 ? 1 : 0 ) + ( u_effect_intensity('effect_xedra_chronomancer_stabilize_timeline') > 0 ? 1 : 0 ) + ( u_effect_intensity('effect_xedra_chronomancer_reverse_entropy') > 0 ? 1 : 0 ) + ( u_effect_intensity('effect_xedra_chronomancer_stable_timeloop') > 0 ? 1 : 0 )"
  },
  {
    "type": "jmath_function",
    "id": "paraclesian_post_threshold_doubler",
    "//": "Used to double various factors for a post-threshold bonus.  Should never more than double the initial input.",
    "num_args": 1,
    "return": "_0 + (1 * (u_has_trait('THRESH_ARVORE') + u_has_trait('THRESH_IERDE') + u_has_trait('THRESH_HOMULLUS') + u_has_trait('THRESH_SALAMANDER') + u_has_trait('THRESH_SYLPH') + u_has_trait('THRESH_UNDINE')) )"
  },
  {
    "type": "jmath_function",
    "id": "temperature_speed_mod_salamander",
    "//": "copy of temperature_speed_mod(), but allows both speed increase and speed decrease - positive value would decrease your speed if temperature is low, and increase, if temperature is high.",
    "//_0": "Temperature limit, after which the speed starts to change, in farenheit",
    "//_1": "How big the speed changes per 1 degree",
    "num_args": 2,
    "return": "(fahrenheit(weather('temperature')) - _0 + u_climate_control_str_heat()) * _1"
  },
  {
    "type": "jmath_function",
    "id": "vampire_total_tier_one_traits",
    "num_args": 0,
    "return": "u_has_trait('EYEGLEAM') + u_has_trait('BLOOD_FUN') + u_has_trait('STAMINAFORBLOOD') + u_has_trait('COMMUNE_NIGHT') + u_has_trait('VAMPIRIC_STRENGTH') + u_has_trait('VAMPIRIC_RESILIENCE') + u_has_trait('VAMPIRE_HEIGHTENED_SENSES') + u_has_trait('VAMPIRE_SILENT_MOVE') + u_has_trait('DHAMPIR_REDUCED_COLD_TEMPS')"
  },
  {
    "type": "jmath_function",
    "id": "vampire_total_tier_one_traits_plus_potency",
    "//": "This is the statement that should be used in power scaling calculations, to make sure that Apex Vampire's Potency is properly accounted for without blocking the gaining of additional powers",
    "num_args": 0,
    "return": "vampire_total_tier_one_traits() + (u_effect_intensity('effect_player_anathema_potency_boost'))"
  },
  {
    "type": "jmath_function",
    "id": "vampire_total_tier_two_traits",
    "num_args": 0,
    "return": "u_has_trait('BLOODHEAL') + u_has_trait('COAGULANTWEAVE') + u_has_trait('VAMPIRIC_DODGE') + u_has_trait('VAMPIRE_FEAR_GAZE') + u_has_trait('VAMPIRE_WALK_ON_WALLS') + u_has_trait('VAMPIRE_BEAST_CLAWS') + u_has_trait('VAMPIRE_SEE_HEAT')  + u_has_trait('EYEGLEAM_UPGRADE') + u_has_trait('VAMPIRE_SEE_THROUGH_NIGHT_EYES') + u_has_trait('BLOOD_FUN_UPGRADE') + u_has_trait('VAMPIRE_SILENT_MOVE_UPGRADE') + u_has_trait('DHAMPIR_FANGS') + u_has_trait('DHAMPIR_SLOWFALL') + u_has_trait('DHAMPIR_RESIST_DISEASE_POISON_INFECTION')"
  },
  {
    "type": "jmath_function",
    "id": "vampire_total_tier_three_traits",
    "num_args": 0,
    "return": "u_has_trait('BLOODHASTE') + u_has_trait('HYPNOTIC_GAZE') + u_has_trait('MAGICFORBLOOD') + u_has_trait('BLOODBANK') + u_has_trait('VAMPIRE_COMMAND_BEAST') + u_has_trait('VAMPIRE_EARTH_SLUMBER') + u_has_trait('VAMPIRE_STORE_MORE_BLOOD') + u_has_trait('VAMPIRE_INSTANT_BLEED') + u_has_trait('VAMPIRE_BIG_STOMACH') + u_has_trait('VAMPIRE_DETECT_VAMPIRES') + u_has_trait('DHAMPIR_REDUCED_PAIN') + u_has_trait('DHAMPIR_MEND_WOUNDS_FASTER')"
  },
  {
    "type": "jmath_function",
    "id": "vampire_total_tier_four_traits",
    "//": "This is where all new added tier four traits should be placed",
    "num_args": 0,
    "return": "u_has_trait('TRUE_VAMPIRE_POWER') + u_has_trait('VAMPIRE_TORPOR') + u_has_trait('VAMPIRE_DOMINATE') + u_has_trait('VAMPIRE_NO_BREATHE') + u_has_trait('VAMPIRE_NO_ILLNESS') + u_has_trait('VAMPIRE_BAT_FORM') + u_has_trait('VAMPIRE_WOLF_FORM') + u_has_trait('VAMPIRE_MIST_FORM') + u_has_trait('VAMPIRE_STORE_MORE_BLOOD_UPGRADE') + u_has_trait('VAMPIRE_INVISIBLE_IN_DARK') + u_has_trait('VAMPIRE_NO_ILLNESS_UPGRADE') + u_has_trait('VAMPIRE_FORM_UPGRADE') + u_has_trait('VAMPIRE_BLOOD_FOR_POTENCY')"
  },
  {
    "type": "jmath_function",
    "id": "vampire_total_tier_four_traits_plus_potence",
    "//": "This is the statement that should be used in power scaling calculations, to make sure that True Vampire's Potence is properly accounted for without blocking the gaining of additional powers",
    "num_args": 0,
    "return": "vampire_total_tier_four_traits() + (u_has_trait('TRUE_VAMPIRE_POWER') * 5)"
  },
  {
    "type": "jmath_function",
    "id": "vampire_total_tier_five_traits",
    "//": "This is where all newly-added tier five traits should be placed",
    "num_args": 0,
    "return": "u_has_trait('VAMPIRE_MASTER_MORTAL_MIND') + u_has_trait('VAMPIRE_DISTILLATE_INNER_BLOOD') + u_has_trait('VAMPIRE_SHADOW_FORM') + u_has_trait('VAMPIRE_LAST_BREATH_MIST') + u_has_trait('VAMPIRE_IRON_MIND') + u_has_trait('VAMPIRE_BLIND_THE_SUN') + u_has_trait('VAMPIRE_HEAL_IN_DARK') + u_has_trait('VAMPIRE_DRINK_VAMPIRE_BLOOD') + u_has_trait('VAMPIRE_GAIN_BLOOD_GIFTS') + u_has_trait('VAMPIRE_LAST_BREATH_MIST_UPGRADE') + u_has_trait('VAMPIRE_MASTER_MORTAL_MIND_UPGRADE')"
  },
  {
    "type": "jmath_function",
    "id": "vampire_total_tier_five_traits_plus_cauldron",
    "//": "This is the statement that should be used in power scaling calculations, to make sure that Boiling Crimson Cauldron is properly accounted for without blocking the gaining of additional powers",
    "num_args": 0,
    "return": "vampire_total_tier_five_traits() + (u_has_trait('VAMPIRE_BLOOD_FOR_POTENCY_REAL') * 10)"
  },
  {
    "type": "jmath_function",
    "id": "vampire_anathema_pre_threshold_traits",
    "//": "This is where all newly-added pre-threshold anathema traits should be placed",
    "num_args": 0,
    "return": "u_has_trait('VAMPIRE_STORE_MORE_BLOOD') + u_has_trait('EYEGLEAM_UPGRADE') + u_has_trait('VAMPIRE_INSTANT_BLEED') + u_has_trait('VAMPIRE_DETECT_VAMPIRES') + u_has_trait('VAMPIRE_BIG_STOMACH') + u_has_trait('VAMPIRE_SEE_THROUGH_NIGHT_EYES') + u_has_trait('BLOOD_FUN_UPGRADE') + u_has_trait('VAMPIRE_SILENT_MOVE_UPGRADE')"
  },
  {
    "type": "jmath_function",
    "id": "dhampir_total_weaknesses",
    "num_args": 0,
    "return": "u_has_trait('DHAMPIR_WEAKNESS_SUN_SENSITIVITY') + u_has_trait('DHAMPIR_WEAKNESS_SLOW_HEALING') + u_has_trait('DHAMPIR_WEAKNESS_ANIMAL_DISCORD') + u_has_trait('DHAMPIR_WEAKNESS_WATER_PAIN') + u_has_trait('DHAMPIR_WEAKNESS_CORPSELIKE_PALLOR') + u_has_trait('DHAMPIR_WEAKNESS_BLOODTHIRST') + u_has_trait('DHAMPIR_WEAKNESS_SLOWER_BLOOD_GAIN') + u_has_trait('DHAMPIR_WEAKNESS_OVERWHELMING_ARROGANCE')"
  },
  {
    "type": "jmath_function",
    "id": "changeling_common_traits",
    "//": "This is to make sure no individual changeling has a mutation count twice",
    "num_args": 0,
    "return": "(u_has_trait('UNKNOWING_CHANGELING_NOBLE') * u_sum_traits_of_category_char_has('FAIR_FOLK_NOBLE') ) + (u_has_trait('UNKNOWING_CHANGELING_COMMONER_BROWNIE') * u_sum_traits_of_category_char_has('FAIR_FOLK_COMMONER_BROWNIE') ) + (u_has_trait('UNKNOWING_CHANGELING_COMMONER_POOKA') * u_sum_traits_of_category_char_has('FAIR_FOLK_COMMONER_POOKA') ) + (u_has_trait('UNKNOWING_CHANGELING_COMMONER_SELKIE') * u_sum_traits_of_category_char_has('FAIR_FOLK_COMMONER_SELKIE') ) + (u_has_trait('UNKNOWING_CHANGELING_COMMONER_TROW') * u_sum_traits_of_category_char_has('FAIR_FOLK_COMMONER_TROW') )"
  },
  {
    "type": "jmath_function",
    "id": "pooka_shapeshift_traits",
    "num_args": 0,
    "return": "u_has_trait('ANTLERS') + u_has_trait('HORNS_CURLED') + u_has_trait('LUPINE_EARS') + u_has_trait('FELINE_EARS') + u_has_trait('CLAWS') + u_has_trait('CLAWS_ST') + u_has_trait('WINGS_BIRD') + u_has_trait('URSINE_FUR') + u_has_trait('CHITIN2') + u_has_trait('POOKA_QUADRUPED_TRAITS') + u_has_trait('LEAPING_LEGS') + u_has_trait('TAIL_FLUFFY') + u_has_trait('TAIL_LONG')"
  },
  {
    "type": "jmath_function",
    "id": "selkie_has_weather_mastery",
    "num_args": 0,
    "return": "1 + (u_has_trait('SELKIE_CHANGE_WEATHER_MASTER') * 1.5)"
  },
  {
    "type": "jmath_function",
    "id": "lilin_has_ruach_efficiency",
    "num_args": 0,
    "return": "1 - min( ( (u_has_trait('LILIN_RUACH_EFFICIENCY') * 0.15) + (u_has_trait('LILIN_RUACH_EFFICIENCY_UPGRADE') * 0.15) + ( u_has_trait('LILIN_RUACH_EFFICIENCY_UPGRADE') * max( ( (u_vitamin('lilin_ruach_vitamin') - 3500 ) / 12000 ), 0) ) ), 0.33)"
  },
  {
    "type": "jmath_function",
    "id": "lilin_has_ruach_efficiency_beta",
    "//": "For use when the lilit is the beta talker of the spell EoC, such as when it's targeting someone else",
    "num_args": 0,
    "return": "1 - min( ( (n_has_trait('LILIN_RUACH_EFFICIENCY') * 0.15) + (n_has_trait('LILIN_RUACH_EFFICIENCY_UPGRADE') * 0.15) + ( n_has_trait('LILIN_RUACH_EFFICIENCY_UPGRADE') * max( ( (n_vitamin('lilin_ruach_vitamin') - 3500 ) / 12000 ), 0) ) ), 0.33)"
  }
]
