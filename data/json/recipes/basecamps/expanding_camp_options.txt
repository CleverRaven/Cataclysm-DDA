2020-11-21

The porpose of this file is to attempt to describe how the author has reorganized
base camps and expansions, and give an indication of how to add new base versions
and expansion alternatives.
Obviously, descriptions refer to the conditions at the time of this writing: things
will probably change in the future.

Overview:
Recipes for both bases and expansions reside here, i.e. in ..\data\json\recipes\
basecamps, while the blueprints these recipes refer to reside in ..\data\json\
mapgen\basecamps.

The top level file in these hierarchies is ..\data\json\recipes\\basecamps\
recipe_groups.json. This file contains one recipe group listing all faction base
types, and one listing all expansions. It's important to note that as of this
writing the format for the "id" of faction base types have to conform to the
pattern "faction_base" + <your descriptive part> + "_0". Using anything else
at the end will result in confusing and useless results.

Expansions are orthogonal to base types, i.e. any expansion can go with any base
type that supports expansions (currently only the modular field base ones).

It should be possible to add new expansions to the all_faction_base_expansions
recipe group, although the author decided (wisely or not) to keep a single entry
at this level and branch out at the next one. Adding brand new expansions (or
reorganizing the structure to bring everything to this top level) will at least
require adding new entries to ..\data\json\overmap\overmap_terrain\
overmap_terrain_faction_base.json. It's possible ..\data\json\mapgen\
faction_buildings.json may have to be updated, or it may contain legacy support.

The organization within the recipies and mapgen basecamp folders is the same:
one sub folder for base types, and one for expansions. The base folders are then
divided into one sub folder for each base type. If there's more than one variant
of a base type it's split into an additional version level (the author is
uncertain whether the different shelter variants are intended to be the same
base adapted to different layouts or should be considered separate. The current
organization assumes the latter).

The logic is the same for expansions: within the expansion folder there are
folders for each expansion, and expansions that have variants contain an
additional level for the variants.

"Name spaces":
The goal has been to try to keep each new base and expansion variant into its
own name space, to avoid them conflicting with each other. There isn't much to
be done with pre existing ones, as the names stored within saves have to remain
the same to be backwards compatible.
For new bases and expansion variants, the convention used is to use a four letter
prefix consisting of the abbreviation already used, plus a new number for the
variant, e.g. fbmh_2" for the new faction base modular hub. Expansion variants
can use the same scheme, while new expansions would use a previously unused
fourth letter appended to "_1". It can also be noted that recipes, and
blueprints reside in different name spaces, so it's possible to use the same
identifying string for all of them. It seems recipe names get automatically
introduced into the identifier name space, as primitive recipes tend to require
identifiers that have not been introduced explicitly. Whether explicitly
"providing" an identifier that's identical to the recipe name will introduce it
once or twice is unknown by the author, so care should be taken.

Expansion variants:
It was mentioned above that the author elected to push the expansion variant
selection down one level, rather than having it on par with the base camp.
The implementation used instead it to use a set of zero time blueprints, where
the player selects one at the expense of all others. The reason for that was
partially because the author's implementations are based on the orientation of
the expansion, and so require that the player selects the correct on (as there
is no way for the recipe logic to detect in which relative tile the expansion
resides), so adding an additional option for the legacy case would affect the
player little. If, however, additional expansions (have to) make use of
orientation the number of elements in the list may grow rather unwieldy, in
which case a reorganization is needed: either place all expansion versions
at the top level, or push the orientation selection down an additional level
through another zero time recive.

Caveats:
There are currently a number of "magic identifiers" that allows the code
to know that expansions have provided a number of capabilities, such as water
and any kind of construction providing a cooking capability. The exact set
supported by code is unknown by the author, but is may well be exactly the ones
that can be found in the various existing recipes (and may in fact be smaller
than that set). Many of these magic identifiers are called "fake_X", where X is
the tile or furniture whose functionality is provided.